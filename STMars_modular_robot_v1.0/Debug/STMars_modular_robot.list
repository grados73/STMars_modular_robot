
STMars_modular_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007824  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  080079b8  080079b8  000179b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cc8  08007cc8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007cc8  08007cc8  00017cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cd0  08007cd0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cd0  08007cd0  00017cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cd4  08007cd4  00017cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  200001dc  08007eb4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08007eb4  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfe0  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ffe  00000000  00000000  0002d1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a60  00000000  00000000  0002f1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000938  00000000  00000000  0002fc50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020963  00000000  00000000  00030588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c050  00000000  00000000  00050eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1344  00000000  00000000  0005cf3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e27f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003538  00000000  00000000  0011e2fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800799c 	.word	0x0800799c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800799c 	.word	0x0800799c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <MX_GPIO_Init+0x8c>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <MX_GPIO_Init+0x8c>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <MX_GPIO_Init+0x8c>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_GPIO_Init+0x8c>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	4a16      	ldr	r2, [pc, #88]	; (8001014 <MX_GPIO_Init+0x8c>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_GPIO_Init+0x8c>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_GPIO_Init+0x8c>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	4a10      	ldr	r2, [pc, #64]	; (8001014 <MX_GPIO_Init+0x8c>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_GPIO_Init+0x8c>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2108      	movs	r1, #8
 8000fea:	480b      	ldr	r0, [pc, #44]	; (8001018 <MX_GPIO_Init+0x90>)
 8000fec:	f000 fe3e 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	4619      	mov	r1, r3
 8001006:	4804      	ldr	r0, [pc, #16]	; (8001018 <MX_GPIO_Init+0x90>)
 8001008:	f000 fcc6 	bl	8001998 <HAL_GPIO_Init>

}
 800100c:	bf00      	nop
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40021000 	.word	0x40021000
 8001018:	48000400 	.word	0x48000400

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001020:	f000 faf3 	bl	800160a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001024:	f000 f812 	bl	800104c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001028:	f7ff ffae 	bl	8000f88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800102c:	f000 fa0e 	bl	800144c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001030:	f000 f9dc 	bl	80013ec <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001034:	f000 f88e 	bl	8001154 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &Value, 1);
 8001038:	2201      	movs	r2, #1
 800103a:	4902      	ldr	r1, [pc, #8]	; (8001044 <main+0x28>)
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <main+0x2c>)
 800103e:	f002 f861 	bl	8003104 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001042:	e7fe      	b.n	8001042 <main+0x26>
 8001044:	20000204 	.word	0x20000204
 8001048:	20000270 	.word	0x20000270

0800104c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0ac      	sub	sp, #176	; 0xb0
 8001050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001052:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001056:	2244      	movs	r2, #68	; 0x44
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f002 ff5e 	bl	8003f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001060:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2254      	movs	r2, #84	; 0x54
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f002 ff50 	bl	8003f1c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800107c:	f000 fe0e 	bl	8001c9c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001080:	4b33      	ldr	r3, [pc, #204]	; (8001150 <SystemClock_Config+0x104>)
 8001082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001086:	4a32      	ldr	r2, [pc, #200]	; (8001150 <SystemClock_Config+0x104>)
 8001088:	f023 0318 	bic.w	r3, r3, #24
 800108c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001090:	2314      	movs	r3, #20
 8001092:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001094:	2301      	movs	r3, #1
 8001096:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001098:	2301      	movs	r3, #1
 800109a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010a4:	2360      	movs	r3, #96	; 0x60
 80010a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2302      	movs	r3, #2
 80010ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010b0:	2301      	movs	r3, #1
 80010b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80010bc:	2328      	movs	r3, #40	; 0x28
 80010be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010c2:	2307      	movs	r3, #7
 80010c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 fe53 	bl	8001d84 <HAL_RCC_OscConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010e4:	f000 f890 	bl	8001208 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e8:	230f      	movs	r3, #15
 80010ea:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ec:	2303      	movs	r3, #3
 80010ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001100:	2104      	movs	r1, #4
 8001102:	4618      	mov	r0, r3
 8001104:	f001 fa5e 	bl	80025c4 <HAL_RCC_ClockConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800110e:	f000 f87b 	bl	8001208 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8001112:	2303      	movs	r3, #3
 8001114:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800111a:	2300      	movs	r3, #0
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4618      	mov	r0, r3
 8001122:	f001 fc53 	bl	80029cc <HAL_RCCEx_PeriphCLKConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800112c:	f000 f86c 	bl	8001208 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001130:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001134:	f000 fdd0 	bl	8001cd8 <HAL_PWREx_ControlVoltageScaling>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800113e:	f000 f863 	bl	8001208 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001142:	f001 fe35 	bl	8002db0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001146:	bf00      	nop
 8001148:	37b0      	adds	r7, #176	; 0xb0
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000

08001154 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2100      	movs	r1, #0
 800115c:	2025      	movs	r0, #37	; 0x25
 800115e:	f000 fba4 	bl	80018aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001162:	2025      	movs	r0, #37	; 0x25
 8001164:	f000 fbbd 	bl	80018e2 <HAL_NVIC_EnableIRQ>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) // funkcja wywolywana po pomyslnym przeslaniu uarta
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) // spr czy nasz uart 2 przychodzi, huart to wskaznik, a huart2 to struktura, wiec potrzebujemy jej adres do spr ==
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <HAL_UART_TxCpltCallback+0x4c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d118      	bne.n	80011ae <HAL_UART_TxCpltCallback+0x42>
	{
		i++;
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_UART_TxCpltCallback+0x50>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_UART_TxCpltCallback+0x50>)
 8001186:	701a      	strb	r2, [r3, #0]
		LenToSend = sprintf(MessageToSend, "Int nr: %d\r\n", i);
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_UART_TxCpltCallback+0x50>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	490c      	ldr	r1, [pc, #48]	; (80011c0 <HAL_UART_TxCpltCallback+0x54>)
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <HAL_UART_TxCpltCallback+0x58>)
 8001192:	f003 fd0f 	bl	8004bb4 <siprintf>
 8001196:	4603      	mov	r3, r0
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_UART_TxCpltCallback+0x5c>)
 800119c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, MessageToSend, LenToSend);
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_UART_TxCpltCallback+0x5c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	4907      	ldr	r1, [pc, #28]	; (80011c4 <HAL_UART_TxCpltCallback+0x58>)
 80011a8:	4803      	ldr	r0, [pc, #12]	; (80011b8 <HAL_UART_TxCpltCallback+0x4c>)
 80011aa:	f001 ff4f 	bl	800304c <HAL_UART_Transmit_IT>
	}
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000270 	.word	0x20000270
 80011bc:	2000024a 	.word	0x2000024a
 80011c0:	080079b8 	.word	0x080079b8
 80011c4:	2000024c 	.word	0x2000024c
 80011c8:	2000026c 	.word	0x2000026c

080011cc <HAL_UART_RxCpltCallback>:

//ODBIOR
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a09      	ldr	r2, [pc, #36]	; (80011fc <HAL_UART_RxCpltCallback+0x30>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d10a      	bne.n	80011f2 <HAL_UART_RxCpltCallback+0x26>
	{
		HAL_UART_Receive_IT(&huart1, &Value, 1); // wywolanie przerwania po otrzymaniu 1 znaku
 80011dc:	2201      	movs	r2, #1
 80011de:	4908      	ldr	r1, [pc, #32]	; (8001200 <HAL_UART_RxCpltCallback+0x34>)
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <HAL_UART_RxCpltCallback+0x30>)
 80011e2:	f001 ff8f 	bl	8003104 <HAL_UART_Receive_IT>
		RB_Write(&MessageToRead, Value);
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_UART_RxCpltCallback+0x34>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <HAL_UART_RxCpltCallback+0x38>)
 80011ee:	f000 f80f 	bl	8001210 <RB_Write>
	}

}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000270 	.word	0x20000270
 8001200:	20000204 	.word	0x20000204
 8001204:	20000208 	.word	0x20000208

08001208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120e:	e7fe      	b.n	800120e <Error_Handler+0x6>

08001210 <RB_Write>:
	return RB_OK;	// Return Success
}


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	425a      	negs	r2, r3
 8001224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001228:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800122c:	bf58      	it	pl
 800122e:	4253      	negpl	r3, r2
 8001230:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	785b      	ldrb	r3, [r3, #1]
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	429a      	cmp	r2, r3
 800123a:	d101      	bne.n	8001240 <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 800123c:	2301      	movs	r3, #1
 800123e:	e00a      	b.n	8001256 <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	78fa      	ldrb	r2, [r7, #3]
 800124c:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HAL_MspInit+0x44>)
 800126c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126e:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <HAL_MspInit+0x44>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6613      	str	r3, [r2, #96]	; 0x60
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <HAL_MspInit+0x44>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_MspInit+0x44>)
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001286:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <HAL_MspInit+0x44>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	6593      	str	r3, [r2, #88]	; 0x58
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_MspInit+0x44>)
 8001290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <NMI_Handler+0x4>

080012b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <MemManage_Handler+0x4>

080012be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <BusFault_Handler+0x4>

080012c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <UsageFault_Handler+0x4>

080012ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f8:	f000 f9dc 	bl	80016b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
//	UARTDMA_UartIrqHandler(&huartdma1); // WERSJA NA DMA!!!
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <USART1_IRQHandler+0x10>)
 8001306:	f001 ff9f 	bl	8003248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000270 	.word	0x20000270

08001314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800131c:	4a14      	ldr	r2, [pc, #80]	; (8001370 <_sbrk+0x5c>)
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <_sbrk+0x60>)
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <_sbrk+0x64>)
 8001332:	4a12      	ldr	r2, [pc, #72]	; (800137c <_sbrk+0x68>)
 8001334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	429a      	cmp	r2, r3
 8001342:	d207      	bcs.n	8001354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001344:	f002 fdc0 	bl	8003ec8 <__errno>
 8001348:	4602      	mov	r2, r0
 800134a:	230c      	movs	r3, #12
 800134c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	e009      	b.n	8001368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	4a05      	ldr	r2, [pc, #20]	; (8001378 <_sbrk+0x64>)
 8001364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20010000 	.word	0x20010000
 8001374:	00000400 	.word	0x00000400
 8001378:	200001f8 	.word	0x200001f8
 800137c:	20000378 	.word	0x20000378

08001380 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <SystemInit+0x64>)
 8001386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800138a:	4a16      	ldr	r2, [pc, #88]	; (80013e4 <SystemInit+0x64>)
 800138c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <SystemInit+0x68>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <SystemInit+0x68>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <SystemInit+0x68>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <SystemInit+0x68>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <SystemInit+0x68>)
 80013ac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80013b0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80013b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <SystemInit+0x68>)
 80013b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013bc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <SystemInit+0x68>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <SystemInit+0x68>)
 80013c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <SystemInit+0x68>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <SystemInit+0x64>)
 80013d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013d6:	609a      	str	r2, [r3, #8]
#endif
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00
 80013e8:	40021000 	.word	0x40021000

080013ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_USART1_UART_Init+0x58>)
 80013f2:	4a15      	ldr	r2, [pc, #84]	; (8001448 <MX_USART1_UART_Init+0x5c>)
 80013f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_USART1_UART_Init+0x58>)
 80013f8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80013fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USART1_UART_Init+0x58>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_USART1_UART_Init+0x58>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USART1_UART_Init+0x58>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_USART1_UART_Init+0x58>)
 8001412:	220c      	movs	r2, #12
 8001414:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USART1_UART_Init+0x58>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_USART1_UART_Init+0x58>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USART1_UART_Init+0x58>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_USART1_UART_Init+0x58>)
 800142a:	2200      	movs	r2, #0
 800142c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_USART1_UART_Init+0x58>)
 8001430:	f001 fdbe 	bl	8002fb0 <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800143a:	f7ff fee5 	bl	8001208 <Error_Handler>
  }

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000270 	.word	0x20000270
 8001448:	40013800 	.word	0x40013800

0800144c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001452:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <MX_USART2_UART_Init+0x5c>)
 8001454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001490:	f001 fd8e 	bl	8002fb0 <HAL_UART_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800149a:	f7ff feb5 	bl	8001208 <Error_Handler>
  }

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200002f0 	.word	0x200002f0
 80014a8:	40004400 	.word	0x40004400

080014ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a38      	ldr	r2, [pc, #224]	; (80015ac <HAL_UART_MspInit+0x100>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12a      	bne.n	8001524 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ce:	4b38      	ldr	r3, [pc, #224]	; (80015b0 <HAL_UART_MspInit+0x104>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d2:	4a37      	ldr	r2, [pc, #220]	; (80015b0 <HAL_UART_MspInit+0x104>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6613      	str	r3, [r2, #96]	; 0x60
 80014da:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <HAL_UART_MspInit+0x104>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <HAL_UART_MspInit+0x104>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4a31      	ldr	r2, [pc, #196]	; (80015b0 <HAL_UART_MspInit+0x104>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <HAL_UART_MspInit+0x104>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001510:	2307      	movs	r3, #7
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f000 fa3b 	bl	8001998 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001522:	e03f      	b.n	80015a4 <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a22      	ldr	r2, [pc, #136]	; (80015b4 <HAL_UART_MspInit+0x108>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d13a      	bne.n	80015a4 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_UART_MspInit+0x104>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <HAL_UART_MspInit+0x104>)
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	6593      	str	r3, [r2, #88]	; 0x58
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_UART_MspInit+0x104>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <HAL_UART_MspInit+0x104>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a19      	ldr	r2, [pc, #100]	; (80015b0 <HAL_UART_MspInit+0x104>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_UART_MspInit+0x104>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800155e:	2304      	movs	r3, #4
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800156e:	2307      	movs	r3, #7
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157c:	f000 fa0c 	bl	8001998 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001580:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001592:	2303      	movs	r3, #3
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a0:	f000 f9fa 	bl	8001998 <HAL_GPIO_Init>
}
 80015a4:	bf00      	nop
 80015a6:	3730      	adds	r7, #48	; 0x30
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40013800 	.word	0x40013800
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40004400 	.word	0x40004400

080015b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015bc:	f7ff fee0 	bl	8001380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015c2:	e003      	b.n	80015cc <LoopCopyDataInit>

080015c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015ca:	3104      	adds	r1, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015cc:	480a      	ldr	r0, [pc, #40]	; (80015f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80015d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015d4:	d3f6      	bcc.n	80015c4 <CopyDataInit>
	ldr	r2, =_sbss
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <LoopForever+0x12>)
	b	LoopFillZerobss
 80015d8:	e002      	b.n	80015e0 <LoopFillZerobss>

080015da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015dc:	f842 3b04 	str.w	r3, [r2], #4

080015e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <LoopForever+0x16>)
	cmp	r2, r3
 80015e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80015e4:	d3f9      	bcc.n	80015da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e6:	f002 fc75 	bl	8003ed4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ea:	f7ff fd17 	bl	800101c <main>

080015ee <LoopForever>:

LoopForever:
    b LoopForever
 80015ee:	e7fe      	b.n	80015ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015f0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80015f4:	08007cd8 	.word	0x08007cd8
	ldr	r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80015fc:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001600:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001604:	20000378 	.word	0x20000378

08001608 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC1_IRQHandler>

0800160a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001614:	2003      	movs	r0, #3
 8001616:	f000 f93d 	bl	8001894 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800161a:	2000      	movs	r0, #0
 800161c:	f000 f80e 	bl	800163c <HAL_InitTick>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	71fb      	strb	r3, [r7, #7]
 800162a:	e001      	b.n	8001630 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800162c:	f7ff fe1a 	bl	8001264 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001630:	79fb      	ldrb	r3, [r7, #7]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_InitTick+0x6c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d023      	beq.n	8001698 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_InitTick+0x70>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_InitTick+0x6c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f949 	bl	80018fe <HAL_SYSTICK_Config>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10f      	bne.n	8001692 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b0f      	cmp	r3, #15
 8001676:	d809      	bhi.n	800168c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001678:	2200      	movs	r2, #0
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f000 f913 	bl	80018aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001684:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_InitTick+0x74>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e007      	b.n	800169c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	e004      	b.n	800169c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
 8001696:	e001      	b.n	800169c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800169c:	7bfb      	ldrb	r3, [r7, #15]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000004 	.word	0x20000004

080016b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_IncTick+0x20>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_IncTick+0x24>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_IncTick+0x24>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000008 	.word	0x20000008
 80016d8:	20000370 	.word	0x20000370

080016dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_GetTick+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000370 	.word	0x20000370

080016f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001710:	4013      	ands	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800171c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001726:	4a04      	ldr	r2, [pc, #16]	; (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	60d3      	str	r3, [r2, #12]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <__NVIC_GetPriorityGrouping+0x18>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	f003 0307 	and.w	r3, r3, #7
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	db0b      	blt.n	8001782 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	f003 021f 	and.w	r2, r3, #31
 8001770:	4907      	ldr	r1, [pc, #28]	; (8001790 <__NVIC_EnableIRQ+0x38>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	2001      	movs	r0, #1
 800177a:	fa00 f202 	lsl.w	r2, r0, r2
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e100 	.word	0xe000e100

08001794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0a      	blt.n	80017be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	490c      	ldr	r1, [pc, #48]	; (80017e0 <__NVIC_SetPriority+0x4c>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	440b      	add	r3, r1
 80017b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017bc:	e00a      	b.n	80017d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4908      	ldr	r1, [pc, #32]	; (80017e4 <__NVIC_SetPriority+0x50>)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	3b04      	subs	r3, #4
 80017cc:	0112      	lsls	r2, r2, #4
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	440b      	add	r3, r1
 80017d2:	761a      	strb	r2, [r3, #24]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000e100 	.word	0xe000e100
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f1c3 0307 	rsb	r3, r3, #7
 8001802:	2b04      	cmp	r3, #4
 8001804:	bf28      	it	cs
 8001806:	2304      	movcs	r3, #4
 8001808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3304      	adds	r3, #4
 800180e:	2b06      	cmp	r3, #6
 8001810:	d902      	bls.n	8001818 <NVIC_EncodePriority+0x30>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3b03      	subs	r3, #3
 8001816:	e000      	b.n	800181a <NVIC_EncodePriority+0x32>
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	401a      	ands	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43d9      	mvns	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	4313      	orrs	r3, r2
         );
}
 8001842:	4618      	mov	r0, r3
 8001844:	3724      	adds	r7, #36	; 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001860:	d301      	bcc.n	8001866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001862:	2301      	movs	r3, #1
 8001864:	e00f      	b.n	8001886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <SysTick_Config+0x40>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186e:	210f      	movs	r1, #15
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f7ff ff8e 	bl	8001794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <SysTick_Config+0x40>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <SysTick_Config+0x40>)
 8001880:	2207      	movs	r2, #7
 8001882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	e000e010 	.word	0xe000e010

08001894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ff29 	bl	80016f4 <__NVIC_SetPriorityGrouping>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018bc:	f7ff ff3e 	bl	800173c <__NVIC_GetPriorityGrouping>
 80018c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	6978      	ldr	r0, [r7, #20]
 80018c8:	f7ff ff8e 	bl	80017e8 <NVIC_EncodePriority>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff5d 	bl	8001794 <__NVIC_SetPriority>
}
 80018da:	bf00      	nop
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff31 	bl	8001758 <__NVIC_EnableIRQ>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffa2 	bl	8001850 <SysTick_Config>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d005      	beq.n	800193a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2204      	movs	r2, #4
 8001932:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e029      	b.n	800198e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 020e 	bic.w	r2, r2, #14
 8001948:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0201 	bic.w	r2, r2, #1
 8001958:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	f003 021c 	and.w	r2, r3, #28
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	2101      	movs	r1, #1
 8001968:	fa01 f202 	lsl.w	r2, r1, r2
 800196c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
    }
  }
  return status;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a6:	e148      	b.n	8001c3a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2101      	movs	r1, #1
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	4013      	ands	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 813a 	beq.w	8001c34 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d00b      	beq.n	80019e0 <HAL_GPIO_Init+0x48>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d007      	beq.n	80019e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d4:	2b11      	cmp	r3, #17
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b12      	cmp	r3, #18
 80019de:	d130      	bne.n	8001a42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a16:	2201      	movs	r2, #1
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	f003 0201 	and.w	r2, r3, #1
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0xea>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b12      	cmp	r3, #18
 8001a80:	d123      	bne.n	8001aca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	08da      	lsrs	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3208      	adds	r2, #8
 8001a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	220f      	movs	r2, #15
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	691a      	ldr	r2, [r3, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	08da      	lsrs	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	6939      	ldr	r1, [r7, #16]
 8001ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0203 	and.w	r2, r3, #3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8094 	beq.w	8001c34 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0c:	4b52      	ldr	r3, [pc, #328]	; (8001c58 <HAL_GPIO_Init+0x2c0>)
 8001b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b10:	4a51      	ldr	r2, [pc, #324]	; (8001c58 <HAL_GPIO_Init+0x2c0>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6613      	str	r3, [r2, #96]	; 0x60
 8001b18:	4b4f      	ldr	r3, [pc, #316]	; (8001c58 <HAL_GPIO_Init+0x2c0>)
 8001b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b24:	4a4d      	ldr	r2, [pc, #308]	; (8001c5c <HAL_GPIO_Init+0x2c4>)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b4e:	d00d      	beq.n	8001b6c <HAL_GPIO_Init+0x1d4>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a43      	ldr	r2, [pc, #268]	; (8001c60 <HAL_GPIO_Init+0x2c8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d007      	beq.n	8001b68 <HAL_GPIO_Init+0x1d0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a42      	ldr	r2, [pc, #264]	; (8001c64 <HAL_GPIO_Init+0x2cc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d101      	bne.n	8001b64 <HAL_GPIO_Init+0x1cc>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e004      	b.n	8001b6e <HAL_GPIO_Init+0x1d6>
 8001b64:	2307      	movs	r3, #7
 8001b66:	e002      	b.n	8001b6e <HAL_GPIO_Init+0x1d6>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_GPIO_Init+0x1d6>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	f002 0203 	and.w	r2, r2, #3
 8001b74:	0092      	lsls	r2, r2, #2
 8001b76:	4093      	lsls	r3, r2
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b7e:	4937      	ldr	r1, [pc, #220]	; (8001c5c <HAL_GPIO_Init+0x2c4>)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b8c:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <HAL_GPIO_Init+0x2d0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bb0:	4a2d      	ldr	r2, [pc, #180]	; (8001c68 <HAL_GPIO_Init+0x2d0>)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <HAL_GPIO_Init+0x2d0>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bda:	4a23      	ldr	r2, [pc, #140]	; (8001c68 <HAL_GPIO_Init+0x2d0>)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001be0:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <HAL_GPIO_Init+0x2d0>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c04:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <HAL_GPIO_Init+0x2d0>)
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_GPIO_Init+0x2d0>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c2e:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <HAL_GPIO_Init+0x2d0>)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3301      	adds	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f47f aeaf 	bne.w	80019a8 <HAL_GPIO_Init+0x10>
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	371c      	adds	r7, #28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	48000400 	.word	0x48000400
 8001c64:	48000800 	.word	0x48000800
 8001c68:	40010400 	.word	0x40010400

08001c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c88:	e002      	b.n	8001c90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c8a:	887a      	ldrh	r2, [r7, #2]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40007000 	.word	0x40007000

08001cbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40007000 	.word	0x40007000

08001cd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce6:	d130      	bne.n	8001d4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ce8:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cf4:	d038      	beq.n	8001d68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d06:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2232      	movs	r2, #50	; 0x32
 8001d0c:	fb02 f303 	mul.w	r3, r2, r3
 8001d10:	4a1b      	ldr	r2, [pc, #108]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0c9b      	lsrs	r3, r3, #18
 8001d18:	3301      	adds	r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d1c:	e002      	b.n	8001d24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d30:	d102      	bne.n	8001d38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f2      	bne.n	8001d1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d44:	d110      	bne.n	8001d68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e00f      	b.n	8001d6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d56:	d007      	beq.n	8001d68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d58:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d60:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	431bde83 	.word	0x431bde83

08001d84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d102      	bne.n	8001d98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	f000 bc11 	b.w	80025ba <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d98:	4ba0      	ldr	r3, [pc, #640]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da2:	4b9e      	ldr	r3, [pc, #632]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80e4 	beq.w	8001f82 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x4c>
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	2b0c      	cmp	r3, #12
 8001dc4:	f040 808b 	bne.w	8001ede <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	f040 8087 	bne.w	8001ede <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dd0:	4b92      	ldr	r3, [pc, #584]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_OscConfig+0x64>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e3e8      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1a      	ldr	r2, [r3, #32]
 8001dec:	4b8b      	ldr	r3, [pc, #556]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d004      	beq.n	8001e02 <HAL_RCC_OscConfig+0x7e>
 8001df8:	4b88      	ldr	r3, [pc, #544]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e00:	e005      	b.n	8001e0e <HAL_RCC_OscConfig+0x8a>
 8001e02:	4b86      	ldr	r3, [pc, #536]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d223      	bcs.n	8001e5a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fd78 	bl	800290c <RCC_SetFlashLatencyFromMSIRange>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e3c9      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e26:	4b7d      	ldr	r3, [pc, #500]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a7c      	ldr	r2, [pc, #496]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001e2c:	f043 0308 	orr.w	r3, r3, #8
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4b7a      	ldr	r3, [pc, #488]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4977      	ldr	r1, [pc, #476]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e44:	4b75      	ldr	r3, [pc, #468]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	021b      	lsls	r3, r3, #8
 8001e52:	4972      	ldr	r1, [pc, #456]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]
 8001e58:	e025      	b.n	8001ea6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e5a:	4b70      	ldr	r3, [pc, #448]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a6f      	ldr	r2, [pc, #444]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001e60:	f043 0308 	orr.w	r3, r3, #8
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b6d      	ldr	r3, [pc, #436]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	496a      	ldr	r1, [pc, #424]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e78:	4b68      	ldr	r3, [pc, #416]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	4965      	ldr	r1, [pc, #404]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fd38 	bl	800290c <RCC_SetFlashLatencyFromMSIRange>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e389      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ea6:	f000 fc6f 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 8001eaa:	4601      	mov	r1, r0
 8001eac:	4b5b      	ldr	r3, [pc, #364]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	4a5a      	ldr	r2, [pc, #360]	; (8002020 <HAL_RCC_OscConfig+0x29c>)
 8001eb8:	5cd3      	ldrb	r3, [r2, r3]
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	fa21 f303 	lsr.w	r3, r1, r3
 8001ec2:	4a58      	ldr	r2, [pc, #352]	; (8002024 <HAL_RCC_OscConfig+0x2a0>)
 8001ec4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ec6:	4b58      	ldr	r3, [pc, #352]	; (8002028 <HAL_RCC_OscConfig+0x2a4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fbb6 	bl	800163c <HAL_InitTick>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d052      	beq.n	8001f80 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	e36d      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d032      	beq.n	8001f4c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ee6:	4b4d      	ldr	r3, [pc, #308]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a4c      	ldr	r2, [pc, #304]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ef2:	f7ff fbf3 	bl	80016dc <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001efa:	f7ff fbef 	bl	80016dc <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e356      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f0c:	4b43      	ldr	r3, [pc, #268]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f18:	4b40      	ldr	r3, [pc, #256]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a3f      	ldr	r2, [pc, #252]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001f1e:	f043 0308 	orr.w	r3, r3, #8
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b3d      	ldr	r3, [pc, #244]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	493a      	ldr	r1, [pc, #232]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f36:	4b39      	ldr	r3, [pc, #228]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	021b      	lsls	r3, r3, #8
 8001f44:	4935      	ldr	r1, [pc, #212]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
 8001f4a:	e01a      	b.n	8001f82 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f4c:	4b33      	ldr	r3, [pc, #204]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a32      	ldr	r2, [pc, #200]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f58:	f7ff fbc0 	bl	80016dc <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f60:	f7ff fbbc 	bl	80016dc <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e323      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f72:	4b2a      	ldr	r3, [pc, #168]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x1dc>
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d073      	beq.n	8002076 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x21c>
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	d10e      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d063      	beq.n	8002074 <HAL_RCC_OscConfig+0x2f0>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d15f      	bne.n	8002074 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e300      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc0:	d106      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x24c>
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a15      	ldr	r2, [pc, #84]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e01d      	b.n	800200c <HAL_RCC_OscConfig+0x288>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x270>
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a0f      	ldr	r2, [pc, #60]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a0c      	ldr	r2, [pc, #48]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e00b      	b.n	800200c <HAL_RCC_OscConfig+0x288>
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a08      	ldr	r2, [pc, #32]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a05      	ldr	r2, [pc, #20]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8002006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01b      	beq.n	800204c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7ff fb62 	bl	80016dc <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800201a:	e010      	b.n	800203e <HAL_RCC_OscConfig+0x2ba>
 800201c:	40021000 	.word	0x40021000
 8002020:	080079c8 	.word	0x080079c8
 8002024:	20000000 	.word	0x20000000
 8002028:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202c:	f7ff fb56 	bl	80016dc <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	; 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e2bd      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800203e:	4baf      	ldr	r3, [pc, #700]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x2a8>
 800204a:	e014      	b.n	8002076 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7ff fb46 	bl	80016dc <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002054:	f7ff fb42 	bl	80016dc <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	; 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e2a9      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002066:	4ba5      	ldr	r3, [pc, #660]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x2d0>
 8002072:	e000      	b.n	8002076 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d060      	beq.n	8002144 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	2b04      	cmp	r3, #4
 8002086:	d005      	beq.n	8002094 <HAL_RCC_OscConfig+0x310>
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2b0c      	cmp	r3, #12
 800208c:	d119      	bne.n	80020c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d116      	bne.n	80020c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002094:	4b99      	ldr	r3, [pc, #612]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_OscConfig+0x328>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e286      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ac:	4b93      	ldr	r3, [pc, #588]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	061b      	lsls	r3, r3, #24
 80020ba:	4990      	ldr	r1, [pc, #576]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020c0:	e040      	b.n	8002144 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d023      	beq.n	8002112 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ca:	4b8c      	ldr	r3, [pc, #560]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a8b      	ldr	r2, [pc, #556]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d6:	f7ff fb01 	bl	80016dc <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020de:	f7ff fafd 	bl	80016dc <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e264      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f0:	4b82      	ldr	r3, [pc, #520]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fc:	4b7f      	ldr	r3, [pc, #508]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	061b      	lsls	r3, r3, #24
 800210a:	497c      	ldr	r1, [pc, #496]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
 8002110:	e018      	b.n	8002144 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002112:	4b7a      	ldr	r3, [pc, #488]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a79      	ldr	r2, [pc, #484]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 8002118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800211c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211e:	f7ff fadd 	bl	80016dc <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002126:	f7ff fad9 	bl	80016dc <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e240      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002138:	4b70      	ldr	r3, [pc, #448]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f0      	bne.n	8002126 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d03c      	beq.n	80021ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d01c      	beq.n	8002192 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002158:	4b68      	ldr	r3, [pc, #416]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 800215a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215e:	4a67      	ldr	r2, [pc, #412]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002168:	f7ff fab8 	bl	80016dc <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002170:	f7ff fab4 	bl	80016dc <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e21b      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002182:	4b5e      	ldr	r3, [pc, #376]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 8002184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0ef      	beq.n	8002170 <HAL_RCC_OscConfig+0x3ec>
 8002190:	e01b      	b.n	80021ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002192:	4b5a      	ldr	r3, [pc, #360]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 8002194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002198:	4a58      	ldr	r2, [pc, #352]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a2:	f7ff fa9b 	bl	80016dc <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021aa:	f7ff fa97 	bl	80016dc <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e1fe      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021bc:	4b4f      	ldr	r3, [pc, #316]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 80021be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1ef      	bne.n	80021aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80a6 	beq.w	8002324 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d8:	2300      	movs	r3, #0
 80021da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021dc:	4b47      	ldr	r3, [pc, #284]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 80021de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10d      	bne.n	8002204 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e8:	4b44      	ldr	r3, [pc, #272]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	4a43      	ldr	r2, [pc, #268]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 80021ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f2:	6593      	str	r3, [r2, #88]	; 0x58
 80021f4:	4b41      	ldr	r3, [pc, #260]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002200:	2301      	movs	r3, #1
 8002202:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002204:	4b3e      	ldr	r3, [pc, #248]	; (8002300 <HAL_RCC_OscConfig+0x57c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d118      	bne.n	8002242 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002210:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <HAL_RCC_OscConfig+0x57c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a3a      	ldr	r2, [pc, #232]	; (8002300 <HAL_RCC_OscConfig+0x57c>)
 8002216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221c:	f7ff fa5e 	bl	80016dc <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002224:	f7ff fa5a 	bl	80016dc <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e1c1      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002236:	4b32      	ldr	r3, [pc, #200]	; (8002300 <HAL_RCC_OscConfig+0x57c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d108      	bne.n	800225c <HAL_RCC_OscConfig+0x4d8>
 800224a:	4b2c      	ldr	r3, [pc, #176]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002250:	4a2a      	ldr	r2, [pc, #168]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800225a:	e024      	b.n	80022a6 <HAL_RCC_OscConfig+0x522>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b05      	cmp	r3, #5
 8002262:	d110      	bne.n	8002286 <HAL_RCC_OscConfig+0x502>
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 8002266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226a:	4a24      	ldr	r2, [pc, #144]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227a:	4a20      	ldr	r2, [pc, #128]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002284:	e00f      	b.n	80022a6 <HAL_RCC_OscConfig+0x522>
 8002286:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228c:	4a1b      	ldr	r2, [pc, #108]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	4a17      	ldr	r2, [pc, #92]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 800229e:	f023 0304 	bic.w	r3, r3, #4
 80022a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d016      	beq.n	80022dc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ae:	f7ff fa15 	bl	80016dc <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b4:	e00a      	b.n	80022cc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7ff fa11 	bl	80016dc <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e176      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_RCC_OscConfig+0x578>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0ed      	beq.n	80022b6 <HAL_RCC_OscConfig+0x532>
 80022da:	e01a      	b.n	8002312 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7ff f9fe 	bl	80016dc <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022e2:	e00f      	b.n	8002304 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e4:	f7ff f9fa 	bl	80016dc <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d906      	bls.n	8002304 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e15f      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002304:	4baa      	ldr	r3, [pc, #680]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1e8      	bne.n	80022e4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002312:	7ffb      	ldrb	r3, [r7, #31]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d105      	bne.n	8002324 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002318:	4ba5      	ldr	r3, [pc, #660]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	4aa4      	ldr	r2, [pc, #656]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 800231e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002322:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b00      	cmp	r3, #0
 800232e:	d03c      	beq.n	80023aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01c      	beq.n	8002372 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002338:	4b9d      	ldr	r3, [pc, #628]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 800233a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800233e:	4a9c      	ldr	r2, [pc, #624]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002348:	f7ff f9c8 	bl	80016dc <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002350:	f7ff f9c4 	bl	80016dc <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e12b      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002362:	4b93      	ldr	r3, [pc, #588]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 8002364:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0ef      	beq.n	8002350 <HAL_RCC_OscConfig+0x5cc>
 8002370:	e01b      	b.n	80023aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002372:	4b8f      	ldr	r3, [pc, #572]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 8002374:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002378:	4a8d      	ldr	r2, [pc, #564]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 800237a:	f023 0301 	bic.w	r3, r3, #1
 800237e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002382:	f7ff f9ab 	bl	80016dc <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800238a:	f7ff f9a7 	bl	80016dc <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e10e      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800239c:	4b84      	ldr	r3, [pc, #528]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 800239e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1ef      	bne.n	800238a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8102 	beq.w	80025b8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	f040 80c5 	bne.w	8002548 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023be:	4b7c      	ldr	r3, [pc, #496]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f003 0203 	and.w	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d12c      	bne.n	800242c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	3b01      	subs	r3, #1
 80023de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d123      	bne.n	800242c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d11b      	bne.n	800242c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002400:	429a      	cmp	r2, r3
 8002402:	d113      	bne.n	800242c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240e:	085b      	lsrs	r3, r3, #1
 8002410:	3b01      	subs	r3, #1
 8002412:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002414:	429a      	cmp	r2, r3
 8002416:	d109      	bne.n	800242c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	085b      	lsrs	r3, r3, #1
 8002424:	3b01      	subs	r3, #1
 8002426:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002428:	429a      	cmp	r2, r3
 800242a:	d067      	beq.n	80024fc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2b0c      	cmp	r3, #12
 8002430:	d062      	beq.n	80024f8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002432:	4b5f      	ldr	r3, [pc, #380]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e0bb      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002442:	4b5b      	ldr	r3, [pc, #364]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a5a      	ldr	r2, [pc, #360]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 8002448:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800244c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800244e:	f7ff f945 	bl	80016dc <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002456:	f7ff f941 	bl	80016dc <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0a8      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002468:	4b51      	ldr	r3, [pc, #324]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f0      	bne.n	8002456 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002474:	4b4e      	ldr	r3, [pc, #312]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	4b4e      	ldr	r3, [pc, #312]	; (80025b4 <HAL_RCC_OscConfig+0x830>)
 800247a:	4013      	ands	r3, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002484:	3a01      	subs	r2, #1
 8002486:	0112      	lsls	r2, r2, #4
 8002488:	4311      	orrs	r1, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800248e:	0212      	lsls	r2, r2, #8
 8002490:	4311      	orrs	r1, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002496:	0852      	lsrs	r2, r2, #1
 8002498:	3a01      	subs	r2, #1
 800249a:	0552      	lsls	r2, r2, #21
 800249c:	4311      	orrs	r1, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024a2:	0852      	lsrs	r2, r2, #1
 80024a4:	3a01      	subs	r2, #1
 80024a6:	0652      	lsls	r2, r2, #25
 80024a8:	4311      	orrs	r1, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024ae:	06d2      	lsls	r2, r2, #27
 80024b0:	430a      	orrs	r2, r1
 80024b2:	493f      	ldr	r1, [pc, #252]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024b8:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a3c      	ldr	r2, [pc, #240]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 80024be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c4:	4b3a      	ldr	r3, [pc, #232]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4a39      	ldr	r2, [pc, #228]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 80024ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024d0:	f7ff f904 	bl	80016dc <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d8:	f7ff f900 	bl	80016dc <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e067      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ea:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024f6:	e05f      	b.n	80025b8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e05e      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fc:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d157      	bne.n	80025b8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002508:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a28      	ldr	r2, [pc, #160]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 800250e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002512:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002514:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a25      	ldr	r2, [pc, #148]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 800251a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800251e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002520:	f7ff f8dc 	bl	80016dc <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7ff f8d8 	bl	80016dc <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e03f      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253a:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x7a4>
 8002546:	e037      	b.n	80025b8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d02d      	beq.n	80025aa <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254e:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 8002554:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002558:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d105      	bne.n	8002572 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	4a11      	ldr	r2, [pc, #68]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 800256c:	f023 0303 	bic.w	r3, r3, #3
 8002570:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002572:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	4a0e      	ldr	r2, [pc, #56]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 8002578:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800257c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002580:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7ff f8ab 	bl	80016dc <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258a:	f7ff f8a7 	bl	80016dc <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e00e      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <HAL_RCC_OscConfig+0x82c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f0      	bne.n	800258a <HAL_RCC_OscConfig+0x806>
 80025a8:	e006      	b.n	80025b8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e005      	b.n	80025ba <HAL_RCC_OscConfig+0x836>
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000
 80025b4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop

080025c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0c8      	b.n	800276a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025d8:	4b66      	ldr	r3, [pc, #408]	; (8002774 <HAL_RCC_ClockConfig+0x1b0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d910      	bls.n	8002608 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b63      	ldr	r3, [pc, #396]	; (8002774 <HAL_RCC_ClockConfig+0x1b0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 0207 	bic.w	r2, r3, #7
 80025ee:	4961      	ldr	r1, [pc, #388]	; (8002774 <HAL_RCC_ClockConfig+0x1b0>)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b5f      	ldr	r3, [pc, #380]	; (8002774 <HAL_RCC_ClockConfig+0x1b0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0b0      	b.n	800276a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d04c      	beq.n	80026ae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d107      	bne.n	800262c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261c:	4b56      	ldr	r3, [pc, #344]	; (8002778 <HAL_RCC_ClockConfig+0x1b4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d121      	bne.n	800266c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e09e      	b.n	800276a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d107      	bne.n	8002644 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002634:	4b50      	ldr	r3, [pc, #320]	; (8002778 <HAL_RCC_ClockConfig+0x1b4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d115      	bne.n	800266c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e092      	b.n	800276a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d107      	bne.n	800265c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800264c:	4b4a      	ldr	r3, [pc, #296]	; (8002778 <HAL_RCC_ClockConfig+0x1b4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e086      	b.n	800276a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800265c:	4b46      	ldr	r3, [pc, #280]	; (8002778 <HAL_RCC_ClockConfig+0x1b4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e07e      	b.n	800276a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800266c:	4b42      	ldr	r3, [pc, #264]	; (8002778 <HAL_RCC_ClockConfig+0x1b4>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f023 0203 	bic.w	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	493f      	ldr	r1, [pc, #252]	; (8002778 <HAL_RCC_ClockConfig+0x1b4>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800267e:	f7ff f82d 	bl	80016dc <HAL_GetTick>
 8002682:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002684:	e00a      	b.n	800269c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002686:	f7ff f829 	bl	80016dc <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e066      	b.n	800276a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269c:	4b36      	ldr	r3, [pc, #216]	; (8002778 <HAL_RCC_ClockConfig+0x1b4>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 020c 	and.w	r2, r3, #12
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d1eb      	bne.n	8002686 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d008      	beq.n	80026cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ba:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <HAL_RCC_ClockConfig+0x1b4>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	492c      	ldr	r1, [pc, #176]	; (8002778 <HAL_RCC_ClockConfig+0x1b4>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026cc:	4b29      	ldr	r3, [pc, #164]	; (8002774 <HAL_RCC_ClockConfig+0x1b0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d210      	bcs.n	80026fc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b26      	ldr	r3, [pc, #152]	; (8002774 <HAL_RCC_ClockConfig+0x1b0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 0207 	bic.w	r2, r3, #7
 80026e2:	4924      	ldr	r1, [pc, #144]	; (8002774 <HAL_RCC_ClockConfig+0x1b0>)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b22      	ldr	r3, [pc, #136]	; (8002774 <HAL_RCC_ClockConfig+0x1b0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e036      	b.n	800276a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002708:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <HAL_RCC_ClockConfig+0x1b4>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4918      	ldr	r1, [pc, #96]	; (8002778 <HAL_RCC_ClockConfig+0x1b4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <HAL_RCC_ClockConfig+0x1b4>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4910      	ldr	r1, [pc, #64]	; (8002778 <HAL_RCC_ClockConfig+0x1b4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800273a:	f000 f825 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 800273e:	4601      	mov	r1, r0
 8002740:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <HAL_RCC_ClockConfig+0x1b4>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	4a0c      	ldr	r2, [pc, #48]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	5cd3      	ldrb	r3, [r2, r3]
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	fa21 f303 	lsr.w	r3, r1, r3
 8002756:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800275a:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe ff6c 	bl	800163c <HAL_InitTick>
 8002764:	4603      	mov	r3, r0
 8002766:	72fb      	strb	r3, [r7, #11]

  return status;
 8002768:	7afb      	ldrb	r3, [r7, #11]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40022000 	.word	0x40022000
 8002778:	40021000 	.word	0x40021000
 800277c:	080079c8 	.word	0x080079c8
 8002780:	20000000 	.word	0x20000000
 8002784:	20000004 	.word	0x20000004

08002788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	; 0x24
 800278c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002796:	4b3d      	ldr	r3, [pc, #244]	; (800288c <HAL_RCC_GetSysClockFreq+0x104>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027a0:	4b3a      	ldr	r3, [pc, #232]	; (800288c <HAL_RCC_GetSysClockFreq+0x104>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x34>
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b0c      	cmp	r3, #12
 80027b4:	d121      	bne.n	80027fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d11e      	bne.n	80027fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027bc:	4b33      	ldr	r3, [pc, #204]	; (800288c <HAL_RCC_GetSysClockFreq+0x104>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027c8:	4b30      	ldr	r3, [pc, #192]	; (800288c <HAL_RCC_GetSysClockFreq+0x104>)
 80027ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ce:	0a1b      	lsrs	r3, r3, #8
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	e005      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027d8:	4b2c      	ldr	r3, [pc, #176]	; (800288c <HAL_RCC_GetSysClockFreq+0x104>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027e4:	4a2a      	ldr	r2, [pc, #168]	; (8002890 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10d      	bne.n	8002810 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d102      	bne.n	8002806 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002800:	4b24      	ldr	r3, [pc, #144]	; (8002894 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	e004      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d101      	bne.n	8002810 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800280c:	4b22      	ldr	r3, [pc, #136]	; (8002898 <HAL_RCC_GetSysClockFreq+0x110>)
 800280e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d133      	bne.n	800287e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002816:	4b1d      	ldr	r3, [pc, #116]	; (800288c <HAL_RCC_GetSysClockFreq+0x104>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d002      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0xa4>
 8002826:	2b03      	cmp	r3, #3
 8002828:	d003      	beq.n	8002832 <HAL_RCC_GetSysClockFreq+0xaa>
 800282a:	e005      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_RCC_GetSysClockFreq+0x10c>)
 800282e:	617b      	str	r3, [r7, #20]
      break;
 8002830:	e005      	b.n	800283e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002832:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCC_GetSysClockFreq+0x110>)
 8002834:	617b      	str	r3, [r7, #20]
      break;
 8002836:	e002      	b.n	800283e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	617b      	str	r3, [r7, #20]
      break;
 800283c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <HAL_RCC_GetSysClockFreq+0x104>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	3301      	adds	r3, #1
 800284a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_RCC_GetSysClockFreq+0x104>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	0a1b      	lsrs	r3, r3, #8
 8002852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	fb02 f203 	mul.w	r2, r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCC_GetSysClockFreq+0x104>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0e5b      	lsrs	r3, r3, #25
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	3301      	adds	r3, #1
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	fbb2 f3f3 	udiv	r3, r2, r3
 800287c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800287e:	69bb      	ldr	r3, [r7, #24]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3724      	adds	r7, #36	; 0x24
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40021000 	.word	0x40021000
 8002890:	080079e0 	.word	0x080079e0
 8002894:	00f42400 	.word	0x00f42400
 8002898:	007a1200 	.word	0x007a1200

0800289c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000000 	.word	0x20000000

080028b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028b8:	f7ff fff0 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028bc:	4601      	mov	r1, r0
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4a04      	ldr	r2, [pc, #16]	; (80028dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ca:	5cd3      	ldrb	r3, [r2, r3]
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000
 80028dc:	080079d8 	.word	0x080079d8

080028e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028e4:	f7ff ffda 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028e8:	4601      	mov	r1, r0
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	0adb      	lsrs	r3, r3, #11
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	4a04      	ldr	r2, [pc, #16]	; (8002908 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002900:	4618      	mov	r0, r3
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000
 8002908:	080079d8 	.word	0x080079d8

0800290c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002918:	4b2a      	ldr	r3, [pc, #168]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800291a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002924:	f7ff f9ca 	bl	8001cbc <HAL_PWREx_GetVoltageRange>
 8002928:	6178      	str	r0, [r7, #20]
 800292a:	e014      	b.n	8002956 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	4a24      	ldr	r2, [pc, #144]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002936:	6593      	str	r3, [r2, #88]	; 0x58
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002944:	f7ff f9ba 	bl	8001cbc <HAL_PWREx_GetVoltageRange>
 8002948:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800294a:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002954:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800295c:	d10b      	bne.n	8002976 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b80      	cmp	r3, #128	; 0x80
 8002962:	d919      	bls.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2ba0      	cmp	r3, #160	; 0xa0
 8002968:	d902      	bls.n	8002970 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800296a:	2302      	movs	r3, #2
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	e013      	b.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002970:	2301      	movs	r3, #1
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	e010      	b.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d902      	bls.n	8002982 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800297c:	2303      	movs	r3, #3
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	e00a      	b.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b80      	cmp	r3, #128	; 0x80
 8002986:	d102      	bne.n	800298e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002988:	2302      	movs	r3, #2
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	e004      	b.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b70      	cmp	r3, #112	; 0x70
 8002992:	d101      	bne.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002994:	2301      	movs	r3, #1
 8002996:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f023 0207 	bic.w	r2, r3, #7
 80029a0:	4909      	ldr	r1, [pc, #36]	; (80029c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d001      	beq.n	80029ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40022000 	.word	0x40022000

080029cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029d4:	2300      	movs	r3, #0
 80029d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029d8:	2300      	movs	r3, #0
 80029da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d02f      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029f0:	d005      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x32>
 80029f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029f6:	d015      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x40>
 80029fc:	e00f      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80029fe:	4bac      	ldr	r3, [pc, #688]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	4aab      	ldr	r2, [pc, #684]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a08:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a0a:	e00c      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f9dc 	bl	8002dd0 <RCCEx_PLLSAI1_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a1c:	e003      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	74fb      	strb	r3, [r7, #19]
      break;
 8002a22:	e000      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002a24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10b      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a2c:	4ba0      	ldr	r3, [pc, #640]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3a:	499d      	ldr	r1, [pc, #628]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a42:	e001      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a44:	7cfb      	ldrb	r3, [r7, #19]
 8002a46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 8099 	beq.w	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a56:	2300      	movs	r3, #0
 8002a58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a5a:	4b95      	ldr	r3, [pc, #596]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00d      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a70:	4b8f      	ldr	r3, [pc, #572]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	4a8e      	ldr	r2, [pc, #568]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a7c:	4b8c      	ldr	r3, [pc, #560]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a8c:	4b89      	ldr	r3, [pc, #548]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a88      	ldr	r2, [pc, #544]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a98:	f7fe fe20 	bl	80016dc <HAL_GetTick>
 8002a9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a9e:	e009      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa0:	f7fe fe1c 	bl	80016dc <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d902      	bls.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	74fb      	strb	r3, [r7, #19]
        break;
 8002ab2:	e005      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ab4:	4b7f      	ldr	r3, [pc, #508]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0ef      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d155      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ac6:	4b7a      	ldr	r3, [pc, #488]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d01e      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d019      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ae2:	4b73      	ldr	r3, [pc, #460]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aee:	4b70      	ldr	r3, [pc, #448]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af4:	4a6e      	ldr	r2, [pc, #440]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002afe:	4b6c      	ldr	r3, [pc, #432]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b04:	4a6a      	ldr	r2, [pc, #424]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b0e:	4a68      	ldr	r2, [pc, #416]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d016      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe fddc 	bl	80016dc <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b26:	e00b      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b28:	f7fe fdd8 	bl	80016dc <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d902      	bls.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	74fb      	strb	r3, [r7, #19]
            break;
 8002b3e:	e006      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b40:	4b5b      	ldr	r3, [pc, #364]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0ec      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002b4e:	7cfb      	ldrb	r3, [r7, #19]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10b      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b54:	4b56      	ldr	r3, [pc, #344]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b62:	4953      	ldr	r1, [pc, #332]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b6a:	e004      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b6c:	7cfb      	ldrb	r3, [r7, #19]
 8002b6e:	74bb      	strb	r3, [r7, #18]
 8002b70:	e001      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b72:	7cfb      	ldrb	r3, [r7, #19]
 8002b74:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b76:	7c7b      	ldrb	r3, [r7, #17]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d105      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b7c:	4b4c      	ldr	r3, [pc, #304]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b80:	4a4b      	ldr	r2, [pc, #300]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b94:	4b46      	ldr	r3, [pc, #280]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	f023 0203 	bic.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4943      	ldr	r1, [pc, #268]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bb6:	4b3e      	ldr	r3, [pc, #248]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbc:	f023 020c 	bic.w	r2, r3, #12
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	493a      	ldr	r1, [pc, #232]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bd8:	4b35      	ldr	r3, [pc, #212]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	4932      	ldr	r1, [pc, #200]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bfa:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c08:	4929      	ldr	r1, [pc, #164]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c1c:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	4921      	ldr	r1, [pc, #132]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	4918      	ldr	r1, [pc, #96]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c60:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4910      	ldr	r1, [pc, #64]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d02c      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c82:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	4907      	ldr	r1, [pc, #28]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca0:	d10a      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca2:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	4a02      	ldr	r2, [pc, #8]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cac:	60d3      	str	r3, [r2, #12]
 8002cae:	e015      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 f881 	bl	8002dd0 <RCCEx_PLLSAI1_Config>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cd2:	7cfb      	ldrb	r3, [r7, #19]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002cd8:	7cfb      	ldrb	r3, [r7, #19]
 8002cda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d028      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ce8:	4b30      	ldr	r3, [pc, #192]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	492d      	ldr	r1, [pc, #180]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d06:	d106      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d08:	4b28      	ldr	r3, [pc, #160]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4a27      	ldr	r2, [pc, #156]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d12:	60d3      	str	r3, [r2, #12]
 8002d14:	e011      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d1e:	d10c      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3304      	adds	r3, #4
 8002d24:	2101      	movs	r1, #1
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f852 	bl	8002dd0 <RCCEx_PLLSAI1_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002d36:	7cfb      	ldrb	r3, [r7, #19]
 8002d38:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01c      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d46:	4b19      	ldr	r3, [pc, #100]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d54:	4915      	ldr	r1, [pc, #84]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 f82f 	bl	8002dd0 <RCCEx_PLLSAI1_Config>
 8002d72:	4603      	mov	r3, r0
 8002d74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002d7c:	7cfb      	ldrb	r3, [r7, #19]
 8002d7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d8c:	4b07      	ldr	r3, [pc, #28]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9a:	4904      	ldr	r1, [pc, #16]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002da2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000

08002db0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002dba:	f043 0304 	orr.w	r3, r3, #4
 8002dbe:	6013      	str	r3, [r2, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dde:	4b73      	ldr	r3, [pc, #460]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d018      	beq.n	8002e1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dea:	4b70      	ldr	r3, [pc, #448]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f003 0203 	and.w	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d10d      	bne.n	8002e16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
       ||
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e02:	4b6a      	ldr	r3, [pc, #424]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
       ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d044      	beq.n	8002ea0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	73fb      	strb	r3, [r7, #15]
 8002e1a:	e041      	b.n	8002ea0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d00c      	beq.n	8002e3e <RCCEx_PLLSAI1_Config+0x6e>
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d013      	beq.n	8002e50 <RCCEx_PLLSAI1_Config+0x80>
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d120      	bne.n	8002e6e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e2c:	4b5f      	ldr	r3, [pc, #380]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d11d      	bne.n	8002e74 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e3c:	e01a      	b.n	8002e74 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e3e:	4b5b      	ldr	r3, [pc, #364]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d116      	bne.n	8002e78 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e4e:	e013      	b.n	8002e78 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e50:	4b56      	ldr	r3, [pc, #344]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10f      	bne.n	8002e7c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e5c:	4b53      	ldr	r3, [pc, #332]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d109      	bne.n	8002e7c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e6c:	e006      	b.n	8002e7c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	73fb      	strb	r3, [r7, #15]
      break;
 8002e72:	e004      	b.n	8002e7e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002e74:	bf00      	nop
 8002e76:	e002      	b.n	8002e7e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002e78:	bf00      	nop
 8002e7a:	e000      	b.n	8002e7e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002e7c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10d      	bne.n	8002ea0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e84:	4b49      	ldr	r3, [pc, #292]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6819      	ldr	r1, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	4944      	ldr	r1, [pc, #272]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d17c      	bne.n	8002fa0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ea6:	4b41      	ldr	r3, [pc, #260]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a40      	ldr	r2, [pc, #256]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002eb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb2:	f7fe fc13 	bl	80016dc <HAL_GetTick>
 8002eb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002eb8:	e009      	b.n	8002ece <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eba:	f7fe fc0f 	bl	80016dc <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d902      	bls.n	8002ece <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	73fb      	strb	r3, [r7, #15]
        break;
 8002ecc:	e005      	b.n	8002eda <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ece:	4b37      	ldr	r3, [pc, #220]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1ef      	bne.n	8002eba <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d15f      	bne.n	8002fa0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d110      	bne.n	8002f08 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ee6:	4b31      	ldr	r3, [pc, #196]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002eee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6892      	ldr	r2, [r2, #8]
 8002ef6:	0211      	lsls	r1, r2, #8
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	68d2      	ldr	r2, [r2, #12]
 8002efc:	06d2      	lsls	r2, r2, #27
 8002efe:	430a      	orrs	r2, r1
 8002f00:	492a      	ldr	r1, [pc, #168]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	610b      	str	r3, [r1, #16]
 8002f06:	e027      	b.n	8002f58 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d112      	bne.n	8002f34 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f0e:	4b27      	ldr	r3, [pc, #156]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6892      	ldr	r2, [r2, #8]
 8002f1e:	0211      	lsls	r1, r2, #8
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6912      	ldr	r2, [r2, #16]
 8002f24:	0852      	lsrs	r2, r2, #1
 8002f26:	3a01      	subs	r2, #1
 8002f28:	0552      	lsls	r2, r2, #21
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	491f      	ldr	r1, [pc, #124]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	610b      	str	r3, [r1, #16]
 8002f32:	e011      	b.n	8002f58 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6892      	ldr	r2, [r2, #8]
 8002f44:	0211      	lsls	r1, r2, #8
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6952      	ldr	r2, [r2, #20]
 8002f4a:	0852      	lsrs	r2, r2, #1
 8002f4c:	3a01      	subs	r2, #1
 8002f4e:	0652      	lsls	r2, r2, #25
 8002f50:	430a      	orrs	r2, r1
 8002f52:	4916      	ldr	r1, [pc, #88]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f58:	4b14      	ldr	r3, [pc, #80]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a13      	ldr	r2, [pc, #76]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7fe fbba 	bl	80016dc <HAL_GetTick>
 8002f68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f6a:	e009      	b.n	8002f80 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f6c:	f7fe fbb6 	bl	80016dc <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d902      	bls.n	8002f80 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f7e:	e005      	b.n	8002f8c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ef      	beq.n	8002f6c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	4904      	ldr	r1, [pc, #16]	; (8002fac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000

08002fb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e040      	b.n	8003044 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fe fa6a 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2224      	movs	r2, #36	; 0x24
 8002fdc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fa7c 	bl	80034ec <UART_SetConfig>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e022      	b.n	8003044 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fc80 	bl	800390c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800301a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800302a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fd07 	bl	8003a50 <UART_CheckIdleState>
 8003042:	4603      	mov	r3, r0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	4613      	mov	r3, r2
 8003058:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305e:	2b20      	cmp	r3, #32
 8003060:	d144      	bne.n	80030ec <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_UART_Transmit_IT+0x22>
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e03d      	b.n	80030ee <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_UART_Transmit_IT+0x34>
 800307c:	2302      	movs	r3, #2
 800307e:	e036      	b.n	80030ee <HAL_UART_Transmit_IT+0xa2>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	88fa      	ldrh	r2, [r7, #6]
 8003092:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	88fa      	ldrh	r2, [r7, #6]
 800309a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2221      	movs	r2, #33	; 0x21
 80030ae:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b8:	d107      	bne.n	80030ca <HAL_UART_Transmit_IT+0x7e>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d103      	bne.n	80030ca <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <HAL_UART_Transmit_IT+0xb0>)
 80030c6:	665a      	str	r2, [r3, #100]	; 0x64
 80030c8:	e002      	b.n	80030d0 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4a0c      	ldr	r2, [pc, #48]	; (8003100 <HAL_UART_Transmit_IT+0xb4>)
 80030ce:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030e6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	e000      	b.n	80030ee <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80030ec:	2302      	movs	r3, #2
  }
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	08003cb1 	.word	0x08003cb1
 8003100:	08003c3d 	.word	0x08003c3d

08003104 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	4613      	mov	r3, r2
 8003110:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003116:	2b20      	cmp	r3, #32
 8003118:	f040 808a 	bne.w	8003230 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_UART_Receive_IT+0x24>
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e082      	b.n	8003232 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_UART_Receive_IT+0x36>
 8003136:	2302      	movs	r3, #2
 8003138:	e07b      	b.n	8003232 <HAL_UART_Receive_IT+0x12e>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	88fa      	ldrh	r2, [r7, #6]
 800314c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003166:	d10e      	bne.n	8003186 <HAL_UART_Receive_IT+0x82>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d105      	bne.n	800317c <HAL_UART_Receive_IT+0x78>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003176:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800317a:	e02d      	b.n	80031d8 <HAL_UART_Receive_IT+0xd4>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	22ff      	movs	r2, #255	; 0xff
 8003180:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003184:	e028      	b.n	80031d8 <HAL_UART_Receive_IT+0xd4>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10d      	bne.n	80031aa <HAL_UART_Receive_IT+0xa6>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d104      	bne.n	80031a0 <HAL_UART_Receive_IT+0x9c>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	22ff      	movs	r2, #255	; 0xff
 800319a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800319e:	e01b      	b.n	80031d8 <HAL_UART_Receive_IT+0xd4>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	227f      	movs	r2, #127	; 0x7f
 80031a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031a8:	e016      	b.n	80031d8 <HAL_UART_Receive_IT+0xd4>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031b2:	d10d      	bne.n	80031d0 <HAL_UART_Receive_IT+0xcc>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <HAL_UART_Receive_IT+0xc2>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	227f      	movs	r2, #127	; 0x7f
 80031c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031c4:	e008      	b.n	80031d8 <HAL_UART_Receive_IT+0xd4>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	223f      	movs	r2, #63	; 0x3f
 80031ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031ce:	e003      	b.n	80031d8 <HAL_UART_Receive_IT+0xd4>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2222      	movs	r2, #34	; 0x22
 80031e2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fc:	d107      	bne.n	800320e <HAL_UART_Receive_IT+0x10a>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d103      	bne.n	800320e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4a0d      	ldr	r2, [pc, #52]	; (8003240 <HAL_UART_Receive_IT+0x13c>)
 800320a:	661a      	str	r2, [r3, #96]	; 0x60
 800320c:	e002      	b.n	8003214 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <HAL_UART_Receive_IT+0x140>)
 8003212:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800322a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	e000      	b.n	8003232 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
  }
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	08003e09 	.word	0x08003e09
 8003244:	08003d5f 	.word	0x08003d5f

08003248 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	f640 030f 	movw	r3, #2063	; 0x80f
 800326e:	4013      	ands	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d113      	bne.n	80032a0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00e      	beq.n	80032a0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 8114 	beq.w	80034be <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
      }
      return;
 800329e:	e10e      	b.n	80034be <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80d6 	beq.w	8003454 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4b86      	ldr	r3, [pc, #536]	; (80034d0 <HAL_UART_IRQHandler+0x288>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80cb 	beq.w	8003454 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00e      	beq.n	80032e6 <HAL_UART_IRQHandler+0x9e>
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2201      	movs	r2, #1
 80032d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00e      	beq.n	800330e <HAL_UART_IRQHandler+0xc6>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2202      	movs	r2, #2
 8003300:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003306:	f043 0204 	orr.w	r2, r3, #4
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00e      	beq.n	8003336 <HAL_UART_IRQHandler+0xee>
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2204      	movs	r2, #4
 8003328:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800332e:	f043 0202 	orr.w	r2, r3, #2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d013      	beq.n	8003368 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003350:	2b00      	cmp	r3, #0
 8003352:	d009      	beq.n	8003368 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2208      	movs	r2, #8
 800335a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003360:	f043 0208 	orr.w	r2, r3, #8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00f      	beq.n	8003392 <HAL_UART_IRQHandler+0x14a>
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003384:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800338a:	f043 0220 	orr.w	r2, r3, #32
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8093 	beq.w	80034c2 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00c      	beq.n	80033c0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d007      	beq.n	80033c0 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	d004      	beq.n	80033de <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d031      	beq.n	8003442 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fbf6 	bl	8003bd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ee:	2b40      	cmp	r3, #64	; 0x40
 80033f0:	d123      	bne.n	800343a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003400:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003406:	2b00      	cmp	r3, #0
 8003408:	d013      	beq.n	8003432 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800340e:	4a31      	ldr	r2, [pc, #196]	; (80034d4 <HAL_UART_IRQHandler+0x28c>)
 8003410:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fa7d 	bl	8001916 <HAL_DMA_Abort_IT>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d016      	beq.n	8003450 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800342c:	4610      	mov	r0, r2
 800342e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003430:	e00e      	b.n	8003450 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f850 	bl	80034d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003438:	e00a      	b.n	8003450 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f84c 	bl	80034d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003440:	e006      	b.n	8003450 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f848 	bl	80034d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800344e:	e038      	b.n	80034c2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003450:	bf00      	nop
    return;
 8003452:	e036      	b.n	80034c2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00d      	beq.n	800347a <HAL_UART_IRQHandler+0x232>
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003470:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fd1d 	bl	8003eb2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003478:	e026      	b.n	80034c8 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00d      	beq.n	80034a0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348a:	2b00      	cmp	r3, #0
 800348c:	d008      	beq.n	80034a0 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003492:	2b00      	cmp	r3, #0
 8003494:	d017      	beq.n	80034c6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
    }
    return;
 800349e:	e012      	b.n	80034c6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00e      	beq.n	80034c8 <HAL_UART_IRQHandler+0x280>
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d009      	beq.n	80034c8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fc39 	bl	8003d2c <UART_EndTransmit_IT>
    return;
 80034ba:	bf00      	nop
 80034bc:	e004      	b.n	80034c8 <HAL_UART_IRQHandler+0x280>
      return;
 80034be:	bf00      	nop
 80034c0:	e002      	b.n	80034c8 <HAL_UART_IRQHandler+0x280>
    return;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <HAL_UART_IRQHandler+0x280>
    return;
 80034c6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	04000120 	.word	0x04000120
 80034d4:	08003c11 	.word	0x08003c11

080034d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034ec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80034f0:	b088      	sub	sp, #32
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	4313      	orrs	r3, r2
 8003510:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4bb0      	ldr	r3, [pc, #704]	; (80037dc <UART_SetConfig+0x2f0>)
 800351a:	4013      	ands	r3, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	69f9      	ldr	r1, [r7, #28]
 8003522:	430b      	orrs	r3, r1
 8003524:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4aa6      	ldr	r2, [pc, #664]	; (80037e0 <UART_SetConfig+0x2f4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d004      	beq.n	8003556 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	4313      	orrs	r3, r2
 8003554:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	430a      	orrs	r2, r1
 8003568:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a9d      	ldr	r2, [pc, #628]	; (80037e4 <UART_SetConfig+0x2f8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d121      	bne.n	80035b8 <UART_SetConfig+0xcc>
 8003574:	4b9c      	ldr	r3, [pc, #624]	; (80037e8 <UART_SetConfig+0x2fc>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b03      	cmp	r3, #3
 8003580:	d816      	bhi.n	80035b0 <UART_SetConfig+0xc4>
 8003582:	a201      	add	r2, pc, #4	; (adr r2, 8003588 <UART_SetConfig+0x9c>)
 8003584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003588:	08003599 	.word	0x08003599
 800358c:	080035a5 	.word	0x080035a5
 8003590:	0800359f 	.word	0x0800359f
 8003594:	080035ab 	.word	0x080035ab
 8003598:	2301      	movs	r3, #1
 800359a:	76fb      	strb	r3, [r7, #27]
 800359c:	e072      	b.n	8003684 <UART_SetConfig+0x198>
 800359e:	2302      	movs	r3, #2
 80035a0:	76fb      	strb	r3, [r7, #27]
 80035a2:	e06f      	b.n	8003684 <UART_SetConfig+0x198>
 80035a4:	2304      	movs	r3, #4
 80035a6:	76fb      	strb	r3, [r7, #27]
 80035a8:	e06c      	b.n	8003684 <UART_SetConfig+0x198>
 80035aa:	2308      	movs	r3, #8
 80035ac:	76fb      	strb	r3, [r7, #27]
 80035ae:	e069      	b.n	8003684 <UART_SetConfig+0x198>
 80035b0:	2310      	movs	r3, #16
 80035b2:	76fb      	strb	r3, [r7, #27]
 80035b4:	bf00      	nop
 80035b6:	e065      	b.n	8003684 <UART_SetConfig+0x198>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a8b      	ldr	r2, [pc, #556]	; (80037ec <UART_SetConfig+0x300>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d134      	bne.n	800362c <UART_SetConfig+0x140>
 80035c2:	4b89      	ldr	r3, [pc, #548]	; (80037e8 <UART_SetConfig+0x2fc>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b0c      	cmp	r3, #12
 80035ce:	d829      	bhi.n	8003624 <UART_SetConfig+0x138>
 80035d0:	a201      	add	r2, pc, #4	; (adr r2, 80035d8 <UART_SetConfig+0xec>)
 80035d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d6:	bf00      	nop
 80035d8:	0800360d 	.word	0x0800360d
 80035dc:	08003625 	.word	0x08003625
 80035e0:	08003625 	.word	0x08003625
 80035e4:	08003625 	.word	0x08003625
 80035e8:	08003619 	.word	0x08003619
 80035ec:	08003625 	.word	0x08003625
 80035f0:	08003625 	.word	0x08003625
 80035f4:	08003625 	.word	0x08003625
 80035f8:	08003613 	.word	0x08003613
 80035fc:	08003625 	.word	0x08003625
 8003600:	08003625 	.word	0x08003625
 8003604:	08003625 	.word	0x08003625
 8003608:	0800361f 	.word	0x0800361f
 800360c:	2300      	movs	r3, #0
 800360e:	76fb      	strb	r3, [r7, #27]
 8003610:	e038      	b.n	8003684 <UART_SetConfig+0x198>
 8003612:	2302      	movs	r3, #2
 8003614:	76fb      	strb	r3, [r7, #27]
 8003616:	e035      	b.n	8003684 <UART_SetConfig+0x198>
 8003618:	2304      	movs	r3, #4
 800361a:	76fb      	strb	r3, [r7, #27]
 800361c:	e032      	b.n	8003684 <UART_SetConfig+0x198>
 800361e:	2308      	movs	r3, #8
 8003620:	76fb      	strb	r3, [r7, #27]
 8003622:	e02f      	b.n	8003684 <UART_SetConfig+0x198>
 8003624:	2310      	movs	r3, #16
 8003626:	76fb      	strb	r3, [r7, #27]
 8003628:	bf00      	nop
 800362a:	e02b      	b.n	8003684 <UART_SetConfig+0x198>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a6b      	ldr	r2, [pc, #428]	; (80037e0 <UART_SetConfig+0x2f4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d124      	bne.n	8003680 <UART_SetConfig+0x194>
 8003636:	4b6c      	ldr	r3, [pc, #432]	; (80037e8 <UART_SetConfig+0x2fc>)
 8003638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003644:	d012      	beq.n	800366c <UART_SetConfig+0x180>
 8003646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364a:	d802      	bhi.n	8003652 <UART_SetConfig+0x166>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <UART_SetConfig+0x174>
 8003650:	e012      	b.n	8003678 <UART_SetConfig+0x18c>
 8003652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003656:	d006      	beq.n	8003666 <UART_SetConfig+0x17a>
 8003658:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800365c:	d009      	beq.n	8003672 <UART_SetConfig+0x186>
 800365e:	e00b      	b.n	8003678 <UART_SetConfig+0x18c>
 8003660:	2300      	movs	r3, #0
 8003662:	76fb      	strb	r3, [r7, #27]
 8003664:	e00e      	b.n	8003684 <UART_SetConfig+0x198>
 8003666:	2302      	movs	r3, #2
 8003668:	76fb      	strb	r3, [r7, #27]
 800366a:	e00b      	b.n	8003684 <UART_SetConfig+0x198>
 800366c:	2304      	movs	r3, #4
 800366e:	76fb      	strb	r3, [r7, #27]
 8003670:	e008      	b.n	8003684 <UART_SetConfig+0x198>
 8003672:	2308      	movs	r3, #8
 8003674:	76fb      	strb	r3, [r7, #27]
 8003676:	e005      	b.n	8003684 <UART_SetConfig+0x198>
 8003678:	2310      	movs	r3, #16
 800367a:	76fb      	strb	r3, [r7, #27]
 800367c:	bf00      	nop
 800367e:	e001      	b.n	8003684 <UART_SetConfig+0x198>
 8003680:	2310      	movs	r3, #16
 8003682:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a55      	ldr	r2, [pc, #340]	; (80037e0 <UART_SetConfig+0x2f4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d174      	bne.n	8003778 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800368e:	7efb      	ldrb	r3, [r7, #27]
 8003690:	2b08      	cmp	r3, #8
 8003692:	d824      	bhi.n	80036de <UART_SetConfig+0x1f2>
 8003694:	a201      	add	r2, pc, #4	; (adr r2, 800369c <UART_SetConfig+0x1b0>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036c1 	.word	0x080036c1
 80036a0:	080036df 	.word	0x080036df
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	080036df 	.word	0x080036df
 80036ac:	080036cf 	.word	0x080036cf
 80036b0:	080036df 	.word	0x080036df
 80036b4:	080036df 	.word	0x080036df
 80036b8:	080036df 	.word	0x080036df
 80036bc:	080036d7 	.word	0x080036d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c0:	f7ff f8f8 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 80036c4:	6178      	str	r0, [r7, #20]
        break;
 80036c6:	e00f      	b.n	80036e8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036c8:	4b49      	ldr	r3, [pc, #292]	; (80037f0 <UART_SetConfig+0x304>)
 80036ca:	617b      	str	r3, [r7, #20]
        break;
 80036cc:	e00c      	b.n	80036e8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ce:	f7ff f85b 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 80036d2:	6178      	str	r0, [r7, #20]
        break;
 80036d4:	e008      	b.n	80036e8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036da:	617b      	str	r3, [r7, #20]
        break;
 80036dc:	e004      	b.n	80036e8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	76bb      	strb	r3, [r7, #26]
        break;
 80036e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8100 	beq.w	80038f0 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d305      	bcc.n	800370c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	d902      	bls.n	8003712 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	76bb      	strb	r3, [r7, #26]
 8003710:	e0ee      	b.n	80038f0 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	4619      	mov	r1, r3
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	f04f 0400 	mov.w	r4, #0
 8003722:	0214      	lsls	r4, r2, #8
 8003724:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003728:	020b      	lsls	r3, r1, #8
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6852      	ldr	r2, [r2, #4]
 800372e:	0852      	lsrs	r2, r2, #1
 8003730:	4611      	mov	r1, r2
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	eb13 0b01 	adds.w	fp, r3, r1
 800373a:	eb44 0c02 	adc.w	ip, r4, r2
 800373e:	4658      	mov	r0, fp
 8003740:	4661      	mov	r1, ip
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f04f 0400 	mov.w	r4, #0
 800374a:	461a      	mov	r2, r3
 800374c:	4623      	mov	r3, r4
 800374e:	f7fd fa9b 	bl	8000c88 <__aeabi_uldivmod>
 8003752:	4603      	mov	r3, r0
 8003754:	460c      	mov	r4, r1
 8003756:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800375e:	d308      	bcc.n	8003772 <UART_SetConfig+0x286>
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003766:	d204      	bcs.n	8003772 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	60da      	str	r2, [r3, #12]
 8003770:	e0be      	b.n	80038f0 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	76bb      	strb	r3, [r7, #26]
 8003776:	e0bb      	b.n	80038f0 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003780:	d169      	bne.n	8003856 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 8003782:	7efb      	ldrb	r3, [r7, #27]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d835      	bhi.n	80037f4 <UART_SetConfig+0x308>
 8003788:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <UART_SetConfig+0x2a4>)
 800378a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378e:	bf00      	nop
 8003790:	080037b5 	.word	0x080037b5
 8003794:	080037bd 	.word	0x080037bd
 8003798:	080037c5 	.word	0x080037c5
 800379c:	080037f5 	.word	0x080037f5
 80037a0:	080037cb 	.word	0x080037cb
 80037a4:	080037f5 	.word	0x080037f5
 80037a8:	080037f5 	.word	0x080037f5
 80037ac:	080037f5 	.word	0x080037f5
 80037b0:	080037d3 	.word	0x080037d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037b4:	f7ff f87e 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 80037b8:	6178      	str	r0, [r7, #20]
        break;
 80037ba:	e020      	b.n	80037fe <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037bc:	f7ff f890 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 80037c0:	6178      	str	r0, [r7, #20]
        break;
 80037c2:	e01c      	b.n	80037fe <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c4:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <UART_SetConfig+0x304>)
 80037c6:	617b      	str	r3, [r7, #20]
        break;
 80037c8:	e019      	b.n	80037fe <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ca:	f7fe ffdd 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 80037ce:	6178      	str	r0, [r7, #20]
        break;
 80037d0:	e015      	b.n	80037fe <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d6:	617b      	str	r3, [r7, #20]
        break;
 80037d8:	e011      	b.n	80037fe <UART_SetConfig+0x312>
 80037da:	bf00      	nop
 80037dc:	efff69f3 	.word	0xefff69f3
 80037e0:	40008000 	.word	0x40008000
 80037e4:	40013800 	.word	0x40013800
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40004400 	.word	0x40004400
 80037f0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	76bb      	strb	r3, [r7, #26]
        break;
 80037fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d075      	beq.n	80038f0 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	005a      	lsls	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	085b      	lsrs	r3, r3, #1
 800380e:	441a      	add	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	b29b      	uxth	r3, r3
 800381a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2b0f      	cmp	r3, #15
 8003820:	d916      	bls.n	8003850 <UART_SetConfig+0x364>
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003828:	d212      	bcs.n	8003850 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	b29b      	uxth	r3, r3
 800382e:	f023 030f 	bic.w	r3, r3, #15
 8003832:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	b29b      	uxth	r3, r3
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	b29a      	uxth	r2, r3
 8003840:	89fb      	ldrh	r3, [r7, #14]
 8003842:	4313      	orrs	r3, r2
 8003844:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	89fa      	ldrh	r2, [r7, #14]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	e04f      	b.n	80038f0 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	76bb      	strb	r3, [r7, #26]
 8003854:	e04c      	b.n	80038f0 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003856:	7efb      	ldrb	r3, [r7, #27]
 8003858:	2b08      	cmp	r3, #8
 800385a:	d828      	bhi.n	80038ae <UART_SetConfig+0x3c2>
 800385c:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <UART_SetConfig+0x378>)
 800385e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003862:	bf00      	nop
 8003864:	08003889 	.word	0x08003889
 8003868:	08003891 	.word	0x08003891
 800386c:	08003899 	.word	0x08003899
 8003870:	080038af 	.word	0x080038af
 8003874:	0800389f 	.word	0x0800389f
 8003878:	080038af 	.word	0x080038af
 800387c:	080038af 	.word	0x080038af
 8003880:	080038af 	.word	0x080038af
 8003884:	080038a7 	.word	0x080038a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003888:	f7ff f814 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 800388c:	6178      	str	r0, [r7, #20]
        break;
 800388e:	e013      	b.n	80038b8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003890:	f7ff f826 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8003894:	6178      	str	r0, [r7, #20]
        break;
 8003896:	e00f      	b.n	80038b8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003898:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <UART_SetConfig+0x41c>)
 800389a:	617b      	str	r3, [r7, #20]
        break;
 800389c:	e00c      	b.n	80038b8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800389e:	f7fe ff73 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 80038a2:	6178      	str	r0, [r7, #20]
        break;
 80038a4:	e008      	b.n	80038b8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038aa:	617b      	str	r3, [r7, #20]
        break;
 80038ac:	e004      	b.n	80038b8 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	76bb      	strb	r3, [r7, #26]
        break;
 80038b6:	bf00      	nop
    }

    if (pclk != 0U)
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d018      	beq.n	80038f0 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	085a      	lsrs	r2, r3, #1
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	441a      	add	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	2b0f      	cmp	r3, #15
 80038d8:	d908      	bls.n	80038ec <UART_SetConfig+0x400>
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e0:	d204      	bcs.n	80038ec <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	e001      	b.n	80038f0 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80038fc:	7ebb      	ldrb	r3, [r7, #26]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3720      	adds	r7, #32
 8003902:	46bd      	mov	sp, r7
 8003904:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003908:	00f42400 	.word	0x00f42400

0800390c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01a      	beq.n	8003a22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a0a:	d10a      	bne.n	8003a22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	605a      	str	r2, [r3, #4]
  }
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003a5e:	f7fd fe3d 	bl	80016dc <HAL_GetTick>
 8003a62:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d10e      	bne.n	8003a90 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f82a 	bl	8003ada <UART_WaitOnFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e020      	b.n	8003ad2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d10e      	bne.n	8003abc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f814 	bl	8003ada <UART_WaitOnFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e00a      	b.n	8003ad2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aea:	e05d      	b.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	d059      	beq.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af4:	f7fd fdf2 	bl	80016dc <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d302      	bcc.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d11b      	bne.n	8003b42 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b18:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2220      	movs	r2, #32
 8003b34:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e042      	b.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d02b      	beq.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b5e:	d123      	bne.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b78:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0201 	bic.w	r2, r2, #1
 8003b88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e00f      	b.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	69da      	ldr	r2, [r3, #28]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	bf0c      	ite	eq
 8003bb8:	2301      	moveq	r3, #1
 8003bba:	2300      	movne	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	79fb      	ldrb	r3, [r7, #7]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d092      	beq.n	8003aec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003be6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f7ff fc52 	bl	80034d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c34:	bf00      	nop
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c48:	2b21      	cmp	r3, #33	; 0x21
 8003c4a:	d12b      	bne.n	8003ca4 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d110      	bne.n	8003c7a <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c66:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c76:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003c78:	e014      	b.n	8003ca4 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7e:	781a      	ldrb	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	b292      	uxth	r2, r2
 8003c86:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cbc:	2b21      	cmp	r3, #33	; 0x21
 8003cbe:	d12f      	bne.n	8003d20 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d110      	bne.n	8003cee <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cda:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cea:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003cec:	e018      	b.n	8003d20 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf2:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	881a      	ldrh	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d00:	b292      	uxth	r2, r2
 8003d02:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d08:	1c9a      	adds	r2, r3, #2
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003d20:	bf00      	nop
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d42:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7fd fa0b 	bl	800116c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d6c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d72:	2b22      	cmp	r3, #34	; 0x22
 8003d74:	d13a      	bne.n	8003dec <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d7c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d7e:	89bb      	ldrh	r3, [r7, #12]
 8003d80:	b2d9      	uxtb	r1, r3
 8003d82:	89fb      	ldrh	r3, [r7, #14]
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	400a      	ands	r2, r1
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d123      	bne.n	8003e00 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003dc6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7fd f9f1 	bl	80011cc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dea:	e009      	b.n	8003e00 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	8b1b      	ldrh	r3, [r3, #24]
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0208 	orr.w	r2, r2, #8
 8003dfc:	b292      	uxth	r2, r2
 8003dfe:	831a      	strh	r2, [r3, #24]
}
 8003e00:	bf00      	nop
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e16:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e1c:	2b22      	cmp	r3, #34	; 0x22
 8003e1e:	d13a      	bne.n	8003e96 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e26:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e2e:	89ba      	ldrh	r2, [r7, #12]
 8003e30:	89fb      	ldrh	r3, [r7, #14]
 8003e32:	4013      	ands	r3, r2
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3e:	1c9a      	adds	r2, r3, #2
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d123      	bne.n	8003eaa <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e70:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0201 	bic.w	r2, r2, #1
 8003e80:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fd f99c 	bl	80011cc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e94:	e009      	b.n	8003eaa <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	8b1b      	ldrh	r3, [r3, #24]
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0208 	orr.w	r2, r2, #8
 8003ea6:	b292      	uxth	r2, r2
 8003ea8:	831a      	strh	r2, [r3, #24]
}
 8003eaa:	bf00      	nop
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <__errno>:
 8003ec8:	4b01      	ldr	r3, [pc, #4]	; (8003ed0 <__errno+0x8>)
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	2000000c 	.word	0x2000000c

08003ed4 <__libc_init_array>:
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	4e0d      	ldr	r6, [pc, #52]	; (8003f0c <__libc_init_array+0x38>)
 8003ed8:	4c0d      	ldr	r4, [pc, #52]	; (8003f10 <__libc_init_array+0x3c>)
 8003eda:	1ba4      	subs	r4, r4, r6
 8003edc:	10a4      	asrs	r4, r4, #2
 8003ede:	2500      	movs	r5, #0
 8003ee0:	42a5      	cmp	r5, r4
 8003ee2:	d109      	bne.n	8003ef8 <__libc_init_array+0x24>
 8003ee4:	4e0b      	ldr	r6, [pc, #44]	; (8003f14 <__libc_init_array+0x40>)
 8003ee6:	4c0c      	ldr	r4, [pc, #48]	; (8003f18 <__libc_init_array+0x44>)
 8003ee8:	f003 fd58 	bl	800799c <_init>
 8003eec:	1ba4      	subs	r4, r4, r6
 8003eee:	10a4      	asrs	r4, r4, #2
 8003ef0:	2500      	movs	r5, #0
 8003ef2:	42a5      	cmp	r5, r4
 8003ef4:	d105      	bne.n	8003f02 <__libc_init_array+0x2e>
 8003ef6:	bd70      	pop	{r4, r5, r6, pc}
 8003ef8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003efc:	4798      	blx	r3
 8003efe:	3501      	adds	r5, #1
 8003f00:	e7ee      	b.n	8003ee0 <__libc_init_array+0xc>
 8003f02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f06:	4798      	blx	r3
 8003f08:	3501      	adds	r5, #1
 8003f0a:	e7f2      	b.n	8003ef2 <__libc_init_array+0x1e>
 8003f0c:	08007cd0 	.word	0x08007cd0
 8003f10:	08007cd0 	.word	0x08007cd0
 8003f14:	08007cd0 	.word	0x08007cd0
 8003f18:	08007cd4 	.word	0x08007cd4

08003f1c <memset>:
 8003f1c:	4402      	add	r2, r0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d100      	bne.n	8003f26 <memset+0xa>
 8003f24:	4770      	bx	lr
 8003f26:	f803 1b01 	strb.w	r1, [r3], #1
 8003f2a:	e7f9      	b.n	8003f20 <memset+0x4>

08003f2c <__cvt>:
 8003f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f30:	ec55 4b10 	vmov	r4, r5, d0
 8003f34:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003f36:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003f3a:	2d00      	cmp	r5, #0
 8003f3c:	460e      	mov	r6, r1
 8003f3e:	4691      	mov	r9, r2
 8003f40:	4619      	mov	r1, r3
 8003f42:	bfb8      	it	lt
 8003f44:	4622      	movlt	r2, r4
 8003f46:	462b      	mov	r3, r5
 8003f48:	f027 0720 	bic.w	r7, r7, #32
 8003f4c:	bfbb      	ittet	lt
 8003f4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003f52:	461d      	movlt	r5, r3
 8003f54:	2300      	movge	r3, #0
 8003f56:	232d      	movlt	r3, #45	; 0x2d
 8003f58:	bfb8      	it	lt
 8003f5a:	4614      	movlt	r4, r2
 8003f5c:	2f46      	cmp	r7, #70	; 0x46
 8003f5e:	700b      	strb	r3, [r1, #0]
 8003f60:	d004      	beq.n	8003f6c <__cvt+0x40>
 8003f62:	2f45      	cmp	r7, #69	; 0x45
 8003f64:	d100      	bne.n	8003f68 <__cvt+0x3c>
 8003f66:	3601      	adds	r6, #1
 8003f68:	2102      	movs	r1, #2
 8003f6a:	e000      	b.n	8003f6e <__cvt+0x42>
 8003f6c:	2103      	movs	r1, #3
 8003f6e:	ab03      	add	r3, sp, #12
 8003f70:	9301      	str	r3, [sp, #4]
 8003f72:	ab02      	add	r3, sp, #8
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	4632      	mov	r2, r6
 8003f78:	4653      	mov	r3, sl
 8003f7a:	ec45 4b10 	vmov	d0, r4, r5
 8003f7e:	f001 fd77 	bl	8005a70 <_dtoa_r>
 8003f82:	2f47      	cmp	r7, #71	; 0x47
 8003f84:	4680      	mov	r8, r0
 8003f86:	d102      	bne.n	8003f8e <__cvt+0x62>
 8003f88:	f019 0f01 	tst.w	r9, #1
 8003f8c:	d026      	beq.n	8003fdc <__cvt+0xb0>
 8003f8e:	2f46      	cmp	r7, #70	; 0x46
 8003f90:	eb08 0906 	add.w	r9, r8, r6
 8003f94:	d111      	bne.n	8003fba <__cvt+0x8e>
 8003f96:	f898 3000 	ldrb.w	r3, [r8]
 8003f9a:	2b30      	cmp	r3, #48	; 0x30
 8003f9c:	d10a      	bne.n	8003fb4 <__cvt+0x88>
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	f7fc fd8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8003faa:	b918      	cbnz	r0, 8003fb4 <__cvt+0x88>
 8003fac:	f1c6 0601 	rsb	r6, r6, #1
 8003fb0:	f8ca 6000 	str.w	r6, [sl]
 8003fb4:	f8da 3000 	ldr.w	r3, [sl]
 8003fb8:	4499      	add	r9, r3
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	f7fc fd81 	bl	8000ac8 <__aeabi_dcmpeq>
 8003fc6:	b938      	cbnz	r0, 8003fd8 <__cvt+0xac>
 8003fc8:	2230      	movs	r2, #48	; 0x30
 8003fca:	9b03      	ldr	r3, [sp, #12]
 8003fcc:	454b      	cmp	r3, r9
 8003fce:	d205      	bcs.n	8003fdc <__cvt+0xb0>
 8003fd0:	1c59      	adds	r1, r3, #1
 8003fd2:	9103      	str	r1, [sp, #12]
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	e7f8      	b.n	8003fca <__cvt+0x9e>
 8003fd8:	f8cd 900c 	str.w	r9, [sp, #12]
 8003fdc:	9b03      	ldr	r3, [sp, #12]
 8003fde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fe0:	eba3 0308 	sub.w	r3, r3, r8
 8003fe4:	4640      	mov	r0, r8
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	b004      	add	sp, #16
 8003fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003fee <__exponent>:
 8003fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ff0:	2900      	cmp	r1, #0
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	bfba      	itte	lt
 8003ff6:	4249      	neglt	r1, r1
 8003ff8:	232d      	movlt	r3, #45	; 0x2d
 8003ffa:	232b      	movge	r3, #43	; 0x2b
 8003ffc:	2909      	cmp	r1, #9
 8003ffe:	f804 2b02 	strb.w	r2, [r4], #2
 8004002:	7043      	strb	r3, [r0, #1]
 8004004:	dd20      	ble.n	8004048 <__exponent+0x5a>
 8004006:	f10d 0307 	add.w	r3, sp, #7
 800400a:	461f      	mov	r7, r3
 800400c:	260a      	movs	r6, #10
 800400e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004012:	fb06 1115 	mls	r1, r6, r5, r1
 8004016:	3130      	adds	r1, #48	; 0x30
 8004018:	2d09      	cmp	r5, #9
 800401a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800401e:	f103 32ff 	add.w	r2, r3, #4294967295
 8004022:	4629      	mov	r1, r5
 8004024:	dc09      	bgt.n	800403a <__exponent+0x4c>
 8004026:	3130      	adds	r1, #48	; 0x30
 8004028:	3b02      	subs	r3, #2
 800402a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800402e:	42bb      	cmp	r3, r7
 8004030:	4622      	mov	r2, r4
 8004032:	d304      	bcc.n	800403e <__exponent+0x50>
 8004034:	1a10      	subs	r0, r2, r0
 8004036:	b003      	add	sp, #12
 8004038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800403a:	4613      	mov	r3, r2
 800403c:	e7e7      	b.n	800400e <__exponent+0x20>
 800403e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004042:	f804 2b01 	strb.w	r2, [r4], #1
 8004046:	e7f2      	b.n	800402e <__exponent+0x40>
 8004048:	2330      	movs	r3, #48	; 0x30
 800404a:	4419      	add	r1, r3
 800404c:	7083      	strb	r3, [r0, #2]
 800404e:	1d02      	adds	r2, r0, #4
 8004050:	70c1      	strb	r1, [r0, #3]
 8004052:	e7ef      	b.n	8004034 <__exponent+0x46>

08004054 <_printf_float>:
 8004054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004058:	b08d      	sub	sp, #52	; 0x34
 800405a:	460c      	mov	r4, r1
 800405c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004060:	4616      	mov	r6, r2
 8004062:	461f      	mov	r7, r3
 8004064:	4605      	mov	r5, r0
 8004066:	f002 fde7 	bl	8006c38 <_localeconv_r>
 800406a:	6803      	ldr	r3, [r0, #0]
 800406c:	9304      	str	r3, [sp, #16]
 800406e:	4618      	mov	r0, r3
 8004070:	f7fc f8ae 	bl	80001d0 <strlen>
 8004074:	2300      	movs	r3, #0
 8004076:	930a      	str	r3, [sp, #40]	; 0x28
 8004078:	f8d8 3000 	ldr.w	r3, [r8]
 800407c:	9005      	str	r0, [sp, #20]
 800407e:	3307      	adds	r3, #7
 8004080:	f023 0307 	bic.w	r3, r3, #7
 8004084:	f103 0208 	add.w	r2, r3, #8
 8004088:	f894 a018 	ldrb.w	sl, [r4, #24]
 800408c:	f8d4 b000 	ldr.w	fp, [r4]
 8004090:	f8c8 2000 	str.w	r2, [r8]
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800409c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80040a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80040a4:	9307      	str	r3, [sp, #28]
 80040a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80040aa:	f04f 32ff 	mov.w	r2, #4294967295
 80040ae:	4ba7      	ldr	r3, [pc, #668]	; (800434c <_printf_float+0x2f8>)
 80040b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040b4:	f7fc fd3a 	bl	8000b2c <__aeabi_dcmpun>
 80040b8:	bb70      	cbnz	r0, 8004118 <_printf_float+0xc4>
 80040ba:	f04f 32ff 	mov.w	r2, #4294967295
 80040be:	4ba3      	ldr	r3, [pc, #652]	; (800434c <_printf_float+0x2f8>)
 80040c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040c4:	f7fc fd14 	bl	8000af0 <__aeabi_dcmple>
 80040c8:	bb30      	cbnz	r0, 8004118 <_printf_float+0xc4>
 80040ca:	2200      	movs	r2, #0
 80040cc:	2300      	movs	r3, #0
 80040ce:	4640      	mov	r0, r8
 80040d0:	4649      	mov	r1, r9
 80040d2:	f7fc fd03 	bl	8000adc <__aeabi_dcmplt>
 80040d6:	b110      	cbz	r0, 80040de <_printf_float+0x8a>
 80040d8:	232d      	movs	r3, #45	; 0x2d
 80040da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040de:	4a9c      	ldr	r2, [pc, #624]	; (8004350 <_printf_float+0x2fc>)
 80040e0:	4b9c      	ldr	r3, [pc, #624]	; (8004354 <_printf_float+0x300>)
 80040e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80040e6:	bf8c      	ite	hi
 80040e8:	4690      	movhi	r8, r2
 80040ea:	4698      	movls	r8, r3
 80040ec:	2303      	movs	r3, #3
 80040ee:	f02b 0204 	bic.w	r2, fp, #4
 80040f2:	6123      	str	r3, [r4, #16]
 80040f4:	6022      	str	r2, [r4, #0]
 80040f6:	f04f 0900 	mov.w	r9, #0
 80040fa:	9700      	str	r7, [sp, #0]
 80040fc:	4633      	mov	r3, r6
 80040fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8004100:	4621      	mov	r1, r4
 8004102:	4628      	mov	r0, r5
 8004104:	f000 f9e6 	bl	80044d4 <_printf_common>
 8004108:	3001      	adds	r0, #1
 800410a:	f040 808d 	bne.w	8004228 <_printf_float+0x1d4>
 800410e:	f04f 30ff 	mov.w	r0, #4294967295
 8004112:	b00d      	add	sp, #52	; 0x34
 8004114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004118:	4642      	mov	r2, r8
 800411a:	464b      	mov	r3, r9
 800411c:	4640      	mov	r0, r8
 800411e:	4649      	mov	r1, r9
 8004120:	f7fc fd04 	bl	8000b2c <__aeabi_dcmpun>
 8004124:	b110      	cbz	r0, 800412c <_printf_float+0xd8>
 8004126:	4a8c      	ldr	r2, [pc, #560]	; (8004358 <_printf_float+0x304>)
 8004128:	4b8c      	ldr	r3, [pc, #560]	; (800435c <_printf_float+0x308>)
 800412a:	e7da      	b.n	80040e2 <_printf_float+0x8e>
 800412c:	6861      	ldr	r1, [r4, #4]
 800412e:	1c4b      	adds	r3, r1, #1
 8004130:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004134:	a80a      	add	r0, sp, #40	; 0x28
 8004136:	d13e      	bne.n	80041b6 <_printf_float+0x162>
 8004138:	2306      	movs	r3, #6
 800413a:	6063      	str	r3, [r4, #4]
 800413c:	2300      	movs	r3, #0
 800413e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004142:	ab09      	add	r3, sp, #36	; 0x24
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	ec49 8b10 	vmov	d0, r8, r9
 800414a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800414e:	6022      	str	r2, [r4, #0]
 8004150:	f8cd a004 	str.w	sl, [sp, #4]
 8004154:	6861      	ldr	r1, [r4, #4]
 8004156:	4628      	mov	r0, r5
 8004158:	f7ff fee8 	bl	8003f2c <__cvt>
 800415c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004160:	2b47      	cmp	r3, #71	; 0x47
 8004162:	4680      	mov	r8, r0
 8004164:	d109      	bne.n	800417a <_printf_float+0x126>
 8004166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004168:	1cd8      	adds	r0, r3, #3
 800416a:	db02      	blt.n	8004172 <_printf_float+0x11e>
 800416c:	6862      	ldr	r2, [r4, #4]
 800416e:	4293      	cmp	r3, r2
 8004170:	dd47      	ble.n	8004202 <_printf_float+0x1ae>
 8004172:	f1aa 0a02 	sub.w	sl, sl, #2
 8004176:	fa5f fa8a 	uxtb.w	sl, sl
 800417a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800417e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004180:	d824      	bhi.n	80041cc <_printf_float+0x178>
 8004182:	3901      	subs	r1, #1
 8004184:	4652      	mov	r2, sl
 8004186:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800418a:	9109      	str	r1, [sp, #36]	; 0x24
 800418c:	f7ff ff2f 	bl	8003fee <__exponent>
 8004190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004192:	1813      	adds	r3, r2, r0
 8004194:	2a01      	cmp	r2, #1
 8004196:	4681      	mov	r9, r0
 8004198:	6123      	str	r3, [r4, #16]
 800419a:	dc02      	bgt.n	80041a2 <_printf_float+0x14e>
 800419c:	6822      	ldr	r2, [r4, #0]
 800419e:	07d1      	lsls	r1, r2, #31
 80041a0:	d501      	bpl.n	80041a6 <_printf_float+0x152>
 80041a2:	3301      	adds	r3, #1
 80041a4:	6123      	str	r3, [r4, #16]
 80041a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0a5      	beq.n	80040fa <_printf_float+0xa6>
 80041ae:	232d      	movs	r3, #45	; 0x2d
 80041b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041b4:	e7a1      	b.n	80040fa <_printf_float+0xa6>
 80041b6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80041ba:	f000 8177 	beq.w	80044ac <_printf_float+0x458>
 80041be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80041c2:	d1bb      	bne.n	800413c <_printf_float+0xe8>
 80041c4:	2900      	cmp	r1, #0
 80041c6:	d1b9      	bne.n	800413c <_printf_float+0xe8>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e7b6      	b.n	800413a <_printf_float+0xe6>
 80041cc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80041d0:	d119      	bne.n	8004206 <_printf_float+0x1b2>
 80041d2:	2900      	cmp	r1, #0
 80041d4:	6863      	ldr	r3, [r4, #4]
 80041d6:	dd0c      	ble.n	80041f2 <_printf_float+0x19e>
 80041d8:	6121      	str	r1, [r4, #16]
 80041da:	b913      	cbnz	r3, 80041e2 <_printf_float+0x18e>
 80041dc:	6822      	ldr	r2, [r4, #0]
 80041de:	07d2      	lsls	r2, r2, #31
 80041e0:	d502      	bpl.n	80041e8 <_printf_float+0x194>
 80041e2:	3301      	adds	r3, #1
 80041e4:	440b      	add	r3, r1
 80041e6:	6123      	str	r3, [r4, #16]
 80041e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80041ec:	f04f 0900 	mov.w	r9, #0
 80041f0:	e7d9      	b.n	80041a6 <_printf_float+0x152>
 80041f2:	b913      	cbnz	r3, 80041fa <_printf_float+0x1a6>
 80041f4:	6822      	ldr	r2, [r4, #0]
 80041f6:	07d0      	lsls	r0, r2, #31
 80041f8:	d501      	bpl.n	80041fe <_printf_float+0x1aa>
 80041fa:	3302      	adds	r3, #2
 80041fc:	e7f3      	b.n	80041e6 <_printf_float+0x192>
 80041fe:	2301      	movs	r3, #1
 8004200:	e7f1      	b.n	80041e6 <_printf_float+0x192>
 8004202:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004206:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800420a:	4293      	cmp	r3, r2
 800420c:	db05      	blt.n	800421a <_printf_float+0x1c6>
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	6123      	str	r3, [r4, #16]
 8004212:	07d1      	lsls	r1, r2, #31
 8004214:	d5e8      	bpl.n	80041e8 <_printf_float+0x194>
 8004216:	3301      	adds	r3, #1
 8004218:	e7e5      	b.n	80041e6 <_printf_float+0x192>
 800421a:	2b00      	cmp	r3, #0
 800421c:	bfd4      	ite	le
 800421e:	f1c3 0302 	rsble	r3, r3, #2
 8004222:	2301      	movgt	r3, #1
 8004224:	4413      	add	r3, r2
 8004226:	e7de      	b.n	80041e6 <_printf_float+0x192>
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	055a      	lsls	r2, r3, #21
 800422c:	d407      	bmi.n	800423e <_printf_float+0x1ea>
 800422e:	6923      	ldr	r3, [r4, #16]
 8004230:	4642      	mov	r2, r8
 8004232:	4631      	mov	r1, r6
 8004234:	4628      	mov	r0, r5
 8004236:	47b8      	blx	r7
 8004238:	3001      	adds	r0, #1
 800423a:	d12b      	bne.n	8004294 <_printf_float+0x240>
 800423c:	e767      	b.n	800410e <_printf_float+0xba>
 800423e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004242:	f240 80dc 	bls.w	80043fe <_printf_float+0x3aa>
 8004246:	2200      	movs	r2, #0
 8004248:	2300      	movs	r3, #0
 800424a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800424e:	f7fc fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004252:	2800      	cmp	r0, #0
 8004254:	d033      	beq.n	80042be <_printf_float+0x26a>
 8004256:	2301      	movs	r3, #1
 8004258:	4a41      	ldr	r2, [pc, #260]	; (8004360 <_printf_float+0x30c>)
 800425a:	4631      	mov	r1, r6
 800425c:	4628      	mov	r0, r5
 800425e:	47b8      	blx	r7
 8004260:	3001      	adds	r0, #1
 8004262:	f43f af54 	beq.w	800410e <_printf_float+0xba>
 8004266:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800426a:	429a      	cmp	r2, r3
 800426c:	db02      	blt.n	8004274 <_printf_float+0x220>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	07d8      	lsls	r0, r3, #31
 8004272:	d50f      	bpl.n	8004294 <_printf_float+0x240>
 8004274:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004278:	4631      	mov	r1, r6
 800427a:	4628      	mov	r0, r5
 800427c:	47b8      	blx	r7
 800427e:	3001      	adds	r0, #1
 8004280:	f43f af45 	beq.w	800410e <_printf_float+0xba>
 8004284:	f04f 0800 	mov.w	r8, #0
 8004288:	f104 091a 	add.w	r9, r4, #26
 800428c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800428e:	3b01      	subs	r3, #1
 8004290:	4543      	cmp	r3, r8
 8004292:	dc09      	bgt.n	80042a8 <_printf_float+0x254>
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	079b      	lsls	r3, r3, #30
 8004298:	f100 8103 	bmi.w	80044a2 <_printf_float+0x44e>
 800429c:	68e0      	ldr	r0, [r4, #12]
 800429e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042a0:	4298      	cmp	r0, r3
 80042a2:	bfb8      	it	lt
 80042a4:	4618      	movlt	r0, r3
 80042a6:	e734      	b.n	8004112 <_printf_float+0xbe>
 80042a8:	2301      	movs	r3, #1
 80042aa:	464a      	mov	r2, r9
 80042ac:	4631      	mov	r1, r6
 80042ae:	4628      	mov	r0, r5
 80042b0:	47b8      	blx	r7
 80042b2:	3001      	adds	r0, #1
 80042b4:	f43f af2b 	beq.w	800410e <_printf_float+0xba>
 80042b8:	f108 0801 	add.w	r8, r8, #1
 80042bc:	e7e6      	b.n	800428c <_printf_float+0x238>
 80042be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	dc2b      	bgt.n	800431c <_printf_float+0x2c8>
 80042c4:	2301      	movs	r3, #1
 80042c6:	4a26      	ldr	r2, [pc, #152]	; (8004360 <_printf_float+0x30c>)
 80042c8:	4631      	mov	r1, r6
 80042ca:	4628      	mov	r0, r5
 80042cc:	47b8      	blx	r7
 80042ce:	3001      	adds	r0, #1
 80042d0:	f43f af1d 	beq.w	800410e <_printf_float+0xba>
 80042d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042d6:	b923      	cbnz	r3, 80042e2 <_printf_float+0x28e>
 80042d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042da:	b913      	cbnz	r3, 80042e2 <_printf_float+0x28e>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	07d9      	lsls	r1, r3, #31
 80042e0:	d5d8      	bpl.n	8004294 <_printf_float+0x240>
 80042e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042e6:	4631      	mov	r1, r6
 80042e8:	4628      	mov	r0, r5
 80042ea:	47b8      	blx	r7
 80042ec:	3001      	adds	r0, #1
 80042ee:	f43f af0e 	beq.w	800410e <_printf_float+0xba>
 80042f2:	f04f 0900 	mov.w	r9, #0
 80042f6:	f104 0a1a 	add.w	sl, r4, #26
 80042fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042fc:	425b      	negs	r3, r3
 80042fe:	454b      	cmp	r3, r9
 8004300:	dc01      	bgt.n	8004306 <_printf_float+0x2b2>
 8004302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004304:	e794      	b.n	8004230 <_printf_float+0x1dc>
 8004306:	2301      	movs	r3, #1
 8004308:	4652      	mov	r2, sl
 800430a:	4631      	mov	r1, r6
 800430c:	4628      	mov	r0, r5
 800430e:	47b8      	blx	r7
 8004310:	3001      	adds	r0, #1
 8004312:	f43f aefc 	beq.w	800410e <_printf_float+0xba>
 8004316:	f109 0901 	add.w	r9, r9, #1
 800431a:	e7ee      	b.n	80042fa <_printf_float+0x2a6>
 800431c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800431e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004320:	429a      	cmp	r2, r3
 8004322:	bfa8      	it	ge
 8004324:	461a      	movge	r2, r3
 8004326:	2a00      	cmp	r2, #0
 8004328:	4691      	mov	r9, r2
 800432a:	dd07      	ble.n	800433c <_printf_float+0x2e8>
 800432c:	4613      	mov	r3, r2
 800432e:	4631      	mov	r1, r6
 8004330:	4642      	mov	r2, r8
 8004332:	4628      	mov	r0, r5
 8004334:	47b8      	blx	r7
 8004336:	3001      	adds	r0, #1
 8004338:	f43f aee9 	beq.w	800410e <_printf_float+0xba>
 800433c:	f104 031a 	add.w	r3, r4, #26
 8004340:	f04f 0b00 	mov.w	fp, #0
 8004344:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004348:	9306      	str	r3, [sp, #24]
 800434a:	e015      	b.n	8004378 <_printf_float+0x324>
 800434c:	7fefffff 	.word	0x7fefffff
 8004350:	08007a14 	.word	0x08007a14
 8004354:	08007a10 	.word	0x08007a10
 8004358:	08007a1c 	.word	0x08007a1c
 800435c:	08007a18 	.word	0x08007a18
 8004360:	08007a20 	.word	0x08007a20
 8004364:	2301      	movs	r3, #1
 8004366:	9a06      	ldr	r2, [sp, #24]
 8004368:	4631      	mov	r1, r6
 800436a:	4628      	mov	r0, r5
 800436c:	47b8      	blx	r7
 800436e:	3001      	adds	r0, #1
 8004370:	f43f aecd 	beq.w	800410e <_printf_float+0xba>
 8004374:	f10b 0b01 	add.w	fp, fp, #1
 8004378:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800437c:	ebaa 0309 	sub.w	r3, sl, r9
 8004380:	455b      	cmp	r3, fp
 8004382:	dcef      	bgt.n	8004364 <_printf_float+0x310>
 8004384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004388:	429a      	cmp	r2, r3
 800438a:	44d0      	add	r8, sl
 800438c:	db15      	blt.n	80043ba <_printf_float+0x366>
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	07da      	lsls	r2, r3, #31
 8004392:	d412      	bmi.n	80043ba <_printf_float+0x366>
 8004394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004396:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004398:	eba3 020a 	sub.w	r2, r3, sl
 800439c:	eba3 0a01 	sub.w	sl, r3, r1
 80043a0:	4592      	cmp	sl, r2
 80043a2:	bfa8      	it	ge
 80043a4:	4692      	movge	sl, r2
 80043a6:	f1ba 0f00 	cmp.w	sl, #0
 80043aa:	dc0e      	bgt.n	80043ca <_printf_float+0x376>
 80043ac:	f04f 0800 	mov.w	r8, #0
 80043b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80043b4:	f104 091a 	add.w	r9, r4, #26
 80043b8:	e019      	b.n	80043ee <_printf_float+0x39a>
 80043ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043be:	4631      	mov	r1, r6
 80043c0:	4628      	mov	r0, r5
 80043c2:	47b8      	blx	r7
 80043c4:	3001      	adds	r0, #1
 80043c6:	d1e5      	bne.n	8004394 <_printf_float+0x340>
 80043c8:	e6a1      	b.n	800410e <_printf_float+0xba>
 80043ca:	4653      	mov	r3, sl
 80043cc:	4642      	mov	r2, r8
 80043ce:	4631      	mov	r1, r6
 80043d0:	4628      	mov	r0, r5
 80043d2:	47b8      	blx	r7
 80043d4:	3001      	adds	r0, #1
 80043d6:	d1e9      	bne.n	80043ac <_printf_float+0x358>
 80043d8:	e699      	b.n	800410e <_printf_float+0xba>
 80043da:	2301      	movs	r3, #1
 80043dc:	464a      	mov	r2, r9
 80043de:	4631      	mov	r1, r6
 80043e0:	4628      	mov	r0, r5
 80043e2:	47b8      	blx	r7
 80043e4:	3001      	adds	r0, #1
 80043e6:	f43f ae92 	beq.w	800410e <_printf_float+0xba>
 80043ea:	f108 0801 	add.w	r8, r8, #1
 80043ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	eba3 030a 	sub.w	r3, r3, sl
 80043f8:	4543      	cmp	r3, r8
 80043fa:	dcee      	bgt.n	80043da <_printf_float+0x386>
 80043fc:	e74a      	b.n	8004294 <_printf_float+0x240>
 80043fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004400:	2a01      	cmp	r2, #1
 8004402:	dc01      	bgt.n	8004408 <_printf_float+0x3b4>
 8004404:	07db      	lsls	r3, r3, #31
 8004406:	d53a      	bpl.n	800447e <_printf_float+0x42a>
 8004408:	2301      	movs	r3, #1
 800440a:	4642      	mov	r2, r8
 800440c:	4631      	mov	r1, r6
 800440e:	4628      	mov	r0, r5
 8004410:	47b8      	blx	r7
 8004412:	3001      	adds	r0, #1
 8004414:	f43f ae7b 	beq.w	800410e <_printf_float+0xba>
 8004418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800441c:	4631      	mov	r1, r6
 800441e:	4628      	mov	r0, r5
 8004420:	47b8      	blx	r7
 8004422:	3001      	adds	r0, #1
 8004424:	f108 0801 	add.w	r8, r8, #1
 8004428:	f43f ae71 	beq.w	800410e <_printf_float+0xba>
 800442c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800442e:	2200      	movs	r2, #0
 8004430:	f103 3aff 	add.w	sl, r3, #4294967295
 8004434:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004438:	2300      	movs	r3, #0
 800443a:	f7fc fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800443e:	b9c8      	cbnz	r0, 8004474 <_printf_float+0x420>
 8004440:	4653      	mov	r3, sl
 8004442:	4642      	mov	r2, r8
 8004444:	4631      	mov	r1, r6
 8004446:	4628      	mov	r0, r5
 8004448:	47b8      	blx	r7
 800444a:	3001      	adds	r0, #1
 800444c:	d10e      	bne.n	800446c <_printf_float+0x418>
 800444e:	e65e      	b.n	800410e <_printf_float+0xba>
 8004450:	2301      	movs	r3, #1
 8004452:	4652      	mov	r2, sl
 8004454:	4631      	mov	r1, r6
 8004456:	4628      	mov	r0, r5
 8004458:	47b8      	blx	r7
 800445a:	3001      	adds	r0, #1
 800445c:	f43f ae57 	beq.w	800410e <_printf_float+0xba>
 8004460:	f108 0801 	add.w	r8, r8, #1
 8004464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004466:	3b01      	subs	r3, #1
 8004468:	4543      	cmp	r3, r8
 800446a:	dcf1      	bgt.n	8004450 <_printf_float+0x3fc>
 800446c:	464b      	mov	r3, r9
 800446e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004472:	e6de      	b.n	8004232 <_printf_float+0x1de>
 8004474:	f04f 0800 	mov.w	r8, #0
 8004478:	f104 0a1a 	add.w	sl, r4, #26
 800447c:	e7f2      	b.n	8004464 <_printf_float+0x410>
 800447e:	2301      	movs	r3, #1
 8004480:	e7df      	b.n	8004442 <_printf_float+0x3ee>
 8004482:	2301      	movs	r3, #1
 8004484:	464a      	mov	r2, r9
 8004486:	4631      	mov	r1, r6
 8004488:	4628      	mov	r0, r5
 800448a:	47b8      	blx	r7
 800448c:	3001      	adds	r0, #1
 800448e:	f43f ae3e 	beq.w	800410e <_printf_float+0xba>
 8004492:	f108 0801 	add.w	r8, r8, #1
 8004496:	68e3      	ldr	r3, [r4, #12]
 8004498:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	4543      	cmp	r3, r8
 800449e:	dcf0      	bgt.n	8004482 <_printf_float+0x42e>
 80044a0:	e6fc      	b.n	800429c <_printf_float+0x248>
 80044a2:	f04f 0800 	mov.w	r8, #0
 80044a6:	f104 0919 	add.w	r9, r4, #25
 80044aa:	e7f4      	b.n	8004496 <_printf_float+0x442>
 80044ac:	2900      	cmp	r1, #0
 80044ae:	f43f ae8b 	beq.w	80041c8 <_printf_float+0x174>
 80044b2:	2300      	movs	r3, #0
 80044b4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80044b8:	ab09      	add	r3, sp, #36	; 0x24
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	ec49 8b10 	vmov	d0, r8, r9
 80044c0:	6022      	str	r2, [r4, #0]
 80044c2:	f8cd a004 	str.w	sl, [sp, #4]
 80044c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044ca:	4628      	mov	r0, r5
 80044cc:	f7ff fd2e 	bl	8003f2c <__cvt>
 80044d0:	4680      	mov	r8, r0
 80044d2:	e648      	b.n	8004166 <_printf_float+0x112>

080044d4 <_printf_common>:
 80044d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d8:	4691      	mov	r9, r2
 80044da:	461f      	mov	r7, r3
 80044dc:	688a      	ldr	r2, [r1, #8]
 80044de:	690b      	ldr	r3, [r1, #16]
 80044e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044e4:	4293      	cmp	r3, r2
 80044e6:	bfb8      	it	lt
 80044e8:	4613      	movlt	r3, r2
 80044ea:	f8c9 3000 	str.w	r3, [r9]
 80044ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044f2:	4606      	mov	r6, r0
 80044f4:	460c      	mov	r4, r1
 80044f6:	b112      	cbz	r2, 80044fe <_printf_common+0x2a>
 80044f8:	3301      	adds	r3, #1
 80044fa:	f8c9 3000 	str.w	r3, [r9]
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	0699      	lsls	r1, r3, #26
 8004502:	bf42      	ittt	mi
 8004504:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004508:	3302      	addmi	r3, #2
 800450a:	f8c9 3000 	strmi.w	r3, [r9]
 800450e:	6825      	ldr	r5, [r4, #0]
 8004510:	f015 0506 	ands.w	r5, r5, #6
 8004514:	d107      	bne.n	8004526 <_printf_common+0x52>
 8004516:	f104 0a19 	add.w	sl, r4, #25
 800451a:	68e3      	ldr	r3, [r4, #12]
 800451c:	f8d9 2000 	ldr.w	r2, [r9]
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	42ab      	cmp	r3, r5
 8004524:	dc28      	bgt.n	8004578 <_printf_common+0xa4>
 8004526:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800452a:	6822      	ldr	r2, [r4, #0]
 800452c:	3300      	adds	r3, #0
 800452e:	bf18      	it	ne
 8004530:	2301      	movne	r3, #1
 8004532:	0692      	lsls	r2, r2, #26
 8004534:	d42d      	bmi.n	8004592 <_printf_common+0xbe>
 8004536:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800453a:	4639      	mov	r1, r7
 800453c:	4630      	mov	r0, r6
 800453e:	47c0      	blx	r8
 8004540:	3001      	adds	r0, #1
 8004542:	d020      	beq.n	8004586 <_printf_common+0xb2>
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	68e5      	ldr	r5, [r4, #12]
 8004548:	f8d9 2000 	ldr.w	r2, [r9]
 800454c:	f003 0306 	and.w	r3, r3, #6
 8004550:	2b04      	cmp	r3, #4
 8004552:	bf08      	it	eq
 8004554:	1aad      	subeq	r5, r5, r2
 8004556:	68a3      	ldr	r3, [r4, #8]
 8004558:	6922      	ldr	r2, [r4, #16]
 800455a:	bf0c      	ite	eq
 800455c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004560:	2500      	movne	r5, #0
 8004562:	4293      	cmp	r3, r2
 8004564:	bfc4      	itt	gt
 8004566:	1a9b      	subgt	r3, r3, r2
 8004568:	18ed      	addgt	r5, r5, r3
 800456a:	f04f 0900 	mov.w	r9, #0
 800456e:	341a      	adds	r4, #26
 8004570:	454d      	cmp	r5, r9
 8004572:	d11a      	bne.n	80045aa <_printf_common+0xd6>
 8004574:	2000      	movs	r0, #0
 8004576:	e008      	b.n	800458a <_printf_common+0xb6>
 8004578:	2301      	movs	r3, #1
 800457a:	4652      	mov	r2, sl
 800457c:	4639      	mov	r1, r7
 800457e:	4630      	mov	r0, r6
 8004580:	47c0      	blx	r8
 8004582:	3001      	adds	r0, #1
 8004584:	d103      	bne.n	800458e <_printf_common+0xba>
 8004586:	f04f 30ff 	mov.w	r0, #4294967295
 800458a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800458e:	3501      	adds	r5, #1
 8004590:	e7c3      	b.n	800451a <_printf_common+0x46>
 8004592:	18e1      	adds	r1, r4, r3
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	2030      	movs	r0, #48	; 0x30
 8004598:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800459c:	4422      	add	r2, r4
 800459e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045a6:	3302      	adds	r3, #2
 80045a8:	e7c5      	b.n	8004536 <_printf_common+0x62>
 80045aa:	2301      	movs	r3, #1
 80045ac:	4622      	mov	r2, r4
 80045ae:	4639      	mov	r1, r7
 80045b0:	4630      	mov	r0, r6
 80045b2:	47c0      	blx	r8
 80045b4:	3001      	adds	r0, #1
 80045b6:	d0e6      	beq.n	8004586 <_printf_common+0xb2>
 80045b8:	f109 0901 	add.w	r9, r9, #1
 80045bc:	e7d8      	b.n	8004570 <_printf_common+0x9c>
	...

080045c0 <_printf_i>:
 80045c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80045c8:	460c      	mov	r4, r1
 80045ca:	7e09      	ldrb	r1, [r1, #24]
 80045cc:	b085      	sub	sp, #20
 80045ce:	296e      	cmp	r1, #110	; 0x6e
 80045d0:	4617      	mov	r7, r2
 80045d2:	4606      	mov	r6, r0
 80045d4:	4698      	mov	r8, r3
 80045d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045d8:	f000 80b3 	beq.w	8004742 <_printf_i+0x182>
 80045dc:	d822      	bhi.n	8004624 <_printf_i+0x64>
 80045de:	2963      	cmp	r1, #99	; 0x63
 80045e0:	d036      	beq.n	8004650 <_printf_i+0x90>
 80045e2:	d80a      	bhi.n	80045fa <_printf_i+0x3a>
 80045e4:	2900      	cmp	r1, #0
 80045e6:	f000 80b9 	beq.w	800475c <_printf_i+0x19c>
 80045ea:	2958      	cmp	r1, #88	; 0x58
 80045ec:	f000 8083 	beq.w	80046f6 <_printf_i+0x136>
 80045f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80045f8:	e032      	b.n	8004660 <_printf_i+0xa0>
 80045fa:	2964      	cmp	r1, #100	; 0x64
 80045fc:	d001      	beq.n	8004602 <_printf_i+0x42>
 80045fe:	2969      	cmp	r1, #105	; 0x69
 8004600:	d1f6      	bne.n	80045f0 <_printf_i+0x30>
 8004602:	6820      	ldr	r0, [r4, #0]
 8004604:	6813      	ldr	r3, [r2, #0]
 8004606:	0605      	lsls	r5, r0, #24
 8004608:	f103 0104 	add.w	r1, r3, #4
 800460c:	d52a      	bpl.n	8004664 <_printf_i+0xa4>
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6011      	str	r1, [r2, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	da03      	bge.n	800461e <_printf_i+0x5e>
 8004616:	222d      	movs	r2, #45	; 0x2d
 8004618:	425b      	negs	r3, r3
 800461a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800461e:	486f      	ldr	r0, [pc, #444]	; (80047dc <_printf_i+0x21c>)
 8004620:	220a      	movs	r2, #10
 8004622:	e039      	b.n	8004698 <_printf_i+0xd8>
 8004624:	2973      	cmp	r1, #115	; 0x73
 8004626:	f000 809d 	beq.w	8004764 <_printf_i+0x1a4>
 800462a:	d808      	bhi.n	800463e <_printf_i+0x7e>
 800462c:	296f      	cmp	r1, #111	; 0x6f
 800462e:	d020      	beq.n	8004672 <_printf_i+0xb2>
 8004630:	2970      	cmp	r1, #112	; 0x70
 8004632:	d1dd      	bne.n	80045f0 <_printf_i+0x30>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	f043 0320 	orr.w	r3, r3, #32
 800463a:	6023      	str	r3, [r4, #0]
 800463c:	e003      	b.n	8004646 <_printf_i+0x86>
 800463e:	2975      	cmp	r1, #117	; 0x75
 8004640:	d017      	beq.n	8004672 <_printf_i+0xb2>
 8004642:	2978      	cmp	r1, #120	; 0x78
 8004644:	d1d4      	bne.n	80045f0 <_printf_i+0x30>
 8004646:	2378      	movs	r3, #120	; 0x78
 8004648:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800464c:	4864      	ldr	r0, [pc, #400]	; (80047e0 <_printf_i+0x220>)
 800464e:	e055      	b.n	80046fc <_printf_i+0x13c>
 8004650:	6813      	ldr	r3, [r2, #0]
 8004652:	1d19      	adds	r1, r3, #4
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6011      	str	r1, [r2, #0]
 8004658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800465c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004660:	2301      	movs	r3, #1
 8004662:	e08c      	b.n	800477e <_printf_i+0x1be>
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6011      	str	r1, [r2, #0]
 8004668:	f010 0f40 	tst.w	r0, #64	; 0x40
 800466c:	bf18      	it	ne
 800466e:	b21b      	sxthne	r3, r3
 8004670:	e7cf      	b.n	8004612 <_printf_i+0x52>
 8004672:	6813      	ldr	r3, [r2, #0]
 8004674:	6825      	ldr	r5, [r4, #0]
 8004676:	1d18      	adds	r0, r3, #4
 8004678:	6010      	str	r0, [r2, #0]
 800467a:	0628      	lsls	r0, r5, #24
 800467c:	d501      	bpl.n	8004682 <_printf_i+0xc2>
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	e002      	b.n	8004688 <_printf_i+0xc8>
 8004682:	0668      	lsls	r0, r5, #25
 8004684:	d5fb      	bpl.n	800467e <_printf_i+0xbe>
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	4854      	ldr	r0, [pc, #336]	; (80047dc <_printf_i+0x21c>)
 800468a:	296f      	cmp	r1, #111	; 0x6f
 800468c:	bf14      	ite	ne
 800468e:	220a      	movne	r2, #10
 8004690:	2208      	moveq	r2, #8
 8004692:	2100      	movs	r1, #0
 8004694:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004698:	6865      	ldr	r5, [r4, #4]
 800469a:	60a5      	str	r5, [r4, #8]
 800469c:	2d00      	cmp	r5, #0
 800469e:	f2c0 8095 	blt.w	80047cc <_printf_i+0x20c>
 80046a2:	6821      	ldr	r1, [r4, #0]
 80046a4:	f021 0104 	bic.w	r1, r1, #4
 80046a8:	6021      	str	r1, [r4, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d13d      	bne.n	800472a <_printf_i+0x16a>
 80046ae:	2d00      	cmp	r5, #0
 80046b0:	f040 808e 	bne.w	80047d0 <_printf_i+0x210>
 80046b4:	4665      	mov	r5, ip
 80046b6:	2a08      	cmp	r2, #8
 80046b8:	d10b      	bne.n	80046d2 <_printf_i+0x112>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	07db      	lsls	r3, r3, #31
 80046be:	d508      	bpl.n	80046d2 <_printf_i+0x112>
 80046c0:	6923      	ldr	r3, [r4, #16]
 80046c2:	6862      	ldr	r2, [r4, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	bfde      	ittt	le
 80046c8:	2330      	movle	r3, #48	; 0x30
 80046ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046d2:	ebac 0305 	sub.w	r3, ip, r5
 80046d6:	6123      	str	r3, [r4, #16]
 80046d8:	f8cd 8000 	str.w	r8, [sp]
 80046dc:	463b      	mov	r3, r7
 80046de:	aa03      	add	r2, sp, #12
 80046e0:	4621      	mov	r1, r4
 80046e2:	4630      	mov	r0, r6
 80046e4:	f7ff fef6 	bl	80044d4 <_printf_common>
 80046e8:	3001      	adds	r0, #1
 80046ea:	d14d      	bne.n	8004788 <_printf_i+0x1c8>
 80046ec:	f04f 30ff 	mov.w	r0, #4294967295
 80046f0:	b005      	add	sp, #20
 80046f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046f6:	4839      	ldr	r0, [pc, #228]	; (80047dc <_printf_i+0x21c>)
 80046f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80046fc:	6813      	ldr	r3, [r2, #0]
 80046fe:	6821      	ldr	r1, [r4, #0]
 8004700:	1d1d      	adds	r5, r3, #4
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6015      	str	r5, [r2, #0]
 8004706:	060a      	lsls	r2, r1, #24
 8004708:	d50b      	bpl.n	8004722 <_printf_i+0x162>
 800470a:	07ca      	lsls	r2, r1, #31
 800470c:	bf44      	itt	mi
 800470e:	f041 0120 	orrmi.w	r1, r1, #32
 8004712:	6021      	strmi	r1, [r4, #0]
 8004714:	b91b      	cbnz	r3, 800471e <_printf_i+0x15e>
 8004716:	6822      	ldr	r2, [r4, #0]
 8004718:	f022 0220 	bic.w	r2, r2, #32
 800471c:	6022      	str	r2, [r4, #0]
 800471e:	2210      	movs	r2, #16
 8004720:	e7b7      	b.n	8004692 <_printf_i+0xd2>
 8004722:	064d      	lsls	r5, r1, #25
 8004724:	bf48      	it	mi
 8004726:	b29b      	uxthmi	r3, r3
 8004728:	e7ef      	b.n	800470a <_printf_i+0x14a>
 800472a:	4665      	mov	r5, ip
 800472c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004730:	fb02 3311 	mls	r3, r2, r1, r3
 8004734:	5cc3      	ldrb	r3, [r0, r3]
 8004736:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800473a:	460b      	mov	r3, r1
 800473c:	2900      	cmp	r1, #0
 800473e:	d1f5      	bne.n	800472c <_printf_i+0x16c>
 8004740:	e7b9      	b.n	80046b6 <_printf_i+0xf6>
 8004742:	6813      	ldr	r3, [r2, #0]
 8004744:	6825      	ldr	r5, [r4, #0]
 8004746:	6961      	ldr	r1, [r4, #20]
 8004748:	1d18      	adds	r0, r3, #4
 800474a:	6010      	str	r0, [r2, #0]
 800474c:	0628      	lsls	r0, r5, #24
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	d501      	bpl.n	8004756 <_printf_i+0x196>
 8004752:	6019      	str	r1, [r3, #0]
 8004754:	e002      	b.n	800475c <_printf_i+0x19c>
 8004756:	066a      	lsls	r2, r5, #25
 8004758:	d5fb      	bpl.n	8004752 <_printf_i+0x192>
 800475a:	8019      	strh	r1, [r3, #0]
 800475c:	2300      	movs	r3, #0
 800475e:	6123      	str	r3, [r4, #16]
 8004760:	4665      	mov	r5, ip
 8004762:	e7b9      	b.n	80046d8 <_printf_i+0x118>
 8004764:	6813      	ldr	r3, [r2, #0]
 8004766:	1d19      	adds	r1, r3, #4
 8004768:	6011      	str	r1, [r2, #0]
 800476a:	681d      	ldr	r5, [r3, #0]
 800476c:	6862      	ldr	r2, [r4, #4]
 800476e:	2100      	movs	r1, #0
 8004770:	4628      	mov	r0, r5
 8004772:	f7fb fd35 	bl	80001e0 <memchr>
 8004776:	b108      	cbz	r0, 800477c <_printf_i+0x1bc>
 8004778:	1b40      	subs	r0, r0, r5
 800477a:	6060      	str	r0, [r4, #4]
 800477c:	6863      	ldr	r3, [r4, #4]
 800477e:	6123      	str	r3, [r4, #16]
 8004780:	2300      	movs	r3, #0
 8004782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004786:	e7a7      	b.n	80046d8 <_printf_i+0x118>
 8004788:	6923      	ldr	r3, [r4, #16]
 800478a:	462a      	mov	r2, r5
 800478c:	4639      	mov	r1, r7
 800478e:	4630      	mov	r0, r6
 8004790:	47c0      	blx	r8
 8004792:	3001      	adds	r0, #1
 8004794:	d0aa      	beq.n	80046ec <_printf_i+0x12c>
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	079b      	lsls	r3, r3, #30
 800479a:	d413      	bmi.n	80047c4 <_printf_i+0x204>
 800479c:	68e0      	ldr	r0, [r4, #12]
 800479e:	9b03      	ldr	r3, [sp, #12]
 80047a0:	4298      	cmp	r0, r3
 80047a2:	bfb8      	it	lt
 80047a4:	4618      	movlt	r0, r3
 80047a6:	e7a3      	b.n	80046f0 <_printf_i+0x130>
 80047a8:	2301      	movs	r3, #1
 80047aa:	464a      	mov	r2, r9
 80047ac:	4639      	mov	r1, r7
 80047ae:	4630      	mov	r0, r6
 80047b0:	47c0      	blx	r8
 80047b2:	3001      	adds	r0, #1
 80047b4:	d09a      	beq.n	80046ec <_printf_i+0x12c>
 80047b6:	3501      	adds	r5, #1
 80047b8:	68e3      	ldr	r3, [r4, #12]
 80047ba:	9a03      	ldr	r2, [sp, #12]
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	42ab      	cmp	r3, r5
 80047c0:	dcf2      	bgt.n	80047a8 <_printf_i+0x1e8>
 80047c2:	e7eb      	b.n	800479c <_printf_i+0x1dc>
 80047c4:	2500      	movs	r5, #0
 80047c6:	f104 0919 	add.w	r9, r4, #25
 80047ca:	e7f5      	b.n	80047b8 <_printf_i+0x1f8>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1ac      	bne.n	800472a <_printf_i+0x16a>
 80047d0:	7803      	ldrb	r3, [r0, #0]
 80047d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047da:	e76c      	b.n	80046b6 <_printf_i+0xf6>
 80047dc:	08007a22 	.word	0x08007a22
 80047e0:	08007a33 	.word	0x08007a33

080047e4 <_scanf_float>:
 80047e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e8:	469a      	mov	sl, r3
 80047ea:	688b      	ldr	r3, [r1, #8]
 80047ec:	4616      	mov	r6, r2
 80047ee:	1e5a      	subs	r2, r3, #1
 80047f0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80047f4:	b087      	sub	sp, #28
 80047f6:	bf83      	ittte	hi
 80047f8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80047fc:	189b      	addhi	r3, r3, r2
 80047fe:	9301      	strhi	r3, [sp, #4]
 8004800:	2300      	movls	r3, #0
 8004802:	bf86      	itte	hi
 8004804:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004808:	608b      	strhi	r3, [r1, #8]
 800480a:	9301      	strls	r3, [sp, #4]
 800480c:	680b      	ldr	r3, [r1, #0]
 800480e:	4688      	mov	r8, r1
 8004810:	f04f 0b00 	mov.w	fp, #0
 8004814:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004818:	f848 3b1c 	str.w	r3, [r8], #28
 800481c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004820:	4607      	mov	r7, r0
 8004822:	460c      	mov	r4, r1
 8004824:	4645      	mov	r5, r8
 8004826:	465a      	mov	r2, fp
 8004828:	46d9      	mov	r9, fp
 800482a:	f8cd b008 	str.w	fp, [sp, #8]
 800482e:	68a1      	ldr	r1, [r4, #8]
 8004830:	b181      	cbz	r1, 8004854 <_scanf_float+0x70>
 8004832:	6833      	ldr	r3, [r6, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b49      	cmp	r3, #73	; 0x49
 8004838:	d071      	beq.n	800491e <_scanf_float+0x13a>
 800483a:	d84d      	bhi.n	80048d8 <_scanf_float+0xf4>
 800483c:	2b39      	cmp	r3, #57	; 0x39
 800483e:	d840      	bhi.n	80048c2 <_scanf_float+0xde>
 8004840:	2b31      	cmp	r3, #49	; 0x31
 8004842:	f080 8088 	bcs.w	8004956 <_scanf_float+0x172>
 8004846:	2b2d      	cmp	r3, #45	; 0x2d
 8004848:	f000 8090 	beq.w	800496c <_scanf_float+0x188>
 800484c:	d815      	bhi.n	800487a <_scanf_float+0x96>
 800484e:	2b2b      	cmp	r3, #43	; 0x2b
 8004850:	f000 808c 	beq.w	800496c <_scanf_float+0x188>
 8004854:	f1b9 0f00 	cmp.w	r9, #0
 8004858:	d003      	beq.n	8004862 <_scanf_float+0x7e>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	3a01      	subs	r2, #1
 8004864:	2a01      	cmp	r2, #1
 8004866:	f200 80ea 	bhi.w	8004a3e <_scanf_float+0x25a>
 800486a:	4545      	cmp	r5, r8
 800486c:	f200 80dc 	bhi.w	8004a28 <_scanf_float+0x244>
 8004870:	2601      	movs	r6, #1
 8004872:	4630      	mov	r0, r6
 8004874:	b007      	add	sp, #28
 8004876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800487a:	2b2e      	cmp	r3, #46	; 0x2e
 800487c:	f000 809f 	beq.w	80049be <_scanf_float+0x1da>
 8004880:	2b30      	cmp	r3, #48	; 0x30
 8004882:	d1e7      	bne.n	8004854 <_scanf_float+0x70>
 8004884:	6820      	ldr	r0, [r4, #0]
 8004886:	f410 7f80 	tst.w	r0, #256	; 0x100
 800488a:	d064      	beq.n	8004956 <_scanf_float+0x172>
 800488c:	9b01      	ldr	r3, [sp, #4]
 800488e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004892:	6020      	str	r0, [r4, #0]
 8004894:	f109 0901 	add.w	r9, r9, #1
 8004898:	b11b      	cbz	r3, 80048a2 <_scanf_float+0xbe>
 800489a:	3b01      	subs	r3, #1
 800489c:	3101      	adds	r1, #1
 800489e:	9301      	str	r3, [sp, #4]
 80048a0:	60a1      	str	r1, [r4, #8]
 80048a2:	68a3      	ldr	r3, [r4, #8]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	60a3      	str	r3, [r4, #8]
 80048a8:	6923      	ldr	r3, [r4, #16]
 80048aa:	3301      	adds	r3, #1
 80048ac:	6123      	str	r3, [r4, #16]
 80048ae:	6873      	ldr	r3, [r6, #4]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	6073      	str	r3, [r6, #4]
 80048b6:	f340 80ac 	ble.w	8004a12 <_scanf_float+0x22e>
 80048ba:	6833      	ldr	r3, [r6, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	6033      	str	r3, [r6, #0]
 80048c0:	e7b5      	b.n	800482e <_scanf_float+0x4a>
 80048c2:	2b45      	cmp	r3, #69	; 0x45
 80048c4:	f000 8085 	beq.w	80049d2 <_scanf_float+0x1ee>
 80048c8:	2b46      	cmp	r3, #70	; 0x46
 80048ca:	d06a      	beq.n	80049a2 <_scanf_float+0x1be>
 80048cc:	2b41      	cmp	r3, #65	; 0x41
 80048ce:	d1c1      	bne.n	8004854 <_scanf_float+0x70>
 80048d0:	2a01      	cmp	r2, #1
 80048d2:	d1bf      	bne.n	8004854 <_scanf_float+0x70>
 80048d4:	2202      	movs	r2, #2
 80048d6:	e046      	b.n	8004966 <_scanf_float+0x182>
 80048d8:	2b65      	cmp	r3, #101	; 0x65
 80048da:	d07a      	beq.n	80049d2 <_scanf_float+0x1ee>
 80048dc:	d818      	bhi.n	8004910 <_scanf_float+0x12c>
 80048de:	2b54      	cmp	r3, #84	; 0x54
 80048e0:	d066      	beq.n	80049b0 <_scanf_float+0x1cc>
 80048e2:	d811      	bhi.n	8004908 <_scanf_float+0x124>
 80048e4:	2b4e      	cmp	r3, #78	; 0x4e
 80048e6:	d1b5      	bne.n	8004854 <_scanf_float+0x70>
 80048e8:	2a00      	cmp	r2, #0
 80048ea:	d146      	bne.n	800497a <_scanf_float+0x196>
 80048ec:	f1b9 0f00 	cmp.w	r9, #0
 80048f0:	d145      	bne.n	800497e <_scanf_float+0x19a>
 80048f2:	6821      	ldr	r1, [r4, #0]
 80048f4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80048f8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80048fc:	d13f      	bne.n	800497e <_scanf_float+0x19a>
 80048fe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004902:	6021      	str	r1, [r4, #0]
 8004904:	2201      	movs	r2, #1
 8004906:	e02e      	b.n	8004966 <_scanf_float+0x182>
 8004908:	2b59      	cmp	r3, #89	; 0x59
 800490a:	d01e      	beq.n	800494a <_scanf_float+0x166>
 800490c:	2b61      	cmp	r3, #97	; 0x61
 800490e:	e7de      	b.n	80048ce <_scanf_float+0xea>
 8004910:	2b6e      	cmp	r3, #110	; 0x6e
 8004912:	d0e9      	beq.n	80048e8 <_scanf_float+0x104>
 8004914:	d815      	bhi.n	8004942 <_scanf_float+0x15e>
 8004916:	2b66      	cmp	r3, #102	; 0x66
 8004918:	d043      	beq.n	80049a2 <_scanf_float+0x1be>
 800491a:	2b69      	cmp	r3, #105	; 0x69
 800491c:	d19a      	bne.n	8004854 <_scanf_float+0x70>
 800491e:	f1bb 0f00 	cmp.w	fp, #0
 8004922:	d138      	bne.n	8004996 <_scanf_float+0x1b2>
 8004924:	f1b9 0f00 	cmp.w	r9, #0
 8004928:	d197      	bne.n	800485a <_scanf_float+0x76>
 800492a:	6821      	ldr	r1, [r4, #0]
 800492c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004930:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004934:	d195      	bne.n	8004862 <_scanf_float+0x7e>
 8004936:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800493a:	6021      	str	r1, [r4, #0]
 800493c:	f04f 0b01 	mov.w	fp, #1
 8004940:	e011      	b.n	8004966 <_scanf_float+0x182>
 8004942:	2b74      	cmp	r3, #116	; 0x74
 8004944:	d034      	beq.n	80049b0 <_scanf_float+0x1cc>
 8004946:	2b79      	cmp	r3, #121	; 0x79
 8004948:	d184      	bne.n	8004854 <_scanf_float+0x70>
 800494a:	f1bb 0f07 	cmp.w	fp, #7
 800494e:	d181      	bne.n	8004854 <_scanf_float+0x70>
 8004950:	f04f 0b08 	mov.w	fp, #8
 8004954:	e007      	b.n	8004966 <_scanf_float+0x182>
 8004956:	eb12 0f0b 	cmn.w	r2, fp
 800495a:	f47f af7b 	bne.w	8004854 <_scanf_float+0x70>
 800495e:	6821      	ldr	r1, [r4, #0]
 8004960:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004964:	6021      	str	r1, [r4, #0]
 8004966:	702b      	strb	r3, [r5, #0]
 8004968:	3501      	adds	r5, #1
 800496a:	e79a      	b.n	80048a2 <_scanf_float+0xbe>
 800496c:	6821      	ldr	r1, [r4, #0]
 800496e:	0608      	lsls	r0, r1, #24
 8004970:	f57f af70 	bpl.w	8004854 <_scanf_float+0x70>
 8004974:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004978:	e7f4      	b.n	8004964 <_scanf_float+0x180>
 800497a:	2a02      	cmp	r2, #2
 800497c:	d047      	beq.n	8004a0e <_scanf_float+0x22a>
 800497e:	f1bb 0f01 	cmp.w	fp, #1
 8004982:	d003      	beq.n	800498c <_scanf_float+0x1a8>
 8004984:	f1bb 0f04 	cmp.w	fp, #4
 8004988:	f47f af64 	bne.w	8004854 <_scanf_float+0x70>
 800498c:	f10b 0b01 	add.w	fp, fp, #1
 8004990:	fa5f fb8b 	uxtb.w	fp, fp
 8004994:	e7e7      	b.n	8004966 <_scanf_float+0x182>
 8004996:	f1bb 0f03 	cmp.w	fp, #3
 800499a:	d0f7      	beq.n	800498c <_scanf_float+0x1a8>
 800499c:	f1bb 0f05 	cmp.w	fp, #5
 80049a0:	e7f2      	b.n	8004988 <_scanf_float+0x1a4>
 80049a2:	f1bb 0f02 	cmp.w	fp, #2
 80049a6:	f47f af55 	bne.w	8004854 <_scanf_float+0x70>
 80049aa:	f04f 0b03 	mov.w	fp, #3
 80049ae:	e7da      	b.n	8004966 <_scanf_float+0x182>
 80049b0:	f1bb 0f06 	cmp.w	fp, #6
 80049b4:	f47f af4e 	bne.w	8004854 <_scanf_float+0x70>
 80049b8:	f04f 0b07 	mov.w	fp, #7
 80049bc:	e7d3      	b.n	8004966 <_scanf_float+0x182>
 80049be:	6821      	ldr	r1, [r4, #0]
 80049c0:	0588      	lsls	r0, r1, #22
 80049c2:	f57f af47 	bpl.w	8004854 <_scanf_float+0x70>
 80049c6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80049ca:	6021      	str	r1, [r4, #0]
 80049cc:	f8cd 9008 	str.w	r9, [sp, #8]
 80049d0:	e7c9      	b.n	8004966 <_scanf_float+0x182>
 80049d2:	6821      	ldr	r1, [r4, #0]
 80049d4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80049d8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80049dc:	d006      	beq.n	80049ec <_scanf_float+0x208>
 80049de:	0548      	lsls	r0, r1, #21
 80049e0:	f57f af38 	bpl.w	8004854 <_scanf_float+0x70>
 80049e4:	f1b9 0f00 	cmp.w	r9, #0
 80049e8:	f43f af3b 	beq.w	8004862 <_scanf_float+0x7e>
 80049ec:	0588      	lsls	r0, r1, #22
 80049ee:	bf58      	it	pl
 80049f0:	9802      	ldrpl	r0, [sp, #8]
 80049f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80049f6:	bf58      	it	pl
 80049f8:	eba9 0000 	subpl.w	r0, r9, r0
 80049fc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004a00:	bf58      	it	pl
 8004a02:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004a06:	6021      	str	r1, [r4, #0]
 8004a08:	f04f 0900 	mov.w	r9, #0
 8004a0c:	e7ab      	b.n	8004966 <_scanf_float+0x182>
 8004a0e:	2203      	movs	r2, #3
 8004a10:	e7a9      	b.n	8004966 <_scanf_float+0x182>
 8004a12:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004a16:	9205      	str	r2, [sp, #20]
 8004a18:	4631      	mov	r1, r6
 8004a1a:	4638      	mov	r0, r7
 8004a1c:	4798      	blx	r3
 8004a1e:	9a05      	ldr	r2, [sp, #20]
 8004a20:	2800      	cmp	r0, #0
 8004a22:	f43f af04 	beq.w	800482e <_scanf_float+0x4a>
 8004a26:	e715      	b.n	8004854 <_scanf_float+0x70>
 8004a28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a2c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004a30:	4632      	mov	r2, r6
 8004a32:	4638      	mov	r0, r7
 8004a34:	4798      	blx	r3
 8004a36:	6923      	ldr	r3, [r4, #16]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	6123      	str	r3, [r4, #16]
 8004a3c:	e715      	b.n	800486a <_scanf_float+0x86>
 8004a3e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	d80a      	bhi.n	8004a5c <_scanf_float+0x278>
 8004a46:	f1bb 0f02 	cmp.w	fp, #2
 8004a4a:	d968      	bls.n	8004b1e <_scanf_float+0x33a>
 8004a4c:	f1ab 0b03 	sub.w	fp, fp, #3
 8004a50:	fa5f fb8b 	uxtb.w	fp, fp
 8004a54:	eba5 0b0b 	sub.w	fp, r5, fp
 8004a58:	455d      	cmp	r5, fp
 8004a5a:	d14b      	bne.n	8004af4 <_scanf_float+0x310>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	05da      	lsls	r2, r3, #23
 8004a60:	d51f      	bpl.n	8004aa2 <_scanf_float+0x2be>
 8004a62:	055b      	lsls	r3, r3, #21
 8004a64:	d468      	bmi.n	8004b38 <_scanf_float+0x354>
 8004a66:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004a6a:	6923      	ldr	r3, [r4, #16]
 8004a6c:	2965      	cmp	r1, #101	; 0x65
 8004a6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a72:	f105 3bff 	add.w	fp, r5, #4294967295
 8004a76:	6123      	str	r3, [r4, #16]
 8004a78:	d00d      	beq.n	8004a96 <_scanf_float+0x2b2>
 8004a7a:	2945      	cmp	r1, #69	; 0x45
 8004a7c:	d00b      	beq.n	8004a96 <_scanf_float+0x2b2>
 8004a7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a82:	4632      	mov	r2, r6
 8004a84:	4638      	mov	r0, r7
 8004a86:	4798      	blx	r3
 8004a88:	6923      	ldr	r3, [r4, #16]
 8004a8a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	f1a5 0b02 	sub.w	fp, r5, #2
 8004a94:	6123      	str	r3, [r4, #16]
 8004a96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a9a:	4632      	mov	r2, r6
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	4798      	blx	r3
 8004aa0:	465d      	mov	r5, fp
 8004aa2:	6826      	ldr	r6, [r4, #0]
 8004aa4:	f016 0610 	ands.w	r6, r6, #16
 8004aa8:	d17a      	bne.n	8004ba0 <_scanf_float+0x3bc>
 8004aaa:	702e      	strb	r6, [r5, #0]
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab6:	d142      	bne.n	8004b3e <_scanf_float+0x35a>
 8004ab8:	9b02      	ldr	r3, [sp, #8]
 8004aba:	eba9 0303 	sub.w	r3, r9, r3
 8004abe:	425a      	negs	r2, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d149      	bne.n	8004b58 <_scanf_float+0x374>
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	4638      	mov	r0, r7
 8004aca:	f000 fea5 	bl	8005818 <_strtod_r>
 8004ace:	6825      	ldr	r5, [r4, #0]
 8004ad0:	f8da 3000 	ldr.w	r3, [sl]
 8004ad4:	f015 0f02 	tst.w	r5, #2
 8004ad8:	f103 0204 	add.w	r2, r3, #4
 8004adc:	ec59 8b10 	vmov	r8, r9, d0
 8004ae0:	f8ca 2000 	str.w	r2, [sl]
 8004ae4:	d043      	beq.n	8004b6e <_scanf_float+0x38a>
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	e9c3 8900 	strd	r8, r9, [r3]
 8004aec:	68e3      	ldr	r3, [r4, #12]
 8004aee:	3301      	adds	r3, #1
 8004af0:	60e3      	str	r3, [r4, #12]
 8004af2:	e6be      	b.n	8004872 <_scanf_float+0x8e>
 8004af4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004af8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004afc:	4632      	mov	r2, r6
 8004afe:	4638      	mov	r0, r7
 8004b00:	4798      	blx	r3
 8004b02:	6923      	ldr	r3, [r4, #16]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	6123      	str	r3, [r4, #16]
 8004b08:	e7a6      	b.n	8004a58 <_scanf_float+0x274>
 8004b0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b0e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004b12:	4632      	mov	r2, r6
 8004b14:	4638      	mov	r0, r7
 8004b16:	4798      	blx	r3
 8004b18:	6923      	ldr	r3, [r4, #16]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	6123      	str	r3, [r4, #16]
 8004b1e:	4545      	cmp	r5, r8
 8004b20:	d8f3      	bhi.n	8004b0a <_scanf_float+0x326>
 8004b22:	e6a5      	b.n	8004870 <_scanf_float+0x8c>
 8004b24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b28:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004b2c:	4632      	mov	r2, r6
 8004b2e:	4638      	mov	r0, r7
 8004b30:	4798      	blx	r3
 8004b32:	6923      	ldr	r3, [r4, #16]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	6123      	str	r3, [r4, #16]
 8004b38:	4545      	cmp	r5, r8
 8004b3a:	d8f3      	bhi.n	8004b24 <_scanf_float+0x340>
 8004b3c:	e698      	b.n	8004870 <_scanf_float+0x8c>
 8004b3e:	9b03      	ldr	r3, [sp, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0bf      	beq.n	8004ac4 <_scanf_float+0x2e0>
 8004b44:	9904      	ldr	r1, [sp, #16]
 8004b46:	230a      	movs	r3, #10
 8004b48:	4632      	mov	r2, r6
 8004b4a:	3101      	adds	r1, #1
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	f000 feef 	bl	8005930 <_strtol_r>
 8004b52:	9b03      	ldr	r3, [sp, #12]
 8004b54:	9d04      	ldr	r5, [sp, #16]
 8004b56:	1ac2      	subs	r2, r0, r3
 8004b58:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004b5c:	429d      	cmp	r5, r3
 8004b5e:	bf28      	it	cs
 8004b60:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004b64:	490f      	ldr	r1, [pc, #60]	; (8004ba4 <_scanf_float+0x3c0>)
 8004b66:	4628      	mov	r0, r5
 8004b68:	f000 f824 	bl	8004bb4 <siprintf>
 8004b6c:	e7aa      	b.n	8004ac4 <_scanf_float+0x2e0>
 8004b6e:	f015 0504 	ands.w	r5, r5, #4
 8004b72:	d1b8      	bne.n	8004ae6 <_scanf_float+0x302>
 8004b74:	681f      	ldr	r7, [r3, #0]
 8004b76:	ee10 2a10 	vmov	r2, s0
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	ee10 0a10 	vmov	r0, s0
 8004b80:	4649      	mov	r1, r9
 8004b82:	f7fb ffd3 	bl	8000b2c <__aeabi_dcmpun>
 8004b86:	b128      	cbz	r0, 8004b94 <_scanf_float+0x3b0>
 8004b88:	4628      	mov	r0, r5
 8004b8a:	f000 f80d 	bl	8004ba8 <nanf>
 8004b8e:	ed87 0a00 	vstr	s0, [r7]
 8004b92:	e7ab      	b.n	8004aec <_scanf_float+0x308>
 8004b94:	4640      	mov	r0, r8
 8004b96:	4649      	mov	r1, r9
 8004b98:	f7fc f826 	bl	8000be8 <__aeabi_d2f>
 8004b9c:	6038      	str	r0, [r7, #0]
 8004b9e:	e7a5      	b.n	8004aec <_scanf_float+0x308>
 8004ba0:	2600      	movs	r6, #0
 8004ba2:	e666      	b.n	8004872 <_scanf_float+0x8e>
 8004ba4:	08007a44 	.word	0x08007a44

08004ba8 <nanf>:
 8004ba8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004bb0 <nanf+0x8>
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	7fc00000 	.word	0x7fc00000

08004bb4 <siprintf>:
 8004bb4:	b40e      	push	{r1, r2, r3}
 8004bb6:	b500      	push	{lr}
 8004bb8:	b09c      	sub	sp, #112	; 0x70
 8004bba:	ab1d      	add	r3, sp, #116	; 0x74
 8004bbc:	9002      	str	r0, [sp, #8]
 8004bbe:	9006      	str	r0, [sp, #24]
 8004bc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bc4:	4809      	ldr	r0, [pc, #36]	; (8004bec <siprintf+0x38>)
 8004bc6:	9107      	str	r1, [sp, #28]
 8004bc8:	9104      	str	r1, [sp, #16]
 8004bca:	4909      	ldr	r1, [pc, #36]	; (8004bf0 <siprintf+0x3c>)
 8004bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bd0:	9105      	str	r1, [sp, #20]
 8004bd2:	6800      	ldr	r0, [r0, #0]
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	a902      	add	r1, sp, #8
 8004bd8:	f002 fd70 	bl	80076bc <_svfiprintf_r>
 8004bdc:	9b02      	ldr	r3, [sp, #8]
 8004bde:	2200      	movs	r2, #0
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	b01c      	add	sp, #112	; 0x70
 8004be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004be8:	b003      	add	sp, #12
 8004bea:	4770      	bx	lr
 8004bec:	2000000c 	.word	0x2000000c
 8004bf0:	ffff0208 	.word	0xffff0208

08004bf4 <sulp>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	460d      	mov	r5, r1
 8004bfa:	ec45 4b10 	vmov	d0, r4, r5
 8004bfe:	4616      	mov	r6, r2
 8004c00:	f002 fb18 	bl	8007234 <__ulp>
 8004c04:	ec51 0b10 	vmov	r0, r1, d0
 8004c08:	b17e      	cbz	r6, 8004c2a <sulp+0x36>
 8004c0a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004c0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	dd09      	ble.n	8004c2a <sulp+0x36>
 8004c16:	051b      	lsls	r3, r3, #20
 8004c18:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004c1c:	2400      	movs	r4, #0
 8004c1e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004c22:	4622      	mov	r2, r4
 8004c24:	462b      	mov	r3, r5
 8004c26:	f7fb fce7 	bl	80005f8 <__aeabi_dmul>
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}
 8004c2c:	0000      	movs	r0, r0
	...

08004c30 <_strtod_l>:
 8004c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c34:	461f      	mov	r7, r3
 8004c36:	b0a1      	sub	sp, #132	; 0x84
 8004c38:	2300      	movs	r3, #0
 8004c3a:	4681      	mov	r9, r0
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	460e      	mov	r6, r1
 8004c40:	9217      	str	r2, [sp, #92]	; 0x5c
 8004c42:	931c      	str	r3, [sp, #112]	; 0x70
 8004c44:	f001 fff5 	bl	8006c32 <__localeconv_l>
 8004c48:	4680      	mov	r8, r0
 8004c4a:	6800      	ldr	r0, [r0, #0]
 8004c4c:	f7fb fac0 	bl	80001d0 <strlen>
 8004c50:	f04f 0a00 	mov.w	sl, #0
 8004c54:	4604      	mov	r4, r0
 8004c56:	f04f 0b00 	mov.w	fp, #0
 8004c5a:	961b      	str	r6, [sp, #108]	; 0x6c
 8004c5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c5e:	781a      	ldrb	r2, [r3, #0]
 8004c60:	2a0d      	cmp	r2, #13
 8004c62:	d832      	bhi.n	8004cca <_strtod_l+0x9a>
 8004c64:	2a09      	cmp	r2, #9
 8004c66:	d236      	bcs.n	8004cd6 <_strtod_l+0xa6>
 8004c68:	2a00      	cmp	r2, #0
 8004c6a:	d03e      	beq.n	8004cea <_strtod_l+0xba>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	930d      	str	r3, [sp, #52]	; 0x34
 8004c70:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004c72:	782b      	ldrb	r3, [r5, #0]
 8004c74:	2b30      	cmp	r3, #48	; 0x30
 8004c76:	f040 80ac 	bne.w	8004dd2 <_strtod_l+0x1a2>
 8004c7a:	786b      	ldrb	r3, [r5, #1]
 8004c7c:	2b58      	cmp	r3, #88	; 0x58
 8004c7e:	d001      	beq.n	8004c84 <_strtod_l+0x54>
 8004c80:	2b78      	cmp	r3, #120	; 0x78
 8004c82:	d167      	bne.n	8004d54 <_strtod_l+0x124>
 8004c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c86:	9301      	str	r3, [sp, #4]
 8004c88:	ab1c      	add	r3, sp, #112	; 0x70
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	9702      	str	r7, [sp, #8]
 8004c8e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c90:	4a88      	ldr	r2, [pc, #544]	; (8004eb4 <_strtod_l+0x284>)
 8004c92:	a91b      	add	r1, sp, #108	; 0x6c
 8004c94:	4648      	mov	r0, r9
 8004c96:	f001 fcf2 	bl	800667e <__gethex>
 8004c9a:	f010 0407 	ands.w	r4, r0, #7
 8004c9e:	4606      	mov	r6, r0
 8004ca0:	d005      	beq.n	8004cae <_strtod_l+0x7e>
 8004ca2:	2c06      	cmp	r4, #6
 8004ca4:	d12b      	bne.n	8004cfe <_strtod_l+0xce>
 8004ca6:	3501      	adds	r5, #1
 8004ca8:	2300      	movs	r3, #0
 8004caa:	951b      	str	r5, [sp, #108]	; 0x6c
 8004cac:	930d      	str	r3, [sp, #52]	; 0x34
 8004cae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f040 859a 	bne.w	80057ea <_strtod_l+0xbba>
 8004cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cb8:	b1e3      	cbz	r3, 8004cf4 <_strtod_l+0xc4>
 8004cba:	4652      	mov	r2, sl
 8004cbc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004cc0:	ec43 2b10 	vmov	d0, r2, r3
 8004cc4:	b021      	add	sp, #132	; 0x84
 8004cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cca:	2a2b      	cmp	r2, #43	; 0x2b
 8004ccc:	d015      	beq.n	8004cfa <_strtod_l+0xca>
 8004cce:	2a2d      	cmp	r2, #45	; 0x2d
 8004cd0:	d004      	beq.n	8004cdc <_strtod_l+0xac>
 8004cd2:	2a20      	cmp	r2, #32
 8004cd4:	d1ca      	bne.n	8004c6c <_strtod_l+0x3c>
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	931b      	str	r3, [sp, #108]	; 0x6c
 8004cda:	e7bf      	b.n	8004c5c <_strtod_l+0x2c>
 8004cdc:	2201      	movs	r2, #1
 8004cde:	920d      	str	r2, [sp, #52]	; 0x34
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	921b      	str	r2, [sp, #108]	; 0x6c
 8004ce4:	785b      	ldrb	r3, [r3, #1]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1c2      	bne.n	8004c70 <_strtod_l+0x40>
 8004cea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004cec:	961b      	str	r6, [sp, #108]	; 0x6c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f040 8579 	bne.w	80057e6 <_strtod_l+0xbb6>
 8004cf4:	4652      	mov	r2, sl
 8004cf6:	465b      	mov	r3, fp
 8004cf8:	e7e2      	b.n	8004cc0 <_strtod_l+0x90>
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	e7ef      	b.n	8004cde <_strtod_l+0xae>
 8004cfe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004d00:	b13a      	cbz	r2, 8004d12 <_strtod_l+0xe2>
 8004d02:	2135      	movs	r1, #53	; 0x35
 8004d04:	a81e      	add	r0, sp, #120	; 0x78
 8004d06:	f002 fb8d 	bl	8007424 <__copybits>
 8004d0a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d0c:	4648      	mov	r0, r9
 8004d0e:	f001 fffa 	bl	8006d06 <_Bfree>
 8004d12:	3c01      	subs	r4, #1
 8004d14:	2c04      	cmp	r4, #4
 8004d16:	d806      	bhi.n	8004d26 <_strtod_l+0xf6>
 8004d18:	e8df f004 	tbb	[pc, r4]
 8004d1c:	1714030a 	.word	0x1714030a
 8004d20:	0a          	.byte	0x0a
 8004d21:	00          	.byte	0x00
 8004d22:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8004d26:	0730      	lsls	r0, r6, #28
 8004d28:	d5c1      	bpl.n	8004cae <_strtod_l+0x7e>
 8004d2a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004d2e:	e7be      	b.n	8004cae <_strtod_l+0x7e>
 8004d30:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8004d34:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004d36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d3a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004d3e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004d42:	e7f0      	b.n	8004d26 <_strtod_l+0xf6>
 8004d44:	f8df b170 	ldr.w	fp, [pc, #368]	; 8004eb8 <_strtod_l+0x288>
 8004d48:	e7ed      	b.n	8004d26 <_strtod_l+0xf6>
 8004d4a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004d4e:	f04f 3aff 	mov.w	sl, #4294967295
 8004d52:	e7e8      	b.n	8004d26 <_strtod_l+0xf6>
 8004d54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	921b      	str	r2, [sp, #108]	; 0x6c
 8004d5a:	785b      	ldrb	r3, [r3, #1]
 8004d5c:	2b30      	cmp	r3, #48	; 0x30
 8004d5e:	d0f9      	beq.n	8004d54 <_strtod_l+0x124>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0a4      	beq.n	8004cae <_strtod_l+0x7e>
 8004d64:	2301      	movs	r3, #1
 8004d66:	2500      	movs	r5, #0
 8004d68:	9306      	str	r3, [sp, #24]
 8004d6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d6c:	9308      	str	r3, [sp, #32]
 8004d6e:	9507      	str	r5, [sp, #28]
 8004d70:	9505      	str	r5, [sp, #20]
 8004d72:	220a      	movs	r2, #10
 8004d74:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004d76:	7807      	ldrb	r7, [r0, #0]
 8004d78:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004d7c:	b2d9      	uxtb	r1, r3
 8004d7e:	2909      	cmp	r1, #9
 8004d80:	d929      	bls.n	8004dd6 <_strtod_l+0x1a6>
 8004d82:	4622      	mov	r2, r4
 8004d84:	f8d8 1000 	ldr.w	r1, [r8]
 8004d88:	f002 fda0 	bl	80078cc <strncmp>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	d031      	beq.n	8004df4 <_strtod_l+0x1c4>
 8004d90:	2000      	movs	r0, #0
 8004d92:	9c05      	ldr	r4, [sp, #20]
 8004d94:	9004      	str	r0, [sp, #16]
 8004d96:	463b      	mov	r3, r7
 8004d98:	4602      	mov	r2, r0
 8004d9a:	2b65      	cmp	r3, #101	; 0x65
 8004d9c:	d001      	beq.n	8004da2 <_strtod_l+0x172>
 8004d9e:	2b45      	cmp	r3, #69	; 0x45
 8004da0:	d114      	bne.n	8004dcc <_strtod_l+0x19c>
 8004da2:	b924      	cbnz	r4, 8004dae <_strtod_l+0x17e>
 8004da4:	b910      	cbnz	r0, 8004dac <_strtod_l+0x17c>
 8004da6:	9b06      	ldr	r3, [sp, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d09e      	beq.n	8004cea <_strtod_l+0xba>
 8004dac:	2400      	movs	r4, #0
 8004dae:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004db0:	1c73      	adds	r3, r6, #1
 8004db2:	931b      	str	r3, [sp, #108]	; 0x6c
 8004db4:	7873      	ldrb	r3, [r6, #1]
 8004db6:	2b2b      	cmp	r3, #43	; 0x2b
 8004db8:	d078      	beq.n	8004eac <_strtod_l+0x27c>
 8004dba:	2b2d      	cmp	r3, #45	; 0x2d
 8004dbc:	d070      	beq.n	8004ea0 <_strtod_l+0x270>
 8004dbe:	f04f 0c00 	mov.w	ip, #0
 8004dc2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004dc6:	2f09      	cmp	r7, #9
 8004dc8:	d97c      	bls.n	8004ec4 <_strtod_l+0x294>
 8004dca:	961b      	str	r6, [sp, #108]	; 0x6c
 8004dcc:	f04f 0e00 	mov.w	lr, #0
 8004dd0:	e09a      	b.n	8004f08 <_strtod_l+0x2d8>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e7c7      	b.n	8004d66 <_strtod_l+0x136>
 8004dd6:	9905      	ldr	r1, [sp, #20]
 8004dd8:	2908      	cmp	r1, #8
 8004dda:	bfdd      	ittte	le
 8004ddc:	9907      	ldrle	r1, [sp, #28]
 8004dde:	fb02 3301 	mlale	r3, r2, r1, r3
 8004de2:	9307      	strle	r3, [sp, #28]
 8004de4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004de8:	9b05      	ldr	r3, [sp, #20]
 8004dea:	3001      	adds	r0, #1
 8004dec:	3301      	adds	r3, #1
 8004dee:	9305      	str	r3, [sp, #20]
 8004df0:	901b      	str	r0, [sp, #108]	; 0x6c
 8004df2:	e7bf      	b.n	8004d74 <_strtod_l+0x144>
 8004df4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004df6:	191a      	adds	r2, r3, r4
 8004df8:	921b      	str	r2, [sp, #108]	; 0x6c
 8004dfa:	9a05      	ldr	r2, [sp, #20]
 8004dfc:	5d1b      	ldrb	r3, [r3, r4]
 8004dfe:	2a00      	cmp	r2, #0
 8004e00:	d037      	beq.n	8004e72 <_strtod_l+0x242>
 8004e02:	9c05      	ldr	r4, [sp, #20]
 8004e04:	4602      	mov	r2, r0
 8004e06:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004e0a:	2909      	cmp	r1, #9
 8004e0c:	d913      	bls.n	8004e36 <_strtod_l+0x206>
 8004e0e:	2101      	movs	r1, #1
 8004e10:	9104      	str	r1, [sp, #16]
 8004e12:	e7c2      	b.n	8004d9a <_strtod_l+0x16a>
 8004e14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	921b      	str	r2, [sp, #108]	; 0x6c
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	2b30      	cmp	r3, #48	; 0x30
 8004e20:	d0f8      	beq.n	8004e14 <_strtod_l+0x1e4>
 8004e22:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004e26:	2a08      	cmp	r2, #8
 8004e28:	f200 84e4 	bhi.w	80057f4 <_strtod_l+0xbc4>
 8004e2c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004e2e:	9208      	str	r2, [sp, #32]
 8004e30:	4602      	mov	r2, r0
 8004e32:	2000      	movs	r0, #0
 8004e34:	4604      	mov	r4, r0
 8004e36:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8004e3a:	f100 0101 	add.w	r1, r0, #1
 8004e3e:	d012      	beq.n	8004e66 <_strtod_l+0x236>
 8004e40:	440a      	add	r2, r1
 8004e42:	eb00 0c04 	add.w	ip, r0, r4
 8004e46:	4621      	mov	r1, r4
 8004e48:	270a      	movs	r7, #10
 8004e4a:	458c      	cmp	ip, r1
 8004e4c:	d113      	bne.n	8004e76 <_strtod_l+0x246>
 8004e4e:	1821      	adds	r1, r4, r0
 8004e50:	2908      	cmp	r1, #8
 8004e52:	f104 0401 	add.w	r4, r4, #1
 8004e56:	4404      	add	r4, r0
 8004e58:	dc19      	bgt.n	8004e8e <_strtod_l+0x25e>
 8004e5a:	9b07      	ldr	r3, [sp, #28]
 8004e5c:	210a      	movs	r1, #10
 8004e5e:	fb01 e303 	mla	r3, r1, r3, lr
 8004e62:	9307      	str	r3, [sp, #28]
 8004e64:	2100      	movs	r1, #0
 8004e66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e68:	1c58      	adds	r0, r3, #1
 8004e6a:	901b      	str	r0, [sp, #108]	; 0x6c
 8004e6c:	785b      	ldrb	r3, [r3, #1]
 8004e6e:	4608      	mov	r0, r1
 8004e70:	e7c9      	b.n	8004e06 <_strtod_l+0x1d6>
 8004e72:	9805      	ldr	r0, [sp, #20]
 8004e74:	e7d3      	b.n	8004e1e <_strtod_l+0x1ee>
 8004e76:	2908      	cmp	r1, #8
 8004e78:	f101 0101 	add.w	r1, r1, #1
 8004e7c:	dc03      	bgt.n	8004e86 <_strtod_l+0x256>
 8004e7e:	9b07      	ldr	r3, [sp, #28]
 8004e80:	437b      	muls	r3, r7
 8004e82:	9307      	str	r3, [sp, #28]
 8004e84:	e7e1      	b.n	8004e4a <_strtod_l+0x21a>
 8004e86:	2910      	cmp	r1, #16
 8004e88:	bfd8      	it	le
 8004e8a:	437d      	mulle	r5, r7
 8004e8c:	e7dd      	b.n	8004e4a <_strtod_l+0x21a>
 8004e8e:	2c10      	cmp	r4, #16
 8004e90:	bfdc      	itt	le
 8004e92:	210a      	movle	r1, #10
 8004e94:	fb01 e505 	mlale	r5, r1, r5, lr
 8004e98:	e7e4      	b.n	8004e64 <_strtod_l+0x234>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	9304      	str	r3, [sp, #16]
 8004e9e:	e781      	b.n	8004da4 <_strtod_l+0x174>
 8004ea0:	f04f 0c01 	mov.w	ip, #1
 8004ea4:	1cb3      	adds	r3, r6, #2
 8004ea6:	931b      	str	r3, [sp, #108]	; 0x6c
 8004ea8:	78b3      	ldrb	r3, [r6, #2]
 8004eaa:	e78a      	b.n	8004dc2 <_strtod_l+0x192>
 8004eac:	f04f 0c00 	mov.w	ip, #0
 8004eb0:	e7f8      	b.n	8004ea4 <_strtod_l+0x274>
 8004eb2:	bf00      	nop
 8004eb4:	08007a4c 	.word	0x08007a4c
 8004eb8:	7ff00000 	.word	0x7ff00000
 8004ebc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ebe:	1c5f      	adds	r7, r3, #1
 8004ec0:	971b      	str	r7, [sp, #108]	; 0x6c
 8004ec2:	785b      	ldrb	r3, [r3, #1]
 8004ec4:	2b30      	cmp	r3, #48	; 0x30
 8004ec6:	d0f9      	beq.n	8004ebc <_strtod_l+0x28c>
 8004ec8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8004ecc:	2f08      	cmp	r7, #8
 8004ece:	f63f af7d 	bhi.w	8004dcc <_strtod_l+0x19c>
 8004ed2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004ed6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ed8:	930a      	str	r3, [sp, #40]	; 0x28
 8004eda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004edc:	1c5f      	adds	r7, r3, #1
 8004ede:	971b      	str	r7, [sp, #108]	; 0x6c
 8004ee0:	785b      	ldrb	r3, [r3, #1]
 8004ee2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004ee6:	f1b8 0f09 	cmp.w	r8, #9
 8004eea:	d937      	bls.n	8004f5c <_strtod_l+0x32c>
 8004eec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004eee:	1a7f      	subs	r7, r7, r1
 8004ef0:	2f08      	cmp	r7, #8
 8004ef2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004ef6:	dc37      	bgt.n	8004f68 <_strtod_l+0x338>
 8004ef8:	45be      	cmp	lr, r7
 8004efa:	bfa8      	it	ge
 8004efc:	46be      	movge	lr, r7
 8004efe:	f1bc 0f00 	cmp.w	ip, #0
 8004f02:	d001      	beq.n	8004f08 <_strtod_l+0x2d8>
 8004f04:	f1ce 0e00 	rsb	lr, lr, #0
 8004f08:	2c00      	cmp	r4, #0
 8004f0a:	d151      	bne.n	8004fb0 <_strtod_l+0x380>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	f47f aece 	bne.w	8004cae <_strtod_l+0x7e>
 8004f12:	9a06      	ldr	r2, [sp, #24]
 8004f14:	2a00      	cmp	r2, #0
 8004f16:	f47f aeca 	bne.w	8004cae <_strtod_l+0x7e>
 8004f1a:	9a04      	ldr	r2, [sp, #16]
 8004f1c:	2a00      	cmp	r2, #0
 8004f1e:	f47f aee4 	bne.w	8004cea <_strtod_l+0xba>
 8004f22:	2b4e      	cmp	r3, #78	; 0x4e
 8004f24:	d027      	beq.n	8004f76 <_strtod_l+0x346>
 8004f26:	dc21      	bgt.n	8004f6c <_strtod_l+0x33c>
 8004f28:	2b49      	cmp	r3, #73	; 0x49
 8004f2a:	f47f aede 	bne.w	8004cea <_strtod_l+0xba>
 8004f2e:	49a0      	ldr	r1, [pc, #640]	; (80051b0 <_strtod_l+0x580>)
 8004f30:	a81b      	add	r0, sp, #108	; 0x6c
 8004f32:	f001 fdd7 	bl	8006ae4 <__match>
 8004f36:	2800      	cmp	r0, #0
 8004f38:	f43f aed7 	beq.w	8004cea <_strtod_l+0xba>
 8004f3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f3e:	499d      	ldr	r1, [pc, #628]	; (80051b4 <_strtod_l+0x584>)
 8004f40:	3b01      	subs	r3, #1
 8004f42:	a81b      	add	r0, sp, #108	; 0x6c
 8004f44:	931b      	str	r3, [sp, #108]	; 0x6c
 8004f46:	f001 fdcd 	bl	8006ae4 <__match>
 8004f4a:	b910      	cbnz	r0, 8004f52 <_strtod_l+0x322>
 8004f4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f4e:	3301      	adds	r3, #1
 8004f50:	931b      	str	r3, [sp, #108]	; 0x6c
 8004f52:	f8df b274 	ldr.w	fp, [pc, #628]	; 80051c8 <_strtod_l+0x598>
 8004f56:	f04f 0a00 	mov.w	sl, #0
 8004f5a:	e6a8      	b.n	8004cae <_strtod_l+0x7e>
 8004f5c:	210a      	movs	r1, #10
 8004f5e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004f62:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004f66:	e7b8      	b.n	8004eda <_strtod_l+0x2aa>
 8004f68:	46be      	mov	lr, r7
 8004f6a:	e7c8      	b.n	8004efe <_strtod_l+0x2ce>
 8004f6c:	2b69      	cmp	r3, #105	; 0x69
 8004f6e:	d0de      	beq.n	8004f2e <_strtod_l+0x2fe>
 8004f70:	2b6e      	cmp	r3, #110	; 0x6e
 8004f72:	f47f aeba 	bne.w	8004cea <_strtod_l+0xba>
 8004f76:	4990      	ldr	r1, [pc, #576]	; (80051b8 <_strtod_l+0x588>)
 8004f78:	a81b      	add	r0, sp, #108	; 0x6c
 8004f7a:	f001 fdb3 	bl	8006ae4 <__match>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	f43f aeb3 	beq.w	8004cea <_strtod_l+0xba>
 8004f84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b28      	cmp	r3, #40	; 0x28
 8004f8a:	d10e      	bne.n	8004faa <_strtod_l+0x37a>
 8004f8c:	aa1e      	add	r2, sp, #120	; 0x78
 8004f8e:	498b      	ldr	r1, [pc, #556]	; (80051bc <_strtod_l+0x58c>)
 8004f90:	a81b      	add	r0, sp, #108	; 0x6c
 8004f92:	f001 fdbb 	bl	8006b0c <__hexnan>
 8004f96:	2805      	cmp	r0, #5
 8004f98:	d107      	bne.n	8004faa <_strtod_l+0x37a>
 8004f9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004f9c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8004fa0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004fa4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004fa8:	e681      	b.n	8004cae <_strtod_l+0x7e>
 8004faa:	f8df b224 	ldr.w	fp, [pc, #548]	; 80051d0 <_strtod_l+0x5a0>
 8004fae:	e7d2      	b.n	8004f56 <_strtod_l+0x326>
 8004fb0:	ebae 0302 	sub.w	r3, lr, r2
 8004fb4:	9306      	str	r3, [sp, #24]
 8004fb6:	9b05      	ldr	r3, [sp, #20]
 8004fb8:	9807      	ldr	r0, [sp, #28]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	bf08      	it	eq
 8004fbe:	4623      	moveq	r3, r4
 8004fc0:	2c10      	cmp	r4, #16
 8004fc2:	9305      	str	r3, [sp, #20]
 8004fc4:	46a0      	mov	r8, r4
 8004fc6:	bfa8      	it	ge
 8004fc8:	f04f 0810 	movge.w	r8, #16
 8004fcc:	f7fb fa9a 	bl	8000504 <__aeabi_ui2d>
 8004fd0:	2c09      	cmp	r4, #9
 8004fd2:	4682      	mov	sl, r0
 8004fd4:	468b      	mov	fp, r1
 8004fd6:	dc13      	bgt.n	8005000 <_strtod_l+0x3d0>
 8004fd8:	9b06      	ldr	r3, [sp, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f43f ae67 	beq.w	8004cae <_strtod_l+0x7e>
 8004fe0:	9b06      	ldr	r3, [sp, #24]
 8004fe2:	dd7a      	ble.n	80050da <_strtod_l+0x4aa>
 8004fe4:	2b16      	cmp	r3, #22
 8004fe6:	dc61      	bgt.n	80050ac <_strtod_l+0x47c>
 8004fe8:	4a75      	ldr	r2, [pc, #468]	; (80051c0 <_strtod_l+0x590>)
 8004fea:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004fee:	e9de 0100 	ldrd	r0, r1, [lr]
 8004ff2:	4652      	mov	r2, sl
 8004ff4:	465b      	mov	r3, fp
 8004ff6:	f7fb faff 	bl	80005f8 <__aeabi_dmul>
 8004ffa:	4682      	mov	sl, r0
 8004ffc:	468b      	mov	fp, r1
 8004ffe:	e656      	b.n	8004cae <_strtod_l+0x7e>
 8005000:	4b6f      	ldr	r3, [pc, #444]	; (80051c0 <_strtod_l+0x590>)
 8005002:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005006:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800500a:	f7fb faf5 	bl	80005f8 <__aeabi_dmul>
 800500e:	4606      	mov	r6, r0
 8005010:	4628      	mov	r0, r5
 8005012:	460f      	mov	r7, r1
 8005014:	f7fb fa76 	bl	8000504 <__aeabi_ui2d>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4630      	mov	r0, r6
 800501e:	4639      	mov	r1, r7
 8005020:	f7fb f934 	bl	800028c <__adddf3>
 8005024:	2c0f      	cmp	r4, #15
 8005026:	4682      	mov	sl, r0
 8005028:	468b      	mov	fp, r1
 800502a:	ddd5      	ble.n	8004fd8 <_strtod_l+0x3a8>
 800502c:	9b06      	ldr	r3, [sp, #24]
 800502e:	eba4 0808 	sub.w	r8, r4, r8
 8005032:	4498      	add	r8, r3
 8005034:	f1b8 0f00 	cmp.w	r8, #0
 8005038:	f340 8096 	ble.w	8005168 <_strtod_l+0x538>
 800503c:	f018 030f 	ands.w	r3, r8, #15
 8005040:	d00a      	beq.n	8005058 <_strtod_l+0x428>
 8005042:	495f      	ldr	r1, [pc, #380]	; (80051c0 <_strtod_l+0x590>)
 8005044:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005048:	4652      	mov	r2, sl
 800504a:	465b      	mov	r3, fp
 800504c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005050:	f7fb fad2 	bl	80005f8 <__aeabi_dmul>
 8005054:	4682      	mov	sl, r0
 8005056:	468b      	mov	fp, r1
 8005058:	f038 080f 	bics.w	r8, r8, #15
 800505c:	d073      	beq.n	8005146 <_strtod_l+0x516>
 800505e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005062:	dd47      	ble.n	80050f4 <_strtod_l+0x4c4>
 8005064:	2400      	movs	r4, #0
 8005066:	46a0      	mov	r8, r4
 8005068:	9407      	str	r4, [sp, #28]
 800506a:	9405      	str	r4, [sp, #20]
 800506c:	2322      	movs	r3, #34	; 0x22
 800506e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80051c8 <_strtod_l+0x598>
 8005072:	f8c9 3000 	str.w	r3, [r9]
 8005076:	f04f 0a00 	mov.w	sl, #0
 800507a:	9b07      	ldr	r3, [sp, #28]
 800507c:	2b00      	cmp	r3, #0
 800507e:	f43f ae16 	beq.w	8004cae <_strtod_l+0x7e>
 8005082:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005084:	4648      	mov	r0, r9
 8005086:	f001 fe3e 	bl	8006d06 <_Bfree>
 800508a:	9905      	ldr	r1, [sp, #20]
 800508c:	4648      	mov	r0, r9
 800508e:	f001 fe3a 	bl	8006d06 <_Bfree>
 8005092:	4641      	mov	r1, r8
 8005094:	4648      	mov	r0, r9
 8005096:	f001 fe36 	bl	8006d06 <_Bfree>
 800509a:	9907      	ldr	r1, [sp, #28]
 800509c:	4648      	mov	r0, r9
 800509e:	f001 fe32 	bl	8006d06 <_Bfree>
 80050a2:	4621      	mov	r1, r4
 80050a4:	4648      	mov	r0, r9
 80050a6:	f001 fe2e 	bl	8006d06 <_Bfree>
 80050aa:	e600      	b.n	8004cae <_strtod_l+0x7e>
 80050ac:	9a06      	ldr	r2, [sp, #24]
 80050ae:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80050b2:	4293      	cmp	r3, r2
 80050b4:	dbba      	blt.n	800502c <_strtod_l+0x3fc>
 80050b6:	4d42      	ldr	r5, [pc, #264]	; (80051c0 <_strtod_l+0x590>)
 80050b8:	f1c4 040f 	rsb	r4, r4, #15
 80050bc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80050c0:	4652      	mov	r2, sl
 80050c2:	465b      	mov	r3, fp
 80050c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050c8:	f7fb fa96 	bl	80005f8 <__aeabi_dmul>
 80050cc:	9b06      	ldr	r3, [sp, #24]
 80050ce:	1b1c      	subs	r4, r3, r4
 80050d0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80050d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050d8:	e78d      	b.n	8004ff6 <_strtod_l+0x3c6>
 80050da:	f113 0f16 	cmn.w	r3, #22
 80050de:	dba5      	blt.n	800502c <_strtod_l+0x3fc>
 80050e0:	4a37      	ldr	r2, [pc, #220]	; (80051c0 <_strtod_l+0x590>)
 80050e2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80050e6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80050ea:	4650      	mov	r0, sl
 80050ec:	4659      	mov	r1, fp
 80050ee:	f7fb fbad 	bl	800084c <__aeabi_ddiv>
 80050f2:	e782      	b.n	8004ffa <_strtod_l+0x3ca>
 80050f4:	2300      	movs	r3, #0
 80050f6:	4e33      	ldr	r6, [pc, #204]	; (80051c4 <_strtod_l+0x594>)
 80050f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80050fc:	4650      	mov	r0, sl
 80050fe:	4659      	mov	r1, fp
 8005100:	461d      	mov	r5, r3
 8005102:	f1b8 0f01 	cmp.w	r8, #1
 8005106:	dc21      	bgt.n	800514c <_strtod_l+0x51c>
 8005108:	b10b      	cbz	r3, 800510e <_strtod_l+0x4de>
 800510a:	4682      	mov	sl, r0
 800510c:	468b      	mov	fp, r1
 800510e:	4b2d      	ldr	r3, [pc, #180]	; (80051c4 <_strtod_l+0x594>)
 8005110:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005114:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005118:	4652      	mov	r2, sl
 800511a:	465b      	mov	r3, fp
 800511c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005120:	f7fb fa6a 	bl	80005f8 <__aeabi_dmul>
 8005124:	4b28      	ldr	r3, [pc, #160]	; (80051c8 <_strtod_l+0x598>)
 8005126:	460a      	mov	r2, r1
 8005128:	400b      	ands	r3, r1
 800512a:	4928      	ldr	r1, [pc, #160]	; (80051cc <_strtod_l+0x59c>)
 800512c:	428b      	cmp	r3, r1
 800512e:	4682      	mov	sl, r0
 8005130:	d898      	bhi.n	8005064 <_strtod_l+0x434>
 8005132:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005136:	428b      	cmp	r3, r1
 8005138:	bf86      	itte	hi
 800513a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80051d4 <_strtod_l+0x5a4>
 800513e:	f04f 3aff 	movhi.w	sl, #4294967295
 8005142:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005146:	2300      	movs	r3, #0
 8005148:	9304      	str	r3, [sp, #16]
 800514a:	e077      	b.n	800523c <_strtod_l+0x60c>
 800514c:	f018 0f01 	tst.w	r8, #1
 8005150:	d006      	beq.n	8005160 <_strtod_l+0x530>
 8005152:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515a:	f7fb fa4d 	bl	80005f8 <__aeabi_dmul>
 800515e:	2301      	movs	r3, #1
 8005160:	3501      	adds	r5, #1
 8005162:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005166:	e7cc      	b.n	8005102 <_strtod_l+0x4d2>
 8005168:	d0ed      	beq.n	8005146 <_strtod_l+0x516>
 800516a:	f1c8 0800 	rsb	r8, r8, #0
 800516e:	f018 020f 	ands.w	r2, r8, #15
 8005172:	d00a      	beq.n	800518a <_strtod_l+0x55a>
 8005174:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <_strtod_l+0x590>)
 8005176:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800517a:	4650      	mov	r0, sl
 800517c:	4659      	mov	r1, fp
 800517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005182:	f7fb fb63 	bl	800084c <__aeabi_ddiv>
 8005186:	4682      	mov	sl, r0
 8005188:	468b      	mov	fp, r1
 800518a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800518e:	d0da      	beq.n	8005146 <_strtod_l+0x516>
 8005190:	f1b8 0f1f 	cmp.w	r8, #31
 8005194:	dd20      	ble.n	80051d8 <_strtod_l+0x5a8>
 8005196:	2400      	movs	r4, #0
 8005198:	46a0      	mov	r8, r4
 800519a:	9407      	str	r4, [sp, #28]
 800519c:	9405      	str	r4, [sp, #20]
 800519e:	2322      	movs	r3, #34	; 0x22
 80051a0:	f04f 0a00 	mov.w	sl, #0
 80051a4:	f04f 0b00 	mov.w	fp, #0
 80051a8:	f8c9 3000 	str.w	r3, [r9]
 80051ac:	e765      	b.n	800507a <_strtod_l+0x44a>
 80051ae:	bf00      	nop
 80051b0:	08007a15 	.word	0x08007a15
 80051b4:	08007aa3 	.word	0x08007aa3
 80051b8:	08007a1d 	.word	0x08007a1d
 80051bc:	08007a60 	.word	0x08007a60
 80051c0:	08007ae0 	.word	0x08007ae0
 80051c4:	08007ab8 	.word	0x08007ab8
 80051c8:	7ff00000 	.word	0x7ff00000
 80051cc:	7ca00000 	.word	0x7ca00000
 80051d0:	fff80000 	.word	0xfff80000
 80051d4:	7fefffff 	.word	0x7fefffff
 80051d8:	f018 0310 	ands.w	r3, r8, #16
 80051dc:	bf18      	it	ne
 80051de:	236a      	movne	r3, #106	; 0x6a
 80051e0:	4da0      	ldr	r5, [pc, #640]	; (8005464 <_strtod_l+0x834>)
 80051e2:	9304      	str	r3, [sp, #16]
 80051e4:	4650      	mov	r0, sl
 80051e6:	4659      	mov	r1, fp
 80051e8:	2300      	movs	r3, #0
 80051ea:	f1b8 0f00 	cmp.w	r8, #0
 80051ee:	f300 810a 	bgt.w	8005406 <_strtod_l+0x7d6>
 80051f2:	b10b      	cbz	r3, 80051f8 <_strtod_l+0x5c8>
 80051f4:	4682      	mov	sl, r0
 80051f6:	468b      	mov	fp, r1
 80051f8:	9b04      	ldr	r3, [sp, #16]
 80051fa:	b1bb      	cbz	r3, 800522c <_strtod_l+0x5fc>
 80051fc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005200:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005204:	2b00      	cmp	r3, #0
 8005206:	4659      	mov	r1, fp
 8005208:	dd10      	ble.n	800522c <_strtod_l+0x5fc>
 800520a:	2b1f      	cmp	r3, #31
 800520c:	f340 8107 	ble.w	800541e <_strtod_l+0x7ee>
 8005210:	2b34      	cmp	r3, #52	; 0x34
 8005212:	bfde      	ittt	le
 8005214:	3b20      	suble	r3, #32
 8005216:	f04f 32ff 	movle.w	r2, #4294967295
 800521a:	fa02 f303 	lslle.w	r3, r2, r3
 800521e:	f04f 0a00 	mov.w	sl, #0
 8005222:	bfcc      	ite	gt
 8005224:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005228:	ea03 0b01 	andle.w	fp, r3, r1
 800522c:	2200      	movs	r2, #0
 800522e:	2300      	movs	r3, #0
 8005230:	4650      	mov	r0, sl
 8005232:	4659      	mov	r1, fp
 8005234:	f7fb fc48 	bl	8000ac8 <__aeabi_dcmpeq>
 8005238:	2800      	cmp	r0, #0
 800523a:	d1ac      	bne.n	8005196 <_strtod_l+0x566>
 800523c:	9b07      	ldr	r3, [sp, #28]
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	9a05      	ldr	r2, [sp, #20]
 8005242:	9908      	ldr	r1, [sp, #32]
 8005244:	4623      	mov	r3, r4
 8005246:	4648      	mov	r0, r9
 8005248:	f001 fdaf 	bl	8006daa <__s2b>
 800524c:	9007      	str	r0, [sp, #28]
 800524e:	2800      	cmp	r0, #0
 8005250:	f43f af08 	beq.w	8005064 <_strtod_l+0x434>
 8005254:	9a06      	ldr	r2, [sp, #24]
 8005256:	9b06      	ldr	r3, [sp, #24]
 8005258:	2a00      	cmp	r2, #0
 800525a:	f1c3 0300 	rsb	r3, r3, #0
 800525e:	bfa8      	it	ge
 8005260:	2300      	movge	r3, #0
 8005262:	930e      	str	r3, [sp, #56]	; 0x38
 8005264:	2400      	movs	r4, #0
 8005266:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800526a:	9316      	str	r3, [sp, #88]	; 0x58
 800526c:	46a0      	mov	r8, r4
 800526e:	9b07      	ldr	r3, [sp, #28]
 8005270:	4648      	mov	r0, r9
 8005272:	6859      	ldr	r1, [r3, #4]
 8005274:	f001 fd13 	bl	8006c9e <_Balloc>
 8005278:	9005      	str	r0, [sp, #20]
 800527a:	2800      	cmp	r0, #0
 800527c:	f43f aef6 	beq.w	800506c <_strtod_l+0x43c>
 8005280:	9b07      	ldr	r3, [sp, #28]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	3202      	adds	r2, #2
 8005286:	f103 010c 	add.w	r1, r3, #12
 800528a:	0092      	lsls	r2, r2, #2
 800528c:	300c      	adds	r0, #12
 800528e:	f001 fcfb 	bl	8006c88 <memcpy>
 8005292:	aa1e      	add	r2, sp, #120	; 0x78
 8005294:	a91d      	add	r1, sp, #116	; 0x74
 8005296:	ec4b ab10 	vmov	d0, sl, fp
 800529a:	4648      	mov	r0, r9
 800529c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80052a0:	f002 f83e 	bl	8007320 <__d2b>
 80052a4:	901c      	str	r0, [sp, #112]	; 0x70
 80052a6:	2800      	cmp	r0, #0
 80052a8:	f43f aee0 	beq.w	800506c <_strtod_l+0x43c>
 80052ac:	2101      	movs	r1, #1
 80052ae:	4648      	mov	r0, r9
 80052b0:	f001 fe07 	bl	8006ec2 <__i2b>
 80052b4:	4680      	mov	r8, r0
 80052b6:	2800      	cmp	r0, #0
 80052b8:	f43f aed8 	beq.w	800506c <_strtod_l+0x43c>
 80052bc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80052be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80052c0:	2e00      	cmp	r6, #0
 80052c2:	bfab      	itete	ge
 80052c4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80052c6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80052c8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80052ca:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80052cc:	bfac      	ite	ge
 80052ce:	18f7      	addge	r7, r6, r3
 80052d0:	1b9d      	sublt	r5, r3, r6
 80052d2:	9b04      	ldr	r3, [sp, #16]
 80052d4:	1af6      	subs	r6, r6, r3
 80052d6:	4416      	add	r6, r2
 80052d8:	4b63      	ldr	r3, [pc, #396]	; (8005468 <_strtod_l+0x838>)
 80052da:	3e01      	subs	r6, #1
 80052dc:	429e      	cmp	r6, r3
 80052de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80052e2:	f280 80af 	bge.w	8005444 <_strtod_l+0x814>
 80052e6:	1b9b      	subs	r3, r3, r6
 80052e8:	2b1f      	cmp	r3, #31
 80052ea:	eba2 0203 	sub.w	r2, r2, r3
 80052ee:	f04f 0101 	mov.w	r1, #1
 80052f2:	f300 809b 	bgt.w	800542c <_strtod_l+0x7fc>
 80052f6:	fa01 f303 	lsl.w	r3, r1, r3
 80052fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80052fc:	2300      	movs	r3, #0
 80052fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005300:	18be      	adds	r6, r7, r2
 8005302:	9b04      	ldr	r3, [sp, #16]
 8005304:	42b7      	cmp	r7, r6
 8005306:	4415      	add	r5, r2
 8005308:	441d      	add	r5, r3
 800530a:	463b      	mov	r3, r7
 800530c:	bfa8      	it	ge
 800530e:	4633      	movge	r3, r6
 8005310:	42ab      	cmp	r3, r5
 8005312:	bfa8      	it	ge
 8005314:	462b      	movge	r3, r5
 8005316:	2b00      	cmp	r3, #0
 8005318:	bfc2      	ittt	gt
 800531a:	1af6      	subgt	r6, r6, r3
 800531c:	1aed      	subgt	r5, r5, r3
 800531e:	1aff      	subgt	r7, r7, r3
 8005320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005322:	b1bb      	cbz	r3, 8005354 <_strtod_l+0x724>
 8005324:	4641      	mov	r1, r8
 8005326:	461a      	mov	r2, r3
 8005328:	4648      	mov	r0, r9
 800532a:	f001 fe69 	bl	8007000 <__pow5mult>
 800532e:	4680      	mov	r8, r0
 8005330:	2800      	cmp	r0, #0
 8005332:	f43f ae9b 	beq.w	800506c <_strtod_l+0x43c>
 8005336:	4601      	mov	r1, r0
 8005338:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800533a:	4648      	mov	r0, r9
 800533c:	f001 fdca 	bl	8006ed4 <__multiply>
 8005340:	900c      	str	r0, [sp, #48]	; 0x30
 8005342:	2800      	cmp	r0, #0
 8005344:	f43f ae92 	beq.w	800506c <_strtod_l+0x43c>
 8005348:	991c      	ldr	r1, [sp, #112]	; 0x70
 800534a:	4648      	mov	r0, r9
 800534c:	f001 fcdb 	bl	8006d06 <_Bfree>
 8005350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005352:	931c      	str	r3, [sp, #112]	; 0x70
 8005354:	2e00      	cmp	r6, #0
 8005356:	dc7a      	bgt.n	800544e <_strtod_l+0x81e>
 8005358:	9b06      	ldr	r3, [sp, #24]
 800535a:	2b00      	cmp	r3, #0
 800535c:	dd08      	ble.n	8005370 <_strtod_l+0x740>
 800535e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005360:	9905      	ldr	r1, [sp, #20]
 8005362:	4648      	mov	r0, r9
 8005364:	f001 fe4c 	bl	8007000 <__pow5mult>
 8005368:	9005      	str	r0, [sp, #20]
 800536a:	2800      	cmp	r0, #0
 800536c:	f43f ae7e 	beq.w	800506c <_strtod_l+0x43c>
 8005370:	2d00      	cmp	r5, #0
 8005372:	dd08      	ble.n	8005386 <_strtod_l+0x756>
 8005374:	462a      	mov	r2, r5
 8005376:	9905      	ldr	r1, [sp, #20]
 8005378:	4648      	mov	r0, r9
 800537a:	f001 fe8f 	bl	800709c <__lshift>
 800537e:	9005      	str	r0, [sp, #20]
 8005380:	2800      	cmp	r0, #0
 8005382:	f43f ae73 	beq.w	800506c <_strtod_l+0x43c>
 8005386:	2f00      	cmp	r7, #0
 8005388:	dd08      	ble.n	800539c <_strtod_l+0x76c>
 800538a:	4641      	mov	r1, r8
 800538c:	463a      	mov	r2, r7
 800538e:	4648      	mov	r0, r9
 8005390:	f001 fe84 	bl	800709c <__lshift>
 8005394:	4680      	mov	r8, r0
 8005396:	2800      	cmp	r0, #0
 8005398:	f43f ae68 	beq.w	800506c <_strtod_l+0x43c>
 800539c:	9a05      	ldr	r2, [sp, #20]
 800539e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80053a0:	4648      	mov	r0, r9
 80053a2:	f001 fee9 	bl	8007178 <__mdiff>
 80053a6:	4604      	mov	r4, r0
 80053a8:	2800      	cmp	r0, #0
 80053aa:	f43f ae5f 	beq.w	800506c <_strtod_l+0x43c>
 80053ae:	68c3      	ldr	r3, [r0, #12]
 80053b0:	930c      	str	r3, [sp, #48]	; 0x30
 80053b2:	2300      	movs	r3, #0
 80053b4:	60c3      	str	r3, [r0, #12]
 80053b6:	4641      	mov	r1, r8
 80053b8:	f001 fec4 	bl	8007144 <__mcmp>
 80053bc:	2800      	cmp	r0, #0
 80053be:	da55      	bge.n	800546c <_strtod_l+0x83c>
 80053c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053c2:	b9e3      	cbnz	r3, 80053fe <_strtod_l+0x7ce>
 80053c4:	f1ba 0f00 	cmp.w	sl, #0
 80053c8:	d119      	bne.n	80053fe <_strtod_l+0x7ce>
 80053ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80053ce:	b9b3      	cbnz	r3, 80053fe <_strtod_l+0x7ce>
 80053d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80053d4:	0d1b      	lsrs	r3, r3, #20
 80053d6:	051b      	lsls	r3, r3, #20
 80053d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80053dc:	d90f      	bls.n	80053fe <_strtod_l+0x7ce>
 80053de:	6963      	ldr	r3, [r4, #20]
 80053e0:	b913      	cbnz	r3, 80053e8 <_strtod_l+0x7b8>
 80053e2:	6923      	ldr	r3, [r4, #16]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	dd0a      	ble.n	80053fe <_strtod_l+0x7ce>
 80053e8:	4621      	mov	r1, r4
 80053ea:	2201      	movs	r2, #1
 80053ec:	4648      	mov	r0, r9
 80053ee:	f001 fe55 	bl	800709c <__lshift>
 80053f2:	4641      	mov	r1, r8
 80053f4:	4604      	mov	r4, r0
 80053f6:	f001 fea5 	bl	8007144 <__mcmp>
 80053fa:	2800      	cmp	r0, #0
 80053fc:	dc67      	bgt.n	80054ce <_strtod_l+0x89e>
 80053fe:	9b04      	ldr	r3, [sp, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d171      	bne.n	80054e8 <_strtod_l+0x8b8>
 8005404:	e63d      	b.n	8005082 <_strtod_l+0x452>
 8005406:	f018 0f01 	tst.w	r8, #1
 800540a:	d004      	beq.n	8005416 <_strtod_l+0x7e6>
 800540c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005410:	f7fb f8f2 	bl	80005f8 <__aeabi_dmul>
 8005414:	2301      	movs	r3, #1
 8005416:	ea4f 0868 	mov.w	r8, r8, asr #1
 800541a:	3508      	adds	r5, #8
 800541c:	e6e5      	b.n	80051ea <_strtod_l+0x5ba>
 800541e:	f04f 32ff 	mov.w	r2, #4294967295
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	ea03 0a0a 	and.w	sl, r3, sl
 800542a:	e6ff      	b.n	800522c <_strtod_l+0x5fc>
 800542c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8005430:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005434:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005438:	36e2      	adds	r6, #226	; 0xe2
 800543a:	fa01 f306 	lsl.w	r3, r1, r6
 800543e:	930a      	str	r3, [sp, #40]	; 0x28
 8005440:	910f      	str	r1, [sp, #60]	; 0x3c
 8005442:	e75d      	b.n	8005300 <_strtod_l+0x6d0>
 8005444:	2300      	movs	r3, #0
 8005446:	930a      	str	r3, [sp, #40]	; 0x28
 8005448:	2301      	movs	r3, #1
 800544a:	930f      	str	r3, [sp, #60]	; 0x3c
 800544c:	e758      	b.n	8005300 <_strtod_l+0x6d0>
 800544e:	4632      	mov	r2, r6
 8005450:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005452:	4648      	mov	r0, r9
 8005454:	f001 fe22 	bl	800709c <__lshift>
 8005458:	901c      	str	r0, [sp, #112]	; 0x70
 800545a:	2800      	cmp	r0, #0
 800545c:	f47f af7c 	bne.w	8005358 <_strtod_l+0x728>
 8005460:	e604      	b.n	800506c <_strtod_l+0x43c>
 8005462:	bf00      	nop
 8005464:	08007a78 	.word	0x08007a78
 8005468:	fffffc02 	.word	0xfffffc02
 800546c:	465d      	mov	r5, fp
 800546e:	f040 8086 	bne.w	800557e <_strtod_l+0x94e>
 8005472:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005474:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005478:	b32a      	cbz	r2, 80054c6 <_strtod_l+0x896>
 800547a:	4aaf      	ldr	r2, [pc, #700]	; (8005738 <_strtod_l+0xb08>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d153      	bne.n	8005528 <_strtod_l+0x8f8>
 8005480:	9b04      	ldr	r3, [sp, #16]
 8005482:	4650      	mov	r0, sl
 8005484:	b1d3      	cbz	r3, 80054bc <_strtod_l+0x88c>
 8005486:	4aad      	ldr	r2, [pc, #692]	; (800573c <_strtod_l+0xb0c>)
 8005488:	402a      	ands	r2, r5
 800548a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800548e:	f04f 31ff 	mov.w	r1, #4294967295
 8005492:	d816      	bhi.n	80054c2 <_strtod_l+0x892>
 8005494:	0d12      	lsrs	r2, r2, #20
 8005496:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800549a:	fa01 f303 	lsl.w	r3, r1, r3
 800549e:	4298      	cmp	r0, r3
 80054a0:	d142      	bne.n	8005528 <_strtod_l+0x8f8>
 80054a2:	4ba7      	ldr	r3, [pc, #668]	; (8005740 <_strtod_l+0xb10>)
 80054a4:	429d      	cmp	r5, r3
 80054a6:	d102      	bne.n	80054ae <_strtod_l+0x87e>
 80054a8:	3001      	adds	r0, #1
 80054aa:	f43f addf 	beq.w	800506c <_strtod_l+0x43c>
 80054ae:	4ba3      	ldr	r3, [pc, #652]	; (800573c <_strtod_l+0xb0c>)
 80054b0:	402b      	ands	r3, r5
 80054b2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80054b6:	f04f 0a00 	mov.w	sl, #0
 80054ba:	e7a0      	b.n	80053fe <_strtod_l+0x7ce>
 80054bc:	f04f 33ff 	mov.w	r3, #4294967295
 80054c0:	e7ed      	b.n	800549e <_strtod_l+0x86e>
 80054c2:	460b      	mov	r3, r1
 80054c4:	e7eb      	b.n	800549e <_strtod_l+0x86e>
 80054c6:	bb7b      	cbnz	r3, 8005528 <_strtod_l+0x8f8>
 80054c8:	f1ba 0f00 	cmp.w	sl, #0
 80054cc:	d12c      	bne.n	8005528 <_strtod_l+0x8f8>
 80054ce:	9904      	ldr	r1, [sp, #16]
 80054d0:	4a9a      	ldr	r2, [pc, #616]	; (800573c <_strtod_l+0xb0c>)
 80054d2:	465b      	mov	r3, fp
 80054d4:	b1f1      	cbz	r1, 8005514 <_strtod_l+0x8e4>
 80054d6:	ea02 010b 	and.w	r1, r2, fp
 80054da:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80054de:	dc19      	bgt.n	8005514 <_strtod_l+0x8e4>
 80054e0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80054e4:	f77f ae5b 	ble.w	800519e <_strtod_l+0x56e>
 80054e8:	4a96      	ldr	r2, [pc, #600]	; (8005744 <_strtod_l+0xb14>)
 80054ea:	2300      	movs	r3, #0
 80054ec:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80054f0:	4650      	mov	r0, sl
 80054f2:	4659      	mov	r1, fp
 80054f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80054f8:	f7fb f87e 	bl	80005f8 <__aeabi_dmul>
 80054fc:	4682      	mov	sl, r0
 80054fe:	468b      	mov	fp, r1
 8005500:	2900      	cmp	r1, #0
 8005502:	f47f adbe 	bne.w	8005082 <_strtod_l+0x452>
 8005506:	2800      	cmp	r0, #0
 8005508:	f47f adbb 	bne.w	8005082 <_strtod_l+0x452>
 800550c:	2322      	movs	r3, #34	; 0x22
 800550e:	f8c9 3000 	str.w	r3, [r9]
 8005512:	e5b6      	b.n	8005082 <_strtod_l+0x452>
 8005514:	4013      	ands	r3, r2
 8005516:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800551a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800551e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005522:	f04f 3aff 	mov.w	sl, #4294967295
 8005526:	e76a      	b.n	80053fe <_strtod_l+0x7ce>
 8005528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800552a:	b193      	cbz	r3, 8005552 <_strtod_l+0x922>
 800552c:	422b      	tst	r3, r5
 800552e:	f43f af66 	beq.w	80053fe <_strtod_l+0x7ce>
 8005532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005534:	9a04      	ldr	r2, [sp, #16]
 8005536:	4650      	mov	r0, sl
 8005538:	4659      	mov	r1, fp
 800553a:	b173      	cbz	r3, 800555a <_strtod_l+0x92a>
 800553c:	f7ff fb5a 	bl	8004bf4 <sulp>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005548:	f7fa fea0 	bl	800028c <__adddf3>
 800554c:	4682      	mov	sl, r0
 800554e:	468b      	mov	fp, r1
 8005550:	e755      	b.n	80053fe <_strtod_l+0x7ce>
 8005552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005554:	ea13 0f0a 	tst.w	r3, sl
 8005558:	e7e9      	b.n	800552e <_strtod_l+0x8fe>
 800555a:	f7ff fb4b 	bl	8004bf4 <sulp>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005566:	f7fa fe8f 	bl	8000288 <__aeabi_dsub>
 800556a:	2200      	movs	r2, #0
 800556c:	2300      	movs	r3, #0
 800556e:	4682      	mov	sl, r0
 8005570:	468b      	mov	fp, r1
 8005572:	f7fb faa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005576:	2800      	cmp	r0, #0
 8005578:	f47f ae11 	bne.w	800519e <_strtod_l+0x56e>
 800557c:	e73f      	b.n	80053fe <_strtod_l+0x7ce>
 800557e:	4641      	mov	r1, r8
 8005580:	4620      	mov	r0, r4
 8005582:	f001 ff1c 	bl	80073be <__ratio>
 8005586:	ec57 6b10 	vmov	r6, r7, d0
 800558a:	2200      	movs	r2, #0
 800558c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005590:	ee10 0a10 	vmov	r0, s0
 8005594:	4639      	mov	r1, r7
 8005596:	f7fb faab 	bl	8000af0 <__aeabi_dcmple>
 800559a:	2800      	cmp	r0, #0
 800559c:	d077      	beq.n	800568e <_strtod_l+0xa5e>
 800559e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d04a      	beq.n	800563a <_strtod_l+0xa0a>
 80055a4:	4b68      	ldr	r3, [pc, #416]	; (8005748 <_strtod_l+0xb18>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80055ac:	4f66      	ldr	r7, [pc, #408]	; (8005748 <_strtod_l+0xb18>)
 80055ae:	2600      	movs	r6, #0
 80055b0:	4b62      	ldr	r3, [pc, #392]	; (800573c <_strtod_l+0xb0c>)
 80055b2:	402b      	ands	r3, r5
 80055b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80055b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055b8:	4b64      	ldr	r3, [pc, #400]	; (800574c <_strtod_l+0xb1c>)
 80055ba:	429a      	cmp	r2, r3
 80055bc:	f040 80ce 	bne.w	800575c <_strtod_l+0xb2c>
 80055c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80055c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055c8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80055cc:	ec4b ab10 	vmov	d0, sl, fp
 80055d0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80055d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80055d8:	f001 fe2c 	bl	8007234 <__ulp>
 80055dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055e0:	ec53 2b10 	vmov	r2, r3, d0
 80055e4:	f7fb f808 	bl	80005f8 <__aeabi_dmul>
 80055e8:	4652      	mov	r2, sl
 80055ea:	465b      	mov	r3, fp
 80055ec:	f7fa fe4e 	bl	800028c <__adddf3>
 80055f0:	460b      	mov	r3, r1
 80055f2:	4952      	ldr	r1, [pc, #328]	; (800573c <_strtod_l+0xb0c>)
 80055f4:	4a56      	ldr	r2, [pc, #344]	; (8005750 <_strtod_l+0xb20>)
 80055f6:	4019      	ands	r1, r3
 80055f8:	4291      	cmp	r1, r2
 80055fa:	4682      	mov	sl, r0
 80055fc:	d95b      	bls.n	80056b6 <_strtod_l+0xa86>
 80055fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005600:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005604:	4293      	cmp	r3, r2
 8005606:	d103      	bne.n	8005610 <_strtod_l+0x9e0>
 8005608:	9b08      	ldr	r3, [sp, #32]
 800560a:	3301      	adds	r3, #1
 800560c:	f43f ad2e 	beq.w	800506c <_strtod_l+0x43c>
 8005610:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005740 <_strtod_l+0xb10>
 8005614:	f04f 3aff 	mov.w	sl, #4294967295
 8005618:	991c      	ldr	r1, [sp, #112]	; 0x70
 800561a:	4648      	mov	r0, r9
 800561c:	f001 fb73 	bl	8006d06 <_Bfree>
 8005620:	9905      	ldr	r1, [sp, #20]
 8005622:	4648      	mov	r0, r9
 8005624:	f001 fb6f 	bl	8006d06 <_Bfree>
 8005628:	4641      	mov	r1, r8
 800562a:	4648      	mov	r0, r9
 800562c:	f001 fb6b 	bl	8006d06 <_Bfree>
 8005630:	4621      	mov	r1, r4
 8005632:	4648      	mov	r0, r9
 8005634:	f001 fb67 	bl	8006d06 <_Bfree>
 8005638:	e619      	b.n	800526e <_strtod_l+0x63e>
 800563a:	f1ba 0f00 	cmp.w	sl, #0
 800563e:	d11a      	bne.n	8005676 <_strtod_l+0xa46>
 8005640:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005644:	b9eb      	cbnz	r3, 8005682 <_strtod_l+0xa52>
 8005646:	2200      	movs	r2, #0
 8005648:	4b3f      	ldr	r3, [pc, #252]	; (8005748 <_strtod_l+0xb18>)
 800564a:	4630      	mov	r0, r6
 800564c:	4639      	mov	r1, r7
 800564e:	f7fb fa45 	bl	8000adc <__aeabi_dcmplt>
 8005652:	b9c8      	cbnz	r0, 8005688 <_strtod_l+0xa58>
 8005654:	4630      	mov	r0, r6
 8005656:	4639      	mov	r1, r7
 8005658:	2200      	movs	r2, #0
 800565a:	4b3e      	ldr	r3, [pc, #248]	; (8005754 <_strtod_l+0xb24>)
 800565c:	f7fa ffcc 	bl	80005f8 <__aeabi_dmul>
 8005660:	4606      	mov	r6, r0
 8005662:	460f      	mov	r7, r1
 8005664:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005668:	9618      	str	r6, [sp, #96]	; 0x60
 800566a:	9319      	str	r3, [sp, #100]	; 0x64
 800566c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005670:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005674:	e79c      	b.n	80055b0 <_strtod_l+0x980>
 8005676:	f1ba 0f01 	cmp.w	sl, #1
 800567a:	d102      	bne.n	8005682 <_strtod_l+0xa52>
 800567c:	2d00      	cmp	r5, #0
 800567e:	f43f ad8e 	beq.w	800519e <_strtod_l+0x56e>
 8005682:	2200      	movs	r2, #0
 8005684:	4b34      	ldr	r3, [pc, #208]	; (8005758 <_strtod_l+0xb28>)
 8005686:	e78f      	b.n	80055a8 <_strtod_l+0x978>
 8005688:	2600      	movs	r6, #0
 800568a:	4f32      	ldr	r7, [pc, #200]	; (8005754 <_strtod_l+0xb24>)
 800568c:	e7ea      	b.n	8005664 <_strtod_l+0xa34>
 800568e:	4b31      	ldr	r3, [pc, #196]	; (8005754 <_strtod_l+0xb24>)
 8005690:	4630      	mov	r0, r6
 8005692:	4639      	mov	r1, r7
 8005694:	2200      	movs	r2, #0
 8005696:	f7fa ffaf 	bl	80005f8 <__aeabi_dmul>
 800569a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800569c:	4606      	mov	r6, r0
 800569e:	460f      	mov	r7, r1
 80056a0:	b933      	cbnz	r3, 80056b0 <_strtod_l+0xa80>
 80056a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056a6:	9010      	str	r0, [sp, #64]	; 0x40
 80056a8:	9311      	str	r3, [sp, #68]	; 0x44
 80056aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056ae:	e7df      	b.n	8005670 <_strtod_l+0xa40>
 80056b0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80056b4:	e7f9      	b.n	80056aa <_strtod_l+0xa7a>
 80056b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80056ba:	9b04      	ldr	r3, [sp, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1ab      	bne.n	8005618 <_strtod_l+0x9e8>
 80056c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80056c4:	0d1b      	lsrs	r3, r3, #20
 80056c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056c8:	051b      	lsls	r3, r3, #20
 80056ca:	429a      	cmp	r2, r3
 80056cc:	465d      	mov	r5, fp
 80056ce:	d1a3      	bne.n	8005618 <_strtod_l+0x9e8>
 80056d0:	4639      	mov	r1, r7
 80056d2:	4630      	mov	r0, r6
 80056d4:	f7fb fa40 	bl	8000b58 <__aeabi_d2iz>
 80056d8:	f7fa ff24 	bl	8000524 <__aeabi_i2d>
 80056dc:	460b      	mov	r3, r1
 80056de:	4602      	mov	r2, r0
 80056e0:	4639      	mov	r1, r7
 80056e2:	4630      	mov	r0, r6
 80056e4:	f7fa fdd0 	bl	8000288 <__aeabi_dsub>
 80056e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056ea:	4606      	mov	r6, r0
 80056ec:	460f      	mov	r7, r1
 80056ee:	b933      	cbnz	r3, 80056fe <_strtod_l+0xace>
 80056f0:	f1ba 0f00 	cmp.w	sl, #0
 80056f4:	d103      	bne.n	80056fe <_strtod_l+0xace>
 80056f6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80056fa:	2d00      	cmp	r5, #0
 80056fc:	d06d      	beq.n	80057da <_strtod_l+0xbaa>
 80056fe:	a30a      	add	r3, pc, #40	; (adr r3, 8005728 <_strtod_l+0xaf8>)
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	4630      	mov	r0, r6
 8005706:	4639      	mov	r1, r7
 8005708:	f7fb f9e8 	bl	8000adc <__aeabi_dcmplt>
 800570c:	2800      	cmp	r0, #0
 800570e:	f47f acb8 	bne.w	8005082 <_strtod_l+0x452>
 8005712:	a307      	add	r3, pc, #28	; (adr r3, 8005730 <_strtod_l+0xb00>)
 8005714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005718:	4630      	mov	r0, r6
 800571a:	4639      	mov	r1, r7
 800571c:	f7fb f9fc 	bl	8000b18 <__aeabi_dcmpgt>
 8005720:	2800      	cmp	r0, #0
 8005722:	f43f af79 	beq.w	8005618 <_strtod_l+0x9e8>
 8005726:	e4ac      	b.n	8005082 <_strtod_l+0x452>
 8005728:	94a03595 	.word	0x94a03595
 800572c:	3fdfffff 	.word	0x3fdfffff
 8005730:	35afe535 	.word	0x35afe535
 8005734:	3fe00000 	.word	0x3fe00000
 8005738:	000fffff 	.word	0x000fffff
 800573c:	7ff00000 	.word	0x7ff00000
 8005740:	7fefffff 	.word	0x7fefffff
 8005744:	39500000 	.word	0x39500000
 8005748:	3ff00000 	.word	0x3ff00000
 800574c:	7fe00000 	.word	0x7fe00000
 8005750:	7c9fffff 	.word	0x7c9fffff
 8005754:	3fe00000 	.word	0x3fe00000
 8005758:	bff00000 	.word	0xbff00000
 800575c:	9b04      	ldr	r3, [sp, #16]
 800575e:	b333      	cbz	r3, 80057ae <_strtod_l+0xb7e>
 8005760:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005762:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005766:	d822      	bhi.n	80057ae <_strtod_l+0xb7e>
 8005768:	a327      	add	r3, pc, #156	; (adr r3, 8005808 <_strtod_l+0xbd8>)
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	4630      	mov	r0, r6
 8005770:	4639      	mov	r1, r7
 8005772:	f7fb f9bd 	bl	8000af0 <__aeabi_dcmple>
 8005776:	b1a0      	cbz	r0, 80057a2 <_strtod_l+0xb72>
 8005778:	4639      	mov	r1, r7
 800577a:	4630      	mov	r0, r6
 800577c:	f7fb fa14 	bl	8000ba8 <__aeabi_d2uiz>
 8005780:	2800      	cmp	r0, #0
 8005782:	bf08      	it	eq
 8005784:	2001      	moveq	r0, #1
 8005786:	f7fa febd 	bl	8000504 <__aeabi_ui2d>
 800578a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800578c:	4606      	mov	r6, r0
 800578e:	460f      	mov	r7, r1
 8005790:	bb03      	cbnz	r3, 80057d4 <_strtod_l+0xba4>
 8005792:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005796:	9012      	str	r0, [sp, #72]	; 0x48
 8005798:	9313      	str	r3, [sp, #76]	; 0x4c
 800579a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800579e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80057a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057a6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80057ae:	ed9d 0b08 	vldr	d0, [sp, #32]
 80057b2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80057b6:	f001 fd3d 	bl	8007234 <__ulp>
 80057ba:	4650      	mov	r0, sl
 80057bc:	ec53 2b10 	vmov	r2, r3, d0
 80057c0:	4659      	mov	r1, fp
 80057c2:	f7fa ff19 	bl	80005f8 <__aeabi_dmul>
 80057c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057ca:	f7fa fd5f 	bl	800028c <__adddf3>
 80057ce:	4682      	mov	sl, r0
 80057d0:	468b      	mov	fp, r1
 80057d2:	e772      	b.n	80056ba <_strtod_l+0xa8a>
 80057d4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80057d8:	e7df      	b.n	800579a <_strtod_l+0xb6a>
 80057da:	a30d      	add	r3, pc, #52	; (adr r3, 8005810 <_strtod_l+0xbe0>)
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	f7fb f97c 	bl	8000adc <__aeabi_dcmplt>
 80057e4:	e79c      	b.n	8005720 <_strtod_l+0xaf0>
 80057e6:	2300      	movs	r3, #0
 80057e8:	930d      	str	r3, [sp, #52]	; 0x34
 80057ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80057ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80057ee:	6013      	str	r3, [r2, #0]
 80057f0:	f7ff ba61 	b.w	8004cb6 <_strtod_l+0x86>
 80057f4:	2b65      	cmp	r3, #101	; 0x65
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	f43f ab4e 	beq.w	8004e9a <_strtod_l+0x26a>
 80057fe:	2101      	movs	r1, #1
 8005800:	4614      	mov	r4, r2
 8005802:	9104      	str	r1, [sp, #16]
 8005804:	f7ff bacb 	b.w	8004d9e <_strtod_l+0x16e>
 8005808:	ffc00000 	.word	0xffc00000
 800580c:	41dfffff 	.word	0x41dfffff
 8005810:	94a03595 	.word	0x94a03595
 8005814:	3fcfffff 	.word	0x3fcfffff

08005818 <_strtod_r>:
 8005818:	4b05      	ldr	r3, [pc, #20]	; (8005830 <_strtod_r+0x18>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	b410      	push	{r4}
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	4c04      	ldr	r4, [pc, #16]	; (8005834 <_strtod_r+0x1c>)
 8005822:	2b00      	cmp	r3, #0
 8005824:	bf08      	it	eq
 8005826:	4623      	moveq	r3, r4
 8005828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800582c:	f7ff ba00 	b.w	8004c30 <_strtod_l>
 8005830:	2000000c 	.word	0x2000000c
 8005834:	20000070 	.word	0x20000070

08005838 <_strtol_l.isra.0>:
 8005838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800583c:	4680      	mov	r8, r0
 800583e:	4689      	mov	r9, r1
 8005840:	4692      	mov	sl, r2
 8005842:	461e      	mov	r6, r3
 8005844:	460f      	mov	r7, r1
 8005846:	463d      	mov	r5, r7
 8005848:	9808      	ldr	r0, [sp, #32]
 800584a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800584e:	f001 f9ed 	bl	8006c2c <__locale_ctype_ptr_l>
 8005852:	4420      	add	r0, r4
 8005854:	7843      	ldrb	r3, [r0, #1]
 8005856:	f013 0308 	ands.w	r3, r3, #8
 800585a:	d132      	bne.n	80058c2 <_strtol_l.isra.0+0x8a>
 800585c:	2c2d      	cmp	r4, #45	; 0x2d
 800585e:	d132      	bne.n	80058c6 <_strtol_l.isra.0+0x8e>
 8005860:	787c      	ldrb	r4, [r7, #1]
 8005862:	1cbd      	adds	r5, r7, #2
 8005864:	2201      	movs	r2, #1
 8005866:	2e00      	cmp	r6, #0
 8005868:	d05d      	beq.n	8005926 <_strtol_l.isra.0+0xee>
 800586a:	2e10      	cmp	r6, #16
 800586c:	d109      	bne.n	8005882 <_strtol_l.isra.0+0x4a>
 800586e:	2c30      	cmp	r4, #48	; 0x30
 8005870:	d107      	bne.n	8005882 <_strtol_l.isra.0+0x4a>
 8005872:	782b      	ldrb	r3, [r5, #0]
 8005874:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005878:	2b58      	cmp	r3, #88	; 0x58
 800587a:	d14f      	bne.n	800591c <_strtol_l.isra.0+0xe4>
 800587c:	786c      	ldrb	r4, [r5, #1]
 800587e:	2610      	movs	r6, #16
 8005880:	3502      	adds	r5, #2
 8005882:	2a00      	cmp	r2, #0
 8005884:	bf14      	ite	ne
 8005886:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800588a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800588e:	2700      	movs	r7, #0
 8005890:	fbb1 fcf6 	udiv	ip, r1, r6
 8005894:	4638      	mov	r0, r7
 8005896:	fb06 1e1c 	mls	lr, r6, ip, r1
 800589a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800589e:	2b09      	cmp	r3, #9
 80058a0:	d817      	bhi.n	80058d2 <_strtol_l.isra.0+0x9a>
 80058a2:	461c      	mov	r4, r3
 80058a4:	42a6      	cmp	r6, r4
 80058a6:	dd23      	ble.n	80058f0 <_strtol_l.isra.0+0xb8>
 80058a8:	1c7b      	adds	r3, r7, #1
 80058aa:	d007      	beq.n	80058bc <_strtol_l.isra.0+0x84>
 80058ac:	4584      	cmp	ip, r0
 80058ae:	d31c      	bcc.n	80058ea <_strtol_l.isra.0+0xb2>
 80058b0:	d101      	bne.n	80058b6 <_strtol_l.isra.0+0x7e>
 80058b2:	45a6      	cmp	lr, r4
 80058b4:	db19      	blt.n	80058ea <_strtol_l.isra.0+0xb2>
 80058b6:	fb00 4006 	mla	r0, r0, r6, r4
 80058ba:	2701      	movs	r7, #1
 80058bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058c0:	e7eb      	b.n	800589a <_strtol_l.isra.0+0x62>
 80058c2:	462f      	mov	r7, r5
 80058c4:	e7bf      	b.n	8005846 <_strtol_l.isra.0+0xe>
 80058c6:	2c2b      	cmp	r4, #43	; 0x2b
 80058c8:	bf04      	itt	eq
 80058ca:	1cbd      	addeq	r5, r7, #2
 80058cc:	787c      	ldrbeq	r4, [r7, #1]
 80058ce:	461a      	mov	r2, r3
 80058d0:	e7c9      	b.n	8005866 <_strtol_l.isra.0+0x2e>
 80058d2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80058d6:	2b19      	cmp	r3, #25
 80058d8:	d801      	bhi.n	80058de <_strtol_l.isra.0+0xa6>
 80058da:	3c37      	subs	r4, #55	; 0x37
 80058dc:	e7e2      	b.n	80058a4 <_strtol_l.isra.0+0x6c>
 80058de:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80058e2:	2b19      	cmp	r3, #25
 80058e4:	d804      	bhi.n	80058f0 <_strtol_l.isra.0+0xb8>
 80058e6:	3c57      	subs	r4, #87	; 0x57
 80058e8:	e7dc      	b.n	80058a4 <_strtol_l.isra.0+0x6c>
 80058ea:	f04f 37ff 	mov.w	r7, #4294967295
 80058ee:	e7e5      	b.n	80058bc <_strtol_l.isra.0+0x84>
 80058f0:	1c7b      	adds	r3, r7, #1
 80058f2:	d108      	bne.n	8005906 <_strtol_l.isra.0+0xce>
 80058f4:	2322      	movs	r3, #34	; 0x22
 80058f6:	f8c8 3000 	str.w	r3, [r8]
 80058fa:	4608      	mov	r0, r1
 80058fc:	f1ba 0f00 	cmp.w	sl, #0
 8005900:	d107      	bne.n	8005912 <_strtol_l.isra.0+0xda>
 8005902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005906:	b102      	cbz	r2, 800590a <_strtol_l.isra.0+0xd2>
 8005908:	4240      	negs	r0, r0
 800590a:	f1ba 0f00 	cmp.w	sl, #0
 800590e:	d0f8      	beq.n	8005902 <_strtol_l.isra.0+0xca>
 8005910:	b10f      	cbz	r7, 8005916 <_strtol_l.isra.0+0xde>
 8005912:	f105 39ff 	add.w	r9, r5, #4294967295
 8005916:	f8ca 9000 	str.w	r9, [sl]
 800591a:	e7f2      	b.n	8005902 <_strtol_l.isra.0+0xca>
 800591c:	2430      	movs	r4, #48	; 0x30
 800591e:	2e00      	cmp	r6, #0
 8005920:	d1af      	bne.n	8005882 <_strtol_l.isra.0+0x4a>
 8005922:	2608      	movs	r6, #8
 8005924:	e7ad      	b.n	8005882 <_strtol_l.isra.0+0x4a>
 8005926:	2c30      	cmp	r4, #48	; 0x30
 8005928:	d0a3      	beq.n	8005872 <_strtol_l.isra.0+0x3a>
 800592a:	260a      	movs	r6, #10
 800592c:	e7a9      	b.n	8005882 <_strtol_l.isra.0+0x4a>
	...

08005930 <_strtol_r>:
 8005930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005932:	4c06      	ldr	r4, [pc, #24]	; (800594c <_strtol_r+0x1c>)
 8005934:	4d06      	ldr	r5, [pc, #24]	; (8005950 <_strtol_r+0x20>)
 8005936:	6824      	ldr	r4, [r4, #0]
 8005938:	6a24      	ldr	r4, [r4, #32]
 800593a:	2c00      	cmp	r4, #0
 800593c:	bf08      	it	eq
 800593e:	462c      	moveq	r4, r5
 8005940:	9400      	str	r4, [sp, #0]
 8005942:	f7ff ff79 	bl	8005838 <_strtol_l.isra.0>
 8005946:	b003      	add	sp, #12
 8005948:	bd30      	pop	{r4, r5, pc}
 800594a:	bf00      	nop
 800594c:	2000000c 	.word	0x2000000c
 8005950:	20000070 	.word	0x20000070

08005954 <quorem>:
 8005954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005958:	6903      	ldr	r3, [r0, #16]
 800595a:	690c      	ldr	r4, [r1, #16]
 800595c:	42a3      	cmp	r3, r4
 800595e:	4680      	mov	r8, r0
 8005960:	f2c0 8082 	blt.w	8005a68 <quorem+0x114>
 8005964:	3c01      	subs	r4, #1
 8005966:	f101 0714 	add.w	r7, r1, #20
 800596a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800596e:	f100 0614 	add.w	r6, r0, #20
 8005972:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005976:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800597a:	eb06 030c 	add.w	r3, r6, ip
 800597e:	3501      	adds	r5, #1
 8005980:	eb07 090c 	add.w	r9, r7, ip
 8005984:	9301      	str	r3, [sp, #4]
 8005986:	fbb0 f5f5 	udiv	r5, r0, r5
 800598a:	b395      	cbz	r5, 80059f2 <quorem+0x9e>
 800598c:	f04f 0a00 	mov.w	sl, #0
 8005990:	4638      	mov	r0, r7
 8005992:	46b6      	mov	lr, r6
 8005994:	46d3      	mov	fp, sl
 8005996:	f850 2b04 	ldr.w	r2, [r0], #4
 800599a:	b293      	uxth	r3, r2
 800599c:	fb05 a303 	mla	r3, r5, r3, sl
 80059a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	ebab 0303 	sub.w	r3, fp, r3
 80059aa:	0c12      	lsrs	r2, r2, #16
 80059ac:	f8de b000 	ldr.w	fp, [lr]
 80059b0:	fb05 a202 	mla	r2, r5, r2, sl
 80059b4:	fa13 f38b 	uxtah	r3, r3, fp
 80059b8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80059bc:	fa1f fb82 	uxth.w	fp, r2
 80059c0:	f8de 2000 	ldr.w	r2, [lr]
 80059c4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80059c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059d2:	4581      	cmp	r9, r0
 80059d4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80059d8:	f84e 3b04 	str.w	r3, [lr], #4
 80059dc:	d2db      	bcs.n	8005996 <quorem+0x42>
 80059de:	f856 300c 	ldr.w	r3, [r6, ip]
 80059e2:	b933      	cbnz	r3, 80059f2 <quorem+0x9e>
 80059e4:	9b01      	ldr	r3, [sp, #4]
 80059e6:	3b04      	subs	r3, #4
 80059e8:	429e      	cmp	r6, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	d330      	bcc.n	8005a50 <quorem+0xfc>
 80059ee:	f8c8 4010 	str.w	r4, [r8, #16]
 80059f2:	4640      	mov	r0, r8
 80059f4:	f001 fba6 	bl	8007144 <__mcmp>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	db25      	blt.n	8005a48 <quorem+0xf4>
 80059fc:	3501      	adds	r5, #1
 80059fe:	4630      	mov	r0, r6
 8005a00:	f04f 0c00 	mov.w	ip, #0
 8005a04:	f857 2b04 	ldr.w	r2, [r7], #4
 8005a08:	f8d0 e000 	ldr.w	lr, [r0]
 8005a0c:	b293      	uxth	r3, r2
 8005a0e:	ebac 0303 	sub.w	r3, ip, r3
 8005a12:	0c12      	lsrs	r2, r2, #16
 8005a14:	fa13 f38e 	uxtah	r3, r3, lr
 8005a18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a26:	45b9      	cmp	r9, r7
 8005a28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a2c:	f840 3b04 	str.w	r3, [r0], #4
 8005a30:	d2e8      	bcs.n	8005a04 <quorem+0xb0>
 8005a32:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005a36:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005a3a:	b92a      	cbnz	r2, 8005a48 <quorem+0xf4>
 8005a3c:	3b04      	subs	r3, #4
 8005a3e:	429e      	cmp	r6, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	d30b      	bcc.n	8005a5c <quorem+0x108>
 8005a44:	f8c8 4010 	str.w	r4, [r8, #16]
 8005a48:	4628      	mov	r0, r5
 8005a4a:	b003      	add	sp, #12
 8005a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a50:	6812      	ldr	r2, [r2, #0]
 8005a52:	3b04      	subs	r3, #4
 8005a54:	2a00      	cmp	r2, #0
 8005a56:	d1ca      	bne.n	80059ee <quorem+0x9a>
 8005a58:	3c01      	subs	r4, #1
 8005a5a:	e7c5      	b.n	80059e8 <quorem+0x94>
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	3b04      	subs	r3, #4
 8005a60:	2a00      	cmp	r2, #0
 8005a62:	d1ef      	bne.n	8005a44 <quorem+0xf0>
 8005a64:	3c01      	subs	r4, #1
 8005a66:	e7ea      	b.n	8005a3e <quorem+0xea>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	e7ee      	b.n	8005a4a <quorem+0xf6>
 8005a6c:	0000      	movs	r0, r0
	...

08005a70 <_dtoa_r>:
 8005a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a74:	ec57 6b10 	vmov	r6, r7, d0
 8005a78:	b097      	sub	sp, #92	; 0x5c
 8005a7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a7c:	9106      	str	r1, [sp, #24]
 8005a7e:	4604      	mov	r4, r0
 8005a80:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a82:	9312      	str	r3, [sp, #72]	; 0x48
 8005a84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a88:	e9cd 6700 	strd	r6, r7, [sp]
 8005a8c:	b93d      	cbnz	r5, 8005a9e <_dtoa_r+0x2e>
 8005a8e:	2010      	movs	r0, #16
 8005a90:	f001 f8e0 	bl	8006c54 <malloc>
 8005a94:	6260      	str	r0, [r4, #36]	; 0x24
 8005a96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a9a:	6005      	str	r5, [r0, #0]
 8005a9c:	60c5      	str	r5, [r0, #12]
 8005a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aa0:	6819      	ldr	r1, [r3, #0]
 8005aa2:	b151      	cbz	r1, 8005aba <_dtoa_r+0x4a>
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	604a      	str	r2, [r1, #4]
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	4093      	lsls	r3, r2
 8005aac:	608b      	str	r3, [r1, #8]
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f001 f929 	bl	8006d06 <_Bfree>
 8005ab4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	1e3b      	subs	r3, r7, #0
 8005abc:	bfbb      	ittet	lt
 8005abe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ac2:	9301      	strlt	r3, [sp, #4]
 8005ac4:	2300      	movge	r3, #0
 8005ac6:	2201      	movlt	r2, #1
 8005ac8:	bfac      	ite	ge
 8005aca:	f8c8 3000 	strge.w	r3, [r8]
 8005ace:	f8c8 2000 	strlt.w	r2, [r8]
 8005ad2:	4baf      	ldr	r3, [pc, #700]	; (8005d90 <_dtoa_r+0x320>)
 8005ad4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005ad8:	ea33 0308 	bics.w	r3, r3, r8
 8005adc:	d114      	bne.n	8005b08 <_dtoa_r+0x98>
 8005ade:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ae0:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	9b00      	ldr	r3, [sp, #0]
 8005ae8:	b923      	cbnz	r3, 8005af4 <_dtoa_r+0x84>
 8005aea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005aee:	2800      	cmp	r0, #0
 8005af0:	f000 8542 	beq.w	8006578 <_dtoa_r+0xb08>
 8005af4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005af6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005da4 <_dtoa_r+0x334>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 8544 	beq.w	8006588 <_dtoa_r+0xb18>
 8005b00:	f10b 0303 	add.w	r3, fp, #3
 8005b04:	f000 bd3e 	b.w	8006584 <_dtoa_r+0xb14>
 8005b08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2300      	movs	r3, #0
 8005b10:	4630      	mov	r0, r6
 8005b12:	4639      	mov	r1, r7
 8005b14:	f7fa ffd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b18:	4681      	mov	r9, r0
 8005b1a:	b168      	cbz	r0, 8005b38 <_dtoa_r+0xc8>
 8005b1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b1e:	2301      	movs	r3, #1
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 8524 	beq.w	8006572 <_dtoa_r+0xb02>
 8005b2a:	4b9a      	ldr	r3, [pc, #616]	; (8005d94 <_dtoa_r+0x324>)
 8005b2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b2e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	f000 bd28 	b.w	8006588 <_dtoa_r+0xb18>
 8005b38:	aa14      	add	r2, sp, #80	; 0x50
 8005b3a:	a915      	add	r1, sp, #84	; 0x54
 8005b3c:	ec47 6b10 	vmov	d0, r6, r7
 8005b40:	4620      	mov	r0, r4
 8005b42:	f001 fbed 	bl	8007320 <__d2b>
 8005b46:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005b4a:	9004      	str	r0, [sp, #16]
 8005b4c:	2d00      	cmp	r5, #0
 8005b4e:	d07c      	beq.n	8005c4a <_dtoa_r+0x1da>
 8005b50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005b54:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005b58:	46b2      	mov	sl, r6
 8005b5a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005b5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b62:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005b66:	2200      	movs	r2, #0
 8005b68:	4b8b      	ldr	r3, [pc, #556]	; (8005d98 <_dtoa_r+0x328>)
 8005b6a:	4650      	mov	r0, sl
 8005b6c:	4659      	mov	r1, fp
 8005b6e:	f7fa fb8b 	bl	8000288 <__aeabi_dsub>
 8005b72:	a381      	add	r3, pc, #516	; (adr r3, 8005d78 <_dtoa_r+0x308>)
 8005b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b78:	f7fa fd3e 	bl	80005f8 <__aeabi_dmul>
 8005b7c:	a380      	add	r3, pc, #512	; (adr r3, 8005d80 <_dtoa_r+0x310>)
 8005b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b82:	f7fa fb83 	bl	800028c <__adddf3>
 8005b86:	4606      	mov	r6, r0
 8005b88:	4628      	mov	r0, r5
 8005b8a:	460f      	mov	r7, r1
 8005b8c:	f7fa fcca 	bl	8000524 <__aeabi_i2d>
 8005b90:	a37d      	add	r3, pc, #500	; (adr r3, 8005d88 <_dtoa_r+0x318>)
 8005b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b96:	f7fa fd2f 	bl	80005f8 <__aeabi_dmul>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	4639      	mov	r1, r7
 8005ba2:	f7fa fb73 	bl	800028c <__adddf3>
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	460f      	mov	r7, r1
 8005baa:	f7fa ffd5 	bl	8000b58 <__aeabi_d2iz>
 8005bae:	2200      	movs	r2, #0
 8005bb0:	4682      	mov	sl, r0
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	4639      	mov	r1, r7
 8005bb8:	f7fa ff90 	bl	8000adc <__aeabi_dcmplt>
 8005bbc:	b148      	cbz	r0, 8005bd2 <_dtoa_r+0x162>
 8005bbe:	4650      	mov	r0, sl
 8005bc0:	f7fa fcb0 	bl	8000524 <__aeabi_i2d>
 8005bc4:	4632      	mov	r2, r6
 8005bc6:	463b      	mov	r3, r7
 8005bc8:	f7fa ff7e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bcc:	b908      	cbnz	r0, 8005bd2 <_dtoa_r+0x162>
 8005bce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bd2:	f1ba 0f16 	cmp.w	sl, #22
 8005bd6:	d859      	bhi.n	8005c8c <_dtoa_r+0x21c>
 8005bd8:	4970      	ldr	r1, [pc, #448]	; (8005d9c <_dtoa_r+0x32c>)
 8005bda:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005bde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005be2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005be6:	f7fa ff97 	bl	8000b18 <__aeabi_dcmpgt>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d050      	beq.n	8005c90 <_dtoa_r+0x220>
 8005bee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005bf8:	1b5d      	subs	r5, r3, r5
 8005bfa:	f1b5 0801 	subs.w	r8, r5, #1
 8005bfe:	bf49      	itett	mi
 8005c00:	f1c5 0301 	rsbmi	r3, r5, #1
 8005c04:	2300      	movpl	r3, #0
 8005c06:	9305      	strmi	r3, [sp, #20]
 8005c08:	f04f 0800 	movmi.w	r8, #0
 8005c0c:	bf58      	it	pl
 8005c0e:	9305      	strpl	r3, [sp, #20]
 8005c10:	f1ba 0f00 	cmp.w	sl, #0
 8005c14:	db3e      	blt.n	8005c94 <_dtoa_r+0x224>
 8005c16:	2300      	movs	r3, #0
 8005c18:	44d0      	add	r8, sl
 8005c1a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005c1e:	9307      	str	r3, [sp, #28]
 8005c20:	9b06      	ldr	r3, [sp, #24]
 8005c22:	2b09      	cmp	r3, #9
 8005c24:	f200 8090 	bhi.w	8005d48 <_dtoa_r+0x2d8>
 8005c28:	2b05      	cmp	r3, #5
 8005c2a:	bfc4      	itt	gt
 8005c2c:	3b04      	subgt	r3, #4
 8005c2e:	9306      	strgt	r3, [sp, #24]
 8005c30:	9b06      	ldr	r3, [sp, #24]
 8005c32:	f1a3 0302 	sub.w	r3, r3, #2
 8005c36:	bfcc      	ite	gt
 8005c38:	2500      	movgt	r5, #0
 8005c3a:	2501      	movle	r5, #1
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	f200 808f 	bhi.w	8005d60 <_dtoa_r+0x2f0>
 8005c42:	e8df f003 	tbb	[pc, r3]
 8005c46:	7f7d      	.short	0x7f7d
 8005c48:	7131      	.short	0x7131
 8005c4a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005c4e:	441d      	add	r5, r3
 8005c50:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005c54:	2820      	cmp	r0, #32
 8005c56:	dd13      	ble.n	8005c80 <_dtoa_r+0x210>
 8005c58:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005c5c:	9b00      	ldr	r3, [sp, #0]
 8005c5e:	fa08 f800 	lsl.w	r8, r8, r0
 8005c62:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005c66:	fa23 f000 	lsr.w	r0, r3, r0
 8005c6a:	ea48 0000 	orr.w	r0, r8, r0
 8005c6e:	f7fa fc49 	bl	8000504 <__aeabi_ui2d>
 8005c72:	2301      	movs	r3, #1
 8005c74:	4682      	mov	sl, r0
 8005c76:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005c7a:	3d01      	subs	r5, #1
 8005c7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c7e:	e772      	b.n	8005b66 <_dtoa_r+0xf6>
 8005c80:	9b00      	ldr	r3, [sp, #0]
 8005c82:	f1c0 0020 	rsb	r0, r0, #32
 8005c86:	fa03 f000 	lsl.w	r0, r3, r0
 8005c8a:	e7f0      	b.n	8005c6e <_dtoa_r+0x1fe>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e7b1      	b.n	8005bf4 <_dtoa_r+0x184>
 8005c90:	900f      	str	r0, [sp, #60]	; 0x3c
 8005c92:	e7b0      	b.n	8005bf6 <_dtoa_r+0x186>
 8005c94:	9b05      	ldr	r3, [sp, #20]
 8005c96:	eba3 030a 	sub.w	r3, r3, sl
 8005c9a:	9305      	str	r3, [sp, #20]
 8005c9c:	f1ca 0300 	rsb	r3, sl, #0
 8005ca0:	9307      	str	r3, [sp, #28]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	930e      	str	r3, [sp, #56]	; 0x38
 8005ca6:	e7bb      	b.n	8005c20 <_dtoa_r+0x1b0>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	930a      	str	r3, [sp, #40]	; 0x28
 8005cac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	dd59      	ble.n	8005d66 <_dtoa_r+0x2f6>
 8005cb2:	9302      	str	r3, [sp, #8]
 8005cb4:	4699      	mov	r9, r3
 8005cb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005cb8:	2200      	movs	r2, #0
 8005cba:	6072      	str	r2, [r6, #4]
 8005cbc:	2204      	movs	r2, #4
 8005cbe:	f102 0014 	add.w	r0, r2, #20
 8005cc2:	4298      	cmp	r0, r3
 8005cc4:	6871      	ldr	r1, [r6, #4]
 8005cc6:	d953      	bls.n	8005d70 <_dtoa_r+0x300>
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f000 ffe8 	bl	8006c9e <_Balloc>
 8005cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cd0:	6030      	str	r0, [r6, #0]
 8005cd2:	f1b9 0f0e 	cmp.w	r9, #14
 8005cd6:	f8d3 b000 	ldr.w	fp, [r3]
 8005cda:	f200 80e6 	bhi.w	8005eaa <_dtoa_r+0x43a>
 8005cde:	2d00      	cmp	r5, #0
 8005ce0:	f000 80e3 	beq.w	8005eaa <_dtoa_r+0x43a>
 8005ce4:	ed9d 7b00 	vldr	d7, [sp]
 8005ce8:	f1ba 0f00 	cmp.w	sl, #0
 8005cec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005cf0:	dd74      	ble.n	8005ddc <_dtoa_r+0x36c>
 8005cf2:	4a2a      	ldr	r2, [pc, #168]	; (8005d9c <_dtoa_r+0x32c>)
 8005cf4:	f00a 030f 	and.w	r3, sl, #15
 8005cf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005cfc:	ed93 7b00 	vldr	d7, [r3]
 8005d00:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005d04:	06f0      	lsls	r0, r6, #27
 8005d06:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005d0a:	d565      	bpl.n	8005dd8 <_dtoa_r+0x368>
 8005d0c:	4b24      	ldr	r3, [pc, #144]	; (8005da0 <_dtoa_r+0x330>)
 8005d0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d16:	f7fa fd99 	bl	800084c <__aeabi_ddiv>
 8005d1a:	e9cd 0100 	strd	r0, r1, [sp]
 8005d1e:	f006 060f 	and.w	r6, r6, #15
 8005d22:	2503      	movs	r5, #3
 8005d24:	4f1e      	ldr	r7, [pc, #120]	; (8005da0 <_dtoa_r+0x330>)
 8005d26:	e04c      	b.n	8005dc2 <_dtoa_r+0x352>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8005d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d2e:	4453      	add	r3, sl
 8005d30:	f103 0901 	add.w	r9, r3, #1
 8005d34:	9302      	str	r3, [sp, #8]
 8005d36:	464b      	mov	r3, r9
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	bfb8      	it	lt
 8005d3c:	2301      	movlt	r3, #1
 8005d3e:	e7ba      	b.n	8005cb6 <_dtoa_r+0x246>
 8005d40:	2300      	movs	r3, #0
 8005d42:	e7b2      	b.n	8005caa <_dtoa_r+0x23a>
 8005d44:	2300      	movs	r3, #0
 8005d46:	e7f0      	b.n	8005d2a <_dtoa_r+0x2ba>
 8005d48:	2501      	movs	r5, #1
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	9306      	str	r3, [sp, #24]
 8005d4e:	950a      	str	r5, [sp, #40]	; 0x28
 8005d50:	f04f 33ff 	mov.w	r3, #4294967295
 8005d54:	9302      	str	r3, [sp, #8]
 8005d56:	4699      	mov	r9, r3
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2312      	movs	r3, #18
 8005d5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8005d5e:	e7aa      	b.n	8005cb6 <_dtoa_r+0x246>
 8005d60:	2301      	movs	r3, #1
 8005d62:	930a      	str	r3, [sp, #40]	; 0x28
 8005d64:	e7f4      	b.n	8005d50 <_dtoa_r+0x2e0>
 8005d66:	2301      	movs	r3, #1
 8005d68:	9302      	str	r3, [sp, #8]
 8005d6a:	4699      	mov	r9, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	e7f5      	b.n	8005d5c <_dtoa_r+0x2ec>
 8005d70:	3101      	adds	r1, #1
 8005d72:	6071      	str	r1, [r6, #4]
 8005d74:	0052      	lsls	r2, r2, #1
 8005d76:	e7a2      	b.n	8005cbe <_dtoa_r+0x24e>
 8005d78:	636f4361 	.word	0x636f4361
 8005d7c:	3fd287a7 	.word	0x3fd287a7
 8005d80:	8b60c8b3 	.word	0x8b60c8b3
 8005d84:	3fc68a28 	.word	0x3fc68a28
 8005d88:	509f79fb 	.word	0x509f79fb
 8005d8c:	3fd34413 	.word	0x3fd34413
 8005d90:	7ff00000 	.word	0x7ff00000
 8005d94:	08007a21 	.word	0x08007a21
 8005d98:	3ff80000 	.word	0x3ff80000
 8005d9c:	08007ae0 	.word	0x08007ae0
 8005da0:	08007ab8 	.word	0x08007ab8
 8005da4:	08007aa9 	.word	0x08007aa9
 8005da8:	07f1      	lsls	r1, r6, #31
 8005daa:	d508      	bpl.n	8005dbe <_dtoa_r+0x34e>
 8005dac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005db4:	f7fa fc20 	bl	80005f8 <__aeabi_dmul>
 8005db8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005dbc:	3501      	adds	r5, #1
 8005dbe:	1076      	asrs	r6, r6, #1
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	2e00      	cmp	r6, #0
 8005dc4:	d1f0      	bne.n	8005da8 <_dtoa_r+0x338>
 8005dc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005dca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dce:	f7fa fd3d 	bl	800084c <__aeabi_ddiv>
 8005dd2:	e9cd 0100 	strd	r0, r1, [sp]
 8005dd6:	e01a      	b.n	8005e0e <_dtoa_r+0x39e>
 8005dd8:	2502      	movs	r5, #2
 8005dda:	e7a3      	b.n	8005d24 <_dtoa_r+0x2b4>
 8005ddc:	f000 80a0 	beq.w	8005f20 <_dtoa_r+0x4b0>
 8005de0:	f1ca 0600 	rsb	r6, sl, #0
 8005de4:	4b9f      	ldr	r3, [pc, #636]	; (8006064 <_dtoa_r+0x5f4>)
 8005de6:	4fa0      	ldr	r7, [pc, #640]	; (8006068 <_dtoa_r+0x5f8>)
 8005de8:	f006 020f 	and.w	r2, r6, #15
 8005dec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005df8:	f7fa fbfe 	bl	80005f8 <__aeabi_dmul>
 8005dfc:	e9cd 0100 	strd	r0, r1, [sp]
 8005e00:	1136      	asrs	r6, r6, #4
 8005e02:	2300      	movs	r3, #0
 8005e04:	2502      	movs	r5, #2
 8005e06:	2e00      	cmp	r6, #0
 8005e08:	d17f      	bne.n	8005f0a <_dtoa_r+0x49a>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e1      	bne.n	8005dd2 <_dtoa_r+0x362>
 8005e0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 8087 	beq.w	8005f24 <_dtoa_r+0x4b4>
 8005e16:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	4b93      	ldr	r3, [pc, #588]	; (800606c <_dtoa_r+0x5fc>)
 8005e1e:	4630      	mov	r0, r6
 8005e20:	4639      	mov	r1, r7
 8005e22:	f7fa fe5b 	bl	8000adc <__aeabi_dcmplt>
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d07c      	beq.n	8005f24 <_dtoa_r+0x4b4>
 8005e2a:	f1b9 0f00 	cmp.w	r9, #0
 8005e2e:	d079      	beq.n	8005f24 <_dtoa_r+0x4b4>
 8005e30:	9b02      	ldr	r3, [sp, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	dd35      	ble.n	8005ea2 <_dtoa_r+0x432>
 8005e36:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005e3a:	9308      	str	r3, [sp, #32]
 8005e3c:	4639      	mov	r1, r7
 8005e3e:	2200      	movs	r2, #0
 8005e40:	4b8b      	ldr	r3, [pc, #556]	; (8006070 <_dtoa_r+0x600>)
 8005e42:	4630      	mov	r0, r6
 8005e44:	f7fa fbd8 	bl	80005f8 <__aeabi_dmul>
 8005e48:	e9cd 0100 	strd	r0, r1, [sp]
 8005e4c:	9f02      	ldr	r7, [sp, #8]
 8005e4e:	3501      	adds	r5, #1
 8005e50:	4628      	mov	r0, r5
 8005e52:	f7fa fb67 	bl	8000524 <__aeabi_i2d>
 8005e56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e5a:	f7fa fbcd 	bl	80005f8 <__aeabi_dmul>
 8005e5e:	2200      	movs	r2, #0
 8005e60:	4b84      	ldr	r3, [pc, #528]	; (8006074 <_dtoa_r+0x604>)
 8005e62:	f7fa fa13 	bl	800028c <__adddf3>
 8005e66:	4605      	mov	r5, r0
 8005e68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005e6c:	2f00      	cmp	r7, #0
 8005e6e:	d15d      	bne.n	8005f2c <_dtoa_r+0x4bc>
 8005e70:	2200      	movs	r2, #0
 8005e72:	4b81      	ldr	r3, [pc, #516]	; (8006078 <_dtoa_r+0x608>)
 8005e74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e78:	f7fa fa06 	bl	8000288 <__aeabi_dsub>
 8005e7c:	462a      	mov	r2, r5
 8005e7e:	4633      	mov	r3, r6
 8005e80:	e9cd 0100 	strd	r0, r1, [sp]
 8005e84:	f7fa fe48 	bl	8000b18 <__aeabi_dcmpgt>
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	f040 8288 	bne.w	800639e <_dtoa_r+0x92e>
 8005e8e:	462a      	mov	r2, r5
 8005e90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005e94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e98:	f7fa fe20 	bl	8000adc <__aeabi_dcmplt>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	f040 827c 	bne.w	800639a <_dtoa_r+0x92a>
 8005ea2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ea6:	e9cd 2300 	strd	r2, r3, [sp]
 8005eaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f2c0 8150 	blt.w	8006152 <_dtoa_r+0x6e2>
 8005eb2:	f1ba 0f0e 	cmp.w	sl, #14
 8005eb6:	f300 814c 	bgt.w	8006152 <_dtoa_r+0x6e2>
 8005eba:	4b6a      	ldr	r3, [pc, #424]	; (8006064 <_dtoa_r+0x5f4>)
 8005ebc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005ec0:	ed93 7b00 	vldr	d7, [r3]
 8005ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ecc:	f280 80d8 	bge.w	8006080 <_dtoa_r+0x610>
 8005ed0:	f1b9 0f00 	cmp.w	r9, #0
 8005ed4:	f300 80d4 	bgt.w	8006080 <_dtoa_r+0x610>
 8005ed8:	f040 825e 	bne.w	8006398 <_dtoa_r+0x928>
 8005edc:	2200      	movs	r2, #0
 8005ede:	4b66      	ldr	r3, [pc, #408]	; (8006078 <_dtoa_r+0x608>)
 8005ee0:	ec51 0b17 	vmov	r0, r1, d7
 8005ee4:	f7fa fb88 	bl	80005f8 <__aeabi_dmul>
 8005ee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005eec:	f7fa fe0a 	bl	8000b04 <__aeabi_dcmpge>
 8005ef0:	464f      	mov	r7, r9
 8005ef2:	464e      	mov	r6, r9
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	f040 8234 	bne.w	8006362 <_dtoa_r+0x8f2>
 8005efa:	2331      	movs	r3, #49	; 0x31
 8005efc:	f10b 0501 	add.w	r5, fp, #1
 8005f00:	f88b 3000 	strb.w	r3, [fp]
 8005f04:	f10a 0a01 	add.w	sl, sl, #1
 8005f08:	e22f      	b.n	800636a <_dtoa_r+0x8fa>
 8005f0a:	07f2      	lsls	r2, r6, #31
 8005f0c:	d505      	bpl.n	8005f1a <_dtoa_r+0x4aa>
 8005f0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f12:	f7fa fb71 	bl	80005f8 <__aeabi_dmul>
 8005f16:	3501      	adds	r5, #1
 8005f18:	2301      	movs	r3, #1
 8005f1a:	1076      	asrs	r6, r6, #1
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	e772      	b.n	8005e06 <_dtoa_r+0x396>
 8005f20:	2502      	movs	r5, #2
 8005f22:	e774      	b.n	8005e0e <_dtoa_r+0x39e>
 8005f24:	f8cd a020 	str.w	sl, [sp, #32]
 8005f28:	464f      	mov	r7, r9
 8005f2a:	e791      	b.n	8005e50 <_dtoa_r+0x3e0>
 8005f2c:	4b4d      	ldr	r3, [pc, #308]	; (8006064 <_dtoa_r+0x5f4>)
 8005f2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d047      	beq.n	8005fcc <_dtoa_r+0x55c>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	2000      	movs	r0, #0
 8005f42:	494e      	ldr	r1, [pc, #312]	; (800607c <_dtoa_r+0x60c>)
 8005f44:	f7fa fc82 	bl	800084c <__aeabi_ddiv>
 8005f48:	462a      	mov	r2, r5
 8005f4a:	4633      	mov	r3, r6
 8005f4c:	f7fa f99c 	bl	8000288 <__aeabi_dsub>
 8005f50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005f54:	465d      	mov	r5, fp
 8005f56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f5a:	f7fa fdfd 	bl	8000b58 <__aeabi_d2iz>
 8005f5e:	4606      	mov	r6, r0
 8005f60:	f7fa fae0 	bl	8000524 <__aeabi_i2d>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f6c:	f7fa f98c 	bl	8000288 <__aeabi_dsub>
 8005f70:	3630      	adds	r6, #48	; 0x30
 8005f72:	f805 6b01 	strb.w	r6, [r5], #1
 8005f76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005f7a:	e9cd 0100 	strd	r0, r1, [sp]
 8005f7e:	f7fa fdad 	bl	8000adc <__aeabi_dcmplt>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	d163      	bne.n	800604e <_dtoa_r+0x5de>
 8005f86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	4937      	ldr	r1, [pc, #220]	; (800606c <_dtoa_r+0x5fc>)
 8005f8e:	f7fa f97b 	bl	8000288 <__aeabi_dsub>
 8005f92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005f96:	f7fa fda1 	bl	8000adc <__aeabi_dcmplt>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	f040 80b7 	bne.w	800610e <_dtoa_r+0x69e>
 8005fa0:	eba5 030b 	sub.w	r3, r5, fp
 8005fa4:	429f      	cmp	r7, r3
 8005fa6:	f77f af7c 	ble.w	8005ea2 <_dtoa_r+0x432>
 8005faa:	2200      	movs	r2, #0
 8005fac:	4b30      	ldr	r3, [pc, #192]	; (8006070 <_dtoa_r+0x600>)
 8005fae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fb2:	f7fa fb21 	bl	80005f8 <__aeabi_dmul>
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005fbc:	4b2c      	ldr	r3, [pc, #176]	; (8006070 <_dtoa_r+0x600>)
 8005fbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fc2:	f7fa fb19 	bl	80005f8 <__aeabi_dmul>
 8005fc6:	e9cd 0100 	strd	r0, r1, [sp]
 8005fca:	e7c4      	b.n	8005f56 <_dtoa_r+0x4e6>
 8005fcc:	462a      	mov	r2, r5
 8005fce:	4633      	mov	r3, r6
 8005fd0:	f7fa fb12 	bl	80005f8 <__aeabi_dmul>
 8005fd4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005fd8:	eb0b 0507 	add.w	r5, fp, r7
 8005fdc:	465e      	mov	r6, fp
 8005fde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fe2:	f7fa fdb9 	bl	8000b58 <__aeabi_d2iz>
 8005fe6:	4607      	mov	r7, r0
 8005fe8:	f7fa fa9c 	bl	8000524 <__aeabi_i2d>
 8005fec:	3730      	adds	r7, #48	; 0x30
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ff6:	f7fa f947 	bl	8000288 <__aeabi_dsub>
 8005ffa:	f806 7b01 	strb.w	r7, [r6], #1
 8005ffe:	42ae      	cmp	r6, r5
 8006000:	e9cd 0100 	strd	r0, r1, [sp]
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	d126      	bne.n	8006058 <_dtoa_r+0x5e8>
 800600a:	4b1c      	ldr	r3, [pc, #112]	; (800607c <_dtoa_r+0x60c>)
 800600c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006010:	f7fa f93c 	bl	800028c <__adddf3>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	e9dd 0100 	ldrd	r0, r1, [sp]
 800601c:	f7fa fd7c 	bl	8000b18 <__aeabi_dcmpgt>
 8006020:	2800      	cmp	r0, #0
 8006022:	d174      	bne.n	800610e <_dtoa_r+0x69e>
 8006024:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006028:	2000      	movs	r0, #0
 800602a:	4914      	ldr	r1, [pc, #80]	; (800607c <_dtoa_r+0x60c>)
 800602c:	f7fa f92c 	bl	8000288 <__aeabi_dsub>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006038:	f7fa fd50 	bl	8000adc <__aeabi_dcmplt>
 800603c:	2800      	cmp	r0, #0
 800603e:	f43f af30 	beq.w	8005ea2 <_dtoa_r+0x432>
 8006042:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006046:	2b30      	cmp	r3, #48	; 0x30
 8006048:	f105 32ff 	add.w	r2, r5, #4294967295
 800604c:	d002      	beq.n	8006054 <_dtoa_r+0x5e4>
 800604e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006052:	e04a      	b.n	80060ea <_dtoa_r+0x67a>
 8006054:	4615      	mov	r5, r2
 8006056:	e7f4      	b.n	8006042 <_dtoa_r+0x5d2>
 8006058:	4b05      	ldr	r3, [pc, #20]	; (8006070 <_dtoa_r+0x600>)
 800605a:	f7fa facd 	bl	80005f8 <__aeabi_dmul>
 800605e:	e9cd 0100 	strd	r0, r1, [sp]
 8006062:	e7bc      	b.n	8005fde <_dtoa_r+0x56e>
 8006064:	08007ae0 	.word	0x08007ae0
 8006068:	08007ab8 	.word	0x08007ab8
 800606c:	3ff00000 	.word	0x3ff00000
 8006070:	40240000 	.word	0x40240000
 8006074:	401c0000 	.word	0x401c0000
 8006078:	40140000 	.word	0x40140000
 800607c:	3fe00000 	.word	0x3fe00000
 8006080:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006084:	465d      	mov	r5, fp
 8006086:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800608a:	4630      	mov	r0, r6
 800608c:	4639      	mov	r1, r7
 800608e:	f7fa fbdd 	bl	800084c <__aeabi_ddiv>
 8006092:	f7fa fd61 	bl	8000b58 <__aeabi_d2iz>
 8006096:	4680      	mov	r8, r0
 8006098:	f7fa fa44 	bl	8000524 <__aeabi_i2d>
 800609c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060a0:	f7fa faaa 	bl	80005f8 <__aeabi_dmul>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4630      	mov	r0, r6
 80060aa:	4639      	mov	r1, r7
 80060ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80060b0:	f7fa f8ea 	bl	8000288 <__aeabi_dsub>
 80060b4:	f805 6b01 	strb.w	r6, [r5], #1
 80060b8:	eba5 060b 	sub.w	r6, r5, fp
 80060bc:	45b1      	cmp	r9, r6
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	d139      	bne.n	8006138 <_dtoa_r+0x6c8>
 80060c4:	f7fa f8e2 	bl	800028c <__adddf3>
 80060c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060cc:	4606      	mov	r6, r0
 80060ce:	460f      	mov	r7, r1
 80060d0:	f7fa fd22 	bl	8000b18 <__aeabi_dcmpgt>
 80060d4:	b9c8      	cbnz	r0, 800610a <_dtoa_r+0x69a>
 80060d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060da:	4630      	mov	r0, r6
 80060dc:	4639      	mov	r1, r7
 80060de:	f7fa fcf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80060e2:	b110      	cbz	r0, 80060ea <_dtoa_r+0x67a>
 80060e4:	f018 0f01 	tst.w	r8, #1
 80060e8:	d10f      	bne.n	800610a <_dtoa_r+0x69a>
 80060ea:	9904      	ldr	r1, [sp, #16]
 80060ec:	4620      	mov	r0, r4
 80060ee:	f000 fe0a 	bl	8006d06 <_Bfree>
 80060f2:	2300      	movs	r3, #0
 80060f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060f6:	702b      	strb	r3, [r5, #0]
 80060f8:	f10a 0301 	add.w	r3, sl, #1
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8241 	beq.w	8006588 <_dtoa_r+0xb18>
 8006106:	601d      	str	r5, [r3, #0]
 8006108:	e23e      	b.n	8006588 <_dtoa_r+0xb18>
 800610a:	f8cd a020 	str.w	sl, [sp, #32]
 800610e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006112:	2a39      	cmp	r2, #57	; 0x39
 8006114:	f105 33ff 	add.w	r3, r5, #4294967295
 8006118:	d108      	bne.n	800612c <_dtoa_r+0x6bc>
 800611a:	459b      	cmp	fp, r3
 800611c:	d10a      	bne.n	8006134 <_dtoa_r+0x6c4>
 800611e:	9b08      	ldr	r3, [sp, #32]
 8006120:	3301      	adds	r3, #1
 8006122:	9308      	str	r3, [sp, #32]
 8006124:	2330      	movs	r3, #48	; 0x30
 8006126:	f88b 3000 	strb.w	r3, [fp]
 800612a:	465b      	mov	r3, fp
 800612c:	781a      	ldrb	r2, [r3, #0]
 800612e:	3201      	adds	r2, #1
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	e78c      	b.n	800604e <_dtoa_r+0x5de>
 8006134:	461d      	mov	r5, r3
 8006136:	e7ea      	b.n	800610e <_dtoa_r+0x69e>
 8006138:	2200      	movs	r2, #0
 800613a:	4b9b      	ldr	r3, [pc, #620]	; (80063a8 <_dtoa_r+0x938>)
 800613c:	f7fa fa5c 	bl	80005f8 <__aeabi_dmul>
 8006140:	2200      	movs	r2, #0
 8006142:	2300      	movs	r3, #0
 8006144:	4606      	mov	r6, r0
 8006146:	460f      	mov	r7, r1
 8006148:	f7fa fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800614c:	2800      	cmp	r0, #0
 800614e:	d09a      	beq.n	8006086 <_dtoa_r+0x616>
 8006150:	e7cb      	b.n	80060ea <_dtoa_r+0x67a>
 8006152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006154:	2a00      	cmp	r2, #0
 8006156:	f000 808b 	beq.w	8006270 <_dtoa_r+0x800>
 800615a:	9a06      	ldr	r2, [sp, #24]
 800615c:	2a01      	cmp	r2, #1
 800615e:	dc6e      	bgt.n	800623e <_dtoa_r+0x7ce>
 8006160:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006162:	2a00      	cmp	r2, #0
 8006164:	d067      	beq.n	8006236 <_dtoa_r+0x7c6>
 8006166:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800616a:	9f07      	ldr	r7, [sp, #28]
 800616c:	9d05      	ldr	r5, [sp, #20]
 800616e:	9a05      	ldr	r2, [sp, #20]
 8006170:	2101      	movs	r1, #1
 8006172:	441a      	add	r2, r3
 8006174:	4620      	mov	r0, r4
 8006176:	9205      	str	r2, [sp, #20]
 8006178:	4498      	add	r8, r3
 800617a:	f000 fea2 	bl	8006ec2 <__i2b>
 800617e:	4606      	mov	r6, r0
 8006180:	2d00      	cmp	r5, #0
 8006182:	dd0c      	ble.n	800619e <_dtoa_r+0x72e>
 8006184:	f1b8 0f00 	cmp.w	r8, #0
 8006188:	dd09      	ble.n	800619e <_dtoa_r+0x72e>
 800618a:	4545      	cmp	r5, r8
 800618c:	9a05      	ldr	r2, [sp, #20]
 800618e:	462b      	mov	r3, r5
 8006190:	bfa8      	it	ge
 8006192:	4643      	movge	r3, r8
 8006194:	1ad2      	subs	r2, r2, r3
 8006196:	9205      	str	r2, [sp, #20]
 8006198:	1aed      	subs	r5, r5, r3
 800619a:	eba8 0803 	sub.w	r8, r8, r3
 800619e:	9b07      	ldr	r3, [sp, #28]
 80061a0:	b1eb      	cbz	r3, 80061de <_dtoa_r+0x76e>
 80061a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d067      	beq.n	8006278 <_dtoa_r+0x808>
 80061a8:	b18f      	cbz	r7, 80061ce <_dtoa_r+0x75e>
 80061aa:	4631      	mov	r1, r6
 80061ac:	463a      	mov	r2, r7
 80061ae:	4620      	mov	r0, r4
 80061b0:	f000 ff26 	bl	8007000 <__pow5mult>
 80061b4:	9a04      	ldr	r2, [sp, #16]
 80061b6:	4601      	mov	r1, r0
 80061b8:	4606      	mov	r6, r0
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 fe8a 	bl	8006ed4 <__multiply>
 80061c0:	9904      	ldr	r1, [sp, #16]
 80061c2:	9008      	str	r0, [sp, #32]
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 fd9e 	bl	8006d06 <_Bfree>
 80061ca:	9b08      	ldr	r3, [sp, #32]
 80061cc:	9304      	str	r3, [sp, #16]
 80061ce:	9b07      	ldr	r3, [sp, #28]
 80061d0:	1bda      	subs	r2, r3, r7
 80061d2:	d004      	beq.n	80061de <_dtoa_r+0x76e>
 80061d4:	9904      	ldr	r1, [sp, #16]
 80061d6:	4620      	mov	r0, r4
 80061d8:	f000 ff12 	bl	8007000 <__pow5mult>
 80061dc:	9004      	str	r0, [sp, #16]
 80061de:	2101      	movs	r1, #1
 80061e0:	4620      	mov	r0, r4
 80061e2:	f000 fe6e 	bl	8006ec2 <__i2b>
 80061e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061e8:	4607      	mov	r7, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 81d0 	beq.w	8006590 <_dtoa_r+0xb20>
 80061f0:	461a      	mov	r2, r3
 80061f2:	4601      	mov	r1, r0
 80061f4:	4620      	mov	r0, r4
 80061f6:	f000 ff03 	bl	8007000 <__pow5mult>
 80061fa:	9b06      	ldr	r3, [sp, #24]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	4607      	mov	r7, r0
 8006200:	dc40      	bgt.n	8006284 <_dtoa_r+0x814>
 8006202:	9b00      	ldr	r3, [sp, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d139      	bne.n	800627c <_dtoa_r+0x80c>
 8006208:	9b01      	ldr	r3, [sp, #4]
 800620a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800620e:	2b00      	cmp	r3, #0
 8006210:	d136      	bne.n	8006280 <_dtoa_r+0x810>
 8006212:	9b01      	ldr	r3, [sp, #4]
 8006214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006218:	0d1b      	lsrs	r3, r3, #20
 800621a:	051b      	lsls	r3, r3, #20
 800621c:	b12b      	cbz	r3, 800622a <_dtoa_r+0x7ba>
 800621e:	9b05      	ldr	r3, [sp, #20]
 8006220:	3301      	adds	r3, #1
 8006222:	9305      	str	r3, [sp, #20]
 8006224:	f108 0801 	add.w	r8, r8, #1
 8006228:	2301      	movs	r3, #1
 800622a:	9307      	str	r3, [sp, #28]
 800622c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800622e:	2b00      	cmp	r3, #0
 8006230:	d12a      	bne.n	8006288 <_dtoa_r+0x818>
 8006232:	2001      	movs	r0, #1
 8006234:	e030      	b.n	8006298 <_dtoa_r+0x828>
 8006236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006238:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800623c:	e795      	b.n	800616a <_dtoa_r+0x6fa>
 800623e:	9b07      	ldr	r3, [sp, #28]
 8006240:	f109 37ff 	add.w	r7, r9, #4294967295
 8006244:	42bb      	cmp	r3, r7
 8006246:	bfbf      	itttt	lt
 8006248:	9b07      	ldrlt	r3, [sp, #28]
 800624a:	9707      	strlt	r7, [sp, #28]
 800624c:	1afa      	sublt	r2, r7, r3
 800624e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006250:	bfbb      	ittet	lt
 8006252:	189b      	addlt	r3, r3, r2
 8006254:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006256:	1bdf      	subge	r7, r3, r7
 8006258:	2700      	movlt	r7, #0
 800625a:	f1b9 0f00 	cmp.w	r9, #0
 800625e:	bfb5      	itete	lt
 8006260:	9b05      	ldrlt	r3, [sp, #20]
 8006262:	9d05      	ldrge	r5, [sp, #20]
 8006264:	eba3 0509 	sublt.w	r5, r3, r9
 8006268:	464b      	movge	r3, r9
 800626a:	bfb8      	it	lt
 800626c:	2300      	movlt	r3, #0
 800626e:	e77e      	b.n	800616e <_dtoa_r+0x6fe>
 8006270:	9f07      	ldr	r7, [sp, #28]
 8006272:	9d05      	ldr	r5, [sp, #20]
 8006274:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006276:	e783      	b.n	8006180 <_dtoa_r+0x710>
 8006278:	9a07      	ldr	r2, [sp, #28]
 800627a:	e7ab      	b.n	80061d4 <_dtoa_r+0x764>
 800627c:	2300      	movs	r3, #0
 800627e:	e7d4      	b.n	800622a <_dtoa_r+0x7ba>
 8006280:	9b00      	ldr	r3, [sp, #0]
 8006282:	e7d2      	b.n	800622a <_dtoa_r+0x7ba>
 8006284:	2300      	movs	r3, #0
 8006286:	9307      	str	r3, [sp, #28]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800628e:	6918      	ldr	r0, [r3, #16]
 8006290:	f000 fdc9 	bl	8006e26 <__hi0bits>
 8006294:	f1c0 0020 	rsb	r0, r0, #32
 8006298:	4440      	add	r0, r8
 800629a:	f010 001f 	ands.w	r0, r0, #31
 800629e:	d047      	beq.n	8006330 <_dtoa_r+0x8c0>
 80062a0:	f1c0 0320 	rsb	r3, r0, #32
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	dd3b      	ble.n	8006320 <_dtoa_r+0x8b0>
 80062a8:	9b05      	ldr	r3, [sp, #20]
 80062aa:	f1c0 001c 	rsb	r0, r0, #28
 80062ae:	4403      	add	r3, r0
 80062b0:	9305      	str	r3, [sp, #20]
 80062b2:	4405      	add	r5, r0
 80062b4:	4480      	add	r8, r0
 80062b6:	9b05      	ldr	r3, [sp, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	dd05      	ble.n	80062c8 <_dtoa_r+0x858>
 80062bc:	461a      	mov	r2, r3
 80062be:	9904      	ldr	r1, [sp, #16]
 80062c0:	4620      	mov	r0, r4
 80062c2:	f000 feeb 	bl	800709c <__lshift>
 80062c6:	9004      	str	r0, [sp, #16]
 80062c8:	f1b8 0f00 	cmp.w	r8, #0
 80062cc:	dd05      	ble.n	80062da <_dtoa_r+0x86a>
 80062ce:	4639      	mov	r1, r7
 80062d0:	4642      	mov	r2, r8
 80062d2:	4620      	mov	r0, r4
 80062d4:	f000 fee2 	bl	800709c <__lshift>
 80062d8:	4607      	mov	r7, r0
 80062da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062dc:	b353      	cbz	r3, 8006334 <_dtoa_r+0x8c4>
 80062de:	4639      	mov	r1, r7
 80062e0:	9804      	ldr	r0, [sp, #16]
 80062e2:	f000 ff2f 	bl	8007144 <__mcmp>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	da24      	bge.n	8006334 <_dtoa_r+0x8c4>
 80062ea:	2300      	movs	r3, #0
 80062ec:	220a      	movs	r2, #10
 80062ee:	9904      	ldr	r1, [sp, #16]
 80062f0:	4620      	mov	r0, r4
 80062f2:	f000 fd1f 	bl	8006d34 <__multadd>
 80062f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f8:	9004      	str	r0, [sp, #16]
 80062fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 814d 	beq.w	800659e <_dtoa_r+0xb2e>
 8006304:	2300      	movs	r3, #0
 8006306:	4631      	mov	r1, r6
 8006308:	220a      	movs	r2, #10
 800630a:	4620      	mov	r0, r4
 800630c:	f000 fd12 	bl	8006d34 <__multadd>
 8006310:	9b02      	ldr	r3, [sp, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	4606      	mov	r6, r0
 8006316:	dc4f      	bgt.n	80063b8 <_dtoa_r+0x948>
 8006318:	9b06      	ldr	r3, [sp, #24]
 800631a:	2b02      	cmp	r3, #2
 800631c:	dd4c      	ble.n	80063b8 <_dtoa_r+0x948>
 800631e:	e011      	b.n	8006344 <_dtoa_r+0x8d4>
 8006320:	d0c9      	beq.n	80062b6 <_dtoa_r+0x846>
 8006322:	9a05      	ldr	r2, [sp, #20]
 8006324:	331c      	adds	r3, #28
 8006326:	441a      	add	r2, r3
 8006328:	9205      	str	r2, [sp, #20]
 800632a:	441d      	add	r5, r3
 800632c:	4498      	add	r8, r3
 800632e:	e7c2      	b.n	80062b6 <_dtoa_r+0x846>
 8006330:	4603      	mov	r3, r0
 8006332:	e7f6      	b.n	8006322 <_dtoa_r+0x8b2>
 8006334:	f1b9 0f00 	cmp.w	r9, #0
 8006338:	dc38      	bgt.n	80063ac <_dtoa_r+0x93c>
 800633a:	9b06      	ldr	r3, [sp, #24]
 800633c:	2b02      	cmp	r3, #2
 800633e:	dd35      	ble.n	80063ac <_dtoa_r+0x93c>
 8006340:	f8cd 9008 	str.w	r9, [sp, #8]
 8006344:	9b02      	ldr	r3, [sp, #8]
 8006346:	b963      	cbnz	r3, 8006362 <_dtoa_r+0x8f2>
 8006348:	4639      	mov	r1, r7
 800634a:	2205      	movs	r2, #5
 800634c:	4620      	mov	r0, r4
 800634e:	f000 fcf1 	bl	8006d34 <__multadd>
 8006352:	4601      	mov	r1, r0
 8006354:	4607      	mov	r7, r0
 8006356:	9804      	ldr	r0, [sp, #16]
 8006358:	f000 fef4 	bl	8007144 <__mcmp>
 800635c:	2800      	cmp	r0, #0
 800635e:	f73f adcc 	bgt.w	8005efa <_dtoa_r+0x48a>
 8006362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006364:	465d      	mov	r5, fp
 8006366:	ea6f 0a03 	mvn.w	sl, r3
 800636a:	f04f 0900 	mov.w	r9, #0
 800636e:	4639      	mov	r1, r7
 8006370:	4620      	mov	r0, r4
 8006372:	f000 fcc8 	bl	8006d06 <_Bfree>
 8006376:	2e00      	cmp	r6, #0
 8006378:	f43f aeb7 	beq.w	80060ea <_dtoa_r+0x67a>
 800637c:	f1b9 0f00 	cmp.w	r9, #0
 8006380:	d005      	beq.n	800638e <_dtoa_r+0x91e>
 8006382:	45b1      	cmp	r9, r6
 8006384:	d003      	beq.n	800638e <_dtoa_r+0x91e>
 8006386:	4649      	mov	r1, r9
 8006388:	4620      	mov	r0, r4
 800638a:	f000 fcbc 	bl	8006d06 <_Bfree>
 800638e:	4631      	mov	r1, r6
 8006390:	4620      	mov	r0, r4
 8006392:	f000 fcb8 	bl	8006d06 <_Bfree>
 8006396:	e6a8      	b.n	80060ea <_dtoa_r+0x67a>
 8006398:	2700      	movs	r7, #0
 800639a:	463e      	mov	r6, r7
 800639c:	e7e1      	b.n	8006362 <_dtoa_r+0x8f2>
 800639e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80063a2:	463e      	mov	r6, r7
 80063a4:	e5a9      	b.n	8005efa <_dtoa_r+0x48a>
 80063a6:	bf00      	nop
 80063a8:	40240000 	.word	0x40240000
 80063ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 80fa 	beq.w	80065ac <_dtoa_r+0xb3c>
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	dd05      	ble.n	80063c8 <_dtoa_r+0x958>
 80063bc:	4631      	mov	r1, r6
 80063be:	462a      	mov	r2, r5
 80063c0:	4620      	mov	r0, r4
 80063c2:	f000 fe6b 	bl	800709c <__lshift>
 80063c6:	4606      	mov	r6, r0
 80063c8:	9b07      	ldr	r3, [sp, #28]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d04c      	beq.n	8006468 <_dtoa_r+0x9f8>
 80063ce:	6871      	ldr	r1, [r6, #4]
 80063d0:	4620      	mov	r0, r4
 80063d2:	f000 fc64 	bl	8006c9e <_Balloc>
 80063d6:	6932      	ldr	r2, [r6, #16]
 80063d8:	3202      	adds	r2, #2
 80063da:	4605      	mov	r5, r0
 80063dc:	0092      	lsls	r2, r2, #2
 80063de:	f106 010c 	add.w	r1, r6, #12
 80063e2:	300c      	adds	r0, #12
 80063e4:	f000 fc50 	bl	8006c88 <memcpy>
 80063e8:	2201      	movs	r2, #1
 80063ea:	4629      	mov	r1, r5
 80063ec:	4620      	mov	r0, r4
 80063ee:	f000 fe55 	bl	800709c <__lshift>
 80063f2:	9b00      	ldr	r3, [sp, #0]
 80063f4:	f8cd b014 	str.w	fp, [sp, #20]
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	46b1      	mov	r9, r6
 80063fe:	9307      	str	r3, [sp, #28]
 8006400:	4606      	mov	r6, r0
 8006402:	4639      	mov	r1, r7
 8006404:	9804      	ldr	r0, [sp, #16]
 8006406:	f7ff faa5 	bl	8005954 <quorem>
 800640a:	4649      	mov	r1, r9
 800640c:	4605      	mov	r5, r0
 800640e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006412:	9804      	ldr	r0, [sp, #16]
 8006414:	f000 fe96 	bl	8007144 <__mcmp>
 8006418:	4632      	mov	r2, r6
 800641a:	9000      	str	r0, [sp, #0]
 800641c:	4639      	mov	r1, r7
 800641e:	4620      	mov	r0, r4
 8006420:	f000 feaa 	bl	8007178 <__mdiff>
 8006424:	68c3      	ldr	r3, [r0, #12]
 8006426:	4602      	mov	r2, r0
 8006428:	bb03      	cbnz	r3, 800646c <_dtoa_r+0x9fc>
 800642a:	4601      	mov	r1, r0
 800642c:	9008      	str	r0, [sp, #32]
 800642e:	9804      	ldr	r0, [sp, #16]
 8006430:	f000 fe88 	bl	8007144 <__mcmp>
 8006434:	9a08      	ldr	r2, [sp, #32]
 8006436:	4603      	mov	r3, r0
 8006438:	4611      	mov	r1, r2
 800643a:	4620      	mov	r0, r4
 800643c:	9308      	str	r3, [sp, #32]
 800643e:	f000 fc62 	bl	8006d06 <_Bfree>
 8006442:	9b08      	ldr	r3, [sp, #32]
 8006444:	b9a3      	cbnz	r3, 8006470 <_dtoa_r+0xa00>
 8006446:	9a06      	ldr	r2, [sp, #24]
 8006448:	b992      	cbnz	r2, 8006470 <_dtoa_r+0xa00>
 800644a:	9a07      	ldr	r2, [sp, #28]
 800644c:	b982      	cbnz	r2, 8006470 <_dtoa_r+0xa00>
 800644e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006452:	d029      	beq.n	80064a8 <_dtoa_r+0xa38>
 8006454:	9b00      	ldr	r3, [sp, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	dd01      	ble.n	800645e <_dtoa_r+0x9ee>
 800645a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800645e:	9b05      	ldr	r3, [sp, #20]
 8006460:	1c5d      	adds	r5, r3, #1
 8006462:	f883 8000 	strb.w	r8, [r3]
 8006466:	e782      	b.n	800636e <_dtoa_r+0x8fe>
 8006468:	4630      	mov	r0, r6
 800646a:	e7c2      	b.n	80063f2 <_dtoa_r+0x982>
 800646c:	2301      	movs	r3, #1
 800646e:	e7e3      	b.n	8006438 <_dtoa_r+0x9c8>
 8006470:	9a00      	ldr	r2, [sp, #0]
 8006472:	2a00      	cmp	r2, #0
 8006474:	db04      	blt.n	8006480 <_dtoa_r+0xa10>
 8006476:	d125      	bne.n	80064c4 <_dtoa_r+0xa54>
 8006478:	9a06      	ldr	r2, [sp, #24]
 800647a:	bb1a      	cbnz	r2, 80064c4 <_dtoa_r+0xa54>
 800647c:	9a07      	ldr	r2, [sp, #28]
 800647e:	bb0a      	cbnz	r2, 80064c4 <_dtoa_r+0xa54>
 8006480:	2b00      	cmp	r3, #0
 8006482:	ddec      	ble.n	800645e <_dtoa_r+0x9ee>
 8006484:	2201      	movs	r2, #1
 8006486:	9904      	ldr	r1, [sp, #16]
 8006488:	4620      	mov	r0, r4
 800648a:	f000 fe07 	bl	800709c <__lshift>
 800648e:	4639      	mov	r1, r7
 8006490:	9004      	str	r0, [sp, #16]
 8006492:	f000 fe57 	bl	8007144 <__mcmp>
 8006496:	2800      	cmp	r0, #0
 8006498:	dc03      	bgt.n	80064a2 <_dtoa_r+0xa32>
 800649a:	d1e0      	bne.n	800645e <_dtoa_r+0x9ee>
 800649c:	f018 0f01 	tst.w	r8, #1
 80064a0:	d0dd      	beq.n	800645e <_dtoa_r+0x9ee>
 80064a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80064a6:	d1d8      	bne.n	800645a <_dtoa_r+0x9ea>
 80064a8:	9b05      	ldr	r3, [sp, #20]
 80064aa:	9a05      	ldr	r2, [sp, #20]
 80064ac:	1c5d      	adds	r5, r3, #1
 80064ae:	2339      	movs	r3, #57	; 0x39
 80064b0:	7013      	strb	r3, [r2, #0]
 80064b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064b6:	2b39      	cmp	r3, #57	; 0x39
 80064b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80064bc:	d04f      	beq.n	800655e <_dtoa_r+0xaee>
 80064be:	3301      	adds	r3, #1
 80064c0:	7013      	strb	r3, [r2, #0]
 80064c2:	e754      	b.n	800636e <_dtoa_r+0x8fe>
 80064c4:	9a05      	ldr	r2, [sp, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f102 0501 	add.w	r5, r2, #1
 80064cc:	dd06      	ble.n	80064dc <_dtoa_r+0xa6c>
 80064ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80064d2:	d0e9      	beq.n	80064a8 <_dtoa_r+0xa38>
 80064d4:	f108 0801 	add.w	r8, r8, #1
 80064d8:	9b05      	ldr	r3, [sp, #20]
 80064da:	e7c2      	b.n	8006462 <_dtoa_r+0x9f2>
 80064dc:	9a02      	ldr	r2, [sp, #8]
 80064de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80064e2:	eba5 030b 	sub.w	r3, r5, fp
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d021      	beq.n	800652e <_dtoa_r+0xabe>
 80064ea:	2300      	movs	r3, #0
 80064ec:	220a      	movs	r2, #10
 80064ee:	9904      	ldr	r1, [sp, #16]
 80064f0:	4620      	mov	r0, r4
 80064f2:	f000 fc1f 	bl	8006d34 <__multadd>
 80064f6:	45b1      	cmp	r9, r6
 80064f8:	9004      	str	r0, [sp, #16]
 80064fa:	f04f 0300 	mov.w	r3, #0
 80064fe:	f04f 020a 	mov.w	r2, #10
 8006502:	4649      	mov	r1, r9
 8006504:	4620      	mov	r0, r4
 8006506:	d105      	bne.n	8006514 <_dtoa_r+0xaa4>
 8006508:	f000 fc14 	bl	8006d34 <__multadd>
 800650c:	4681      	mov	r9, r0
 800650e:	4606      	mov	r6, r0
 8006510:	9505      	str	r5, [sp, #20]
 8006512:	e776      	b.n	8006402 <_dtoa_r+0x992>
 8006514:	f000 fc0e 	bl	8006d34 <__multadd>
 8006518:	4631      	mov	r1, r6
 800651a:	4681      	mov	r9, r0
 800651c:	2300      	movs	r3, #0
 800651e:	220a      	movs	r2, #10
 8006520:	4620      	mov	r0, r4
 8006522:	f000 fc07 	bl	8006d34 <__multadd>
 8006526:	4606      	mov	r6, r0
 8006528:	e7f2      	b.n	8006510 <_dtoa_r+0xaa0>
 800652a:	f04f 0900 	mov.w	r9, #0
 800652e:	2201      	movs	r2, #1
 8006530:	9904      	ldr	r1, [sp, #16]
 8006532:	4620      	mov	r0, r4
 8006534:	f000 fdb2 	bl	800709c <__lshift>
 8006538:	4639      	mov	r1, r7
 800653a:	9004      	str	r0, [sp, #16]
 800653c:	f000 fe02 	bl	8007144 <__mcmp>
 8006540:	2800      	cmp	r0, #0
 8006542:	dcb6      	bgt.n	80064b2 <_dtoa_r+0xa42>
 8006544:	d102      	bne.n	800654c <_dtoa_r+0xadc>
 8006546:	f018 0f01 	tst.w	r8, #1
 800654a:	d1b2      	bne.n	80064b2 <_dtoa_r+0xa42>
 800654c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006550:	2b30      	cmp	r3, #48	; 0x30
 8006552:	f105 32ff 	add.w	r2, r5, #4294967295
 8006556:	f47f af0a 	bne.w	800636e <_dtoa_r+0x8fe>
 800655a:	4615      	mov	r5, r2
 800655c:	e7f6      	b.n	800654c <_dtoa_r+0xadc>
 800655e:	4593      	cmp	fp, r2
 8006560:	d105      	bne.n	800656e <_dtoa_r+0xafe>
 8006562:	2331      	movs	r3, #49	; 0x31
 8006564:	f10a 0a01 	add.w	sl, sl, #1
 8006568:	f88b 3000 	strb.w	r3, [fp]
 800656c:	e6ff      	b.n	800636e <_dtoa_r+0x8fe>
 800656e:	4615      	mov	r5, r2
 8006570:	e79f      	b.n	80064b2 <_dtoa_r+0xa42>
 8006572:	f8df b064 	ldr.w	fp, [pc, #100]	; 80065d8 <_dtoa_r+0xb68>
 8006576:	e007      	b.n	8006588 <_dtoa_r+0xb18>
 8006578:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800657a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80065dc <_dtoa_r+0xb6c>
 800657e:	b11b      	cbz	r3, 8006588 <_dtoa_r+0xb18>
 8006580:	f10b 0308 	add.w	r3, fp, #8
 8006584:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	4658      	mov	r0, fp
 800658a:	b017      	add	sp, #92	; 0x5c
 800658c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006590:	9b06      	ldr	r3, [sp, #24]
 8006592:	2b01      	cmp	r3, #1
 8006594:	f77f ae35 	ble.w	8006202 <_dtoa_r+0x792>
 8006598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800659a:	9307      	str	r3, [sp, #28]
 800659c:	e649      	b.n	8006232 <_dtoa_r+0x7c2>
 800659e:	9b02      	ldr	r3, [sp, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	dc03      	bgt.n	80065ac <_dtoa_r+0xb3c>
 80065a4:	9b06      	ldr	r3, [sp, #24]
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	f73f aecc 	bgt.w	8006344 <_dtoa_r+0x8d4>
 80065ac:	465d      	mov	r5, fp
 80065ae:	4639      	mov	r1, r7
 80065b0:	9804      	ldr	r0, [sp, #16]
 80065b2:	f7ff f9cf 	bl	8005954 <quorem>
 80065b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80065ba:	f805 8b01 	strb.w	r8, [r5], #1
 80065be:	9a02      	ldr	r2, [sp, #8]
 80065c0:	eba5 030b 	sub.w	r3, r5, fp
 80065c4:	429a      	cmp	r2, r3
 80065c6:	ddb0      	ble.n	800652a <_dtoa_r+0xaba>
 80065c8:	2300      	movs	r3, #0
 80065ca:	220a      	movs	r2, #10
 80065cc:	9904      	ldr	r1, [sp, #16]
 80065ce:	4620      	mov	r0, r4
 80065d0:	f000 fbb0 	bl	8006d34 <__multadd>
 80065d4:	9004      	str	r0, [sp, #16]
 80065d6:	e7ea      	b.n	80065ae <_dtoa_r+0xb3e>
 80065d8:	08007a20 	.word	0x08007a20
 80065dc:	08007aa0 	.word	0x08007aa0

080065e0 <rshift>:
 80065e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065e2:	6906      	ldr	r6, [r0, #16]
 80065e4:	114b      	asrs	r3, r1, #5
 80065e6:	429e      	cmp	r6, r3
 80065e8:	f100 0414 	add.w	r4, r0, #20
 80065ec:	dd30      	ble.n	8006650 <rshift+0x70>
 80065ee:	f011 011f 	ands.w	r1, r1, #31
 80065f2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80065f6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80065fa:	d108      	bne.n	800660e <rshift+0x2e>
 80065fc:	4621      	mov	r1, r4
 80065fe:	42b2      	cmp	r2, r6
 8006600:	460b      	mov	r3, r1
 8006602:	d211      	bcs.n	8006628 <rshift+0x48>
 8006604:	f852 3b04 	ldr.w	r3, [r2], #4
 8006608:	f841 3b04 	str.w	r3, [r1], #4
 800660c:	e7f7      	b.n	80065fe <rshift+0x1e>
 800660e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006612:	f1c1 0c20 	rsb	ip, r1, #32
 8006616:	40cd      	lsrs	r5, r1
 8006618:	3204      	adds	r2, #4
 800661a:	4623      	mov	r3, r4
 800661c:	42b2      	cmp	r2, r6
 800661e:	4617      	mov	r7, r2
 8006620:	d30c      	bcc.n	800663c <rshift+0x5c>
 8006622:	601d      	str	r5, [r3, #0]
 8006624:	b105      	cbz	r5, 8006628 <rshift+0x48>
 8006626:	3304      	adds	r3, #4
 8006628:	1b1a      	subs	r2, r3, r4
 800662a:	42a3      	cmp	r3, r4
 800662c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006630:	bf08      	it	eq
 8006632:	2300      	moveq	r3, #0
 8006634:	6102      	str	r2, [r0, #16]
 8006636:	bf08      	it	eq
 8006638:	6143      	streq	r3, [r0, #20]
 800663a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800663c:	683f      	ldr	r7, [r7, #0]
 800663e:	fa07 f70c 	lsl.w	r7, r7, ip
 8006642:	433d      	orrs	r5, r7
 8006644:	f843 5b04 	str.w	r5, [r3], #4
 8006648:	f852 5b04 	ldr.w	r5, [r2], #4
 800664c:	40cd      	lsrs	r5, r1
 800664e:	e7e5      	b.n	800661c <rshift+0x3c>
 8006650:	4623      	mov	r3, r4
 8006652:	e7e9      	b.n	8006628 <rshift+0x48>

08006654 <__hexdig_fun>:
 8006654:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006658:	2b09      	cmp	r3, #9
 800665a:	d802      	bhi.n	8006662 <__hexdig_fun+0xe>
 800665c:	3820      	subs	r0, #32
 800665e:	b2c0      	uxtb	r0, r0
 8006660:	4770      	bx	lr
 8006662:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006666:	2b05      	cmp	r3, #5
 8006668:	d801      	bhi.n	800666e <__hexdig_fun+0x1a>
 800666a:	3847      	subs	r0, #71	; 0x47
 800666c:	e7f7      	b.n	800665e <__hexdig_fun+0xa>
 800666e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006672:	2b05      	cmp	r3, #5
 8006674:	d801      	bhi.n	800667a <__hexdig_fun+0x26>
 8006676:	3827      	subs	r0, #39	; 0x27
 8006678:	e7f1      	b.n	800665e <__hexdig_fun+0xa>
 800667a:	2000      	movs	r0, #0
 800667c:	4770      	bx	lr

0800667e <__gethex>:
 800667e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006682:	b08b      	sub	sp, #44	; 0x2c
 8006684:	468a      	mov	sl, r1
 8006686:	9002      	str	r0, [sp, #8]
 8006688:	9816      	ldr	r0, [sp, #88]	; 0x58
 800668a:	9306      	str	r3, [sp, #24]
 800668c:	4690      	mov	r8, r2
 800668e:	f000 fad0 	bl	8006c32 <__localeconv_l>
 8006692:	6803      	ldr	r3, [r0, #0]
 8006694:	9303      	str	r3, [sp, #12]
 8006696:	4618      	mov	r0, r3
 8006698:	f7f9 fd9a 	bl	80001d0 <strlen>
 800669c:	9b03      	ldr	r3, [sp, #12]
 800669e:	9001      	str	r0, [sp, #4]
 80066a0:	4403      	add	r3, r0
 80066a2:	f04f 0b00 	mov.w	fp, #0
 80066a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80066aa:	9307      	str	r3, [sp, #28]
 80066ac:	f8da 3000 	ldr.w	r3, [sl]
 80066b0:	3302      	adds	r3, #2
 80066b2:	461f      	mov	r7, r3
 80066b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80066b8:	2830      	cmp	r0, #48	; 0x30
 80066ba:	d06c      	beq.n	8006796 <__gethex+0x118>
 80066bc:	f7ff ffca 	bl	8006654 <__hexdig_fun>
 80066c0:	4604      	mov	r4, r0
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d16a      	bne.n	800679c <__gethex+0x11e>
 80066c6:	9a01      	ldr	r2, [sp, #4]
 80066c8:	9903      	ldr	r1, [sp, #12]
 80066ca:	4638      	mov	r0, r7
 80066cc:	f001 f8fe 	bl	80078cc <strncmp>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d166      	bne.n	80067a2 <__gethex+0x124>
 80066d4:	9b01      	ldr	r3, [sp, #4]
 80066d6:	5cf8      	ldrb	r0, [r7, r3]
 80066d8:	18fe      	adds	r6, r7, r3
 80066da:	f7ff ffbb 	bl	8006654 <__hexdig_fun>
 80066de:	2800      	cmp	r0, #0
 80066e0:	d062      	beq.n	80067a8 <__gethex+0x12a>
 80066e2:	4633      	mov	r3, r6
 80066e4:	7818      	ldrb	r0, [r3, #0]
 80066e6:	2830      	cmp	r0, #48	; 0x30
 80066e8:	461f      	mov	r7, r3
 80066ea:	f103 0301 	add.w	r3, r3, #1
 80066ee:	d0f9      	beq.n	80066e4 <__gethex+0x66>
 80066f0:	f7ff ffb0 	bl	8006654 <__hexdig_fun>
 80066f4:	fab0 f580 	clz	r5, r0
 80066f8:	096d      	lsrs	r5, r5, #5
 80066fa:	4634      	mov	r4, r6
 80066fc:	f04f 0b01 	mov.w	fp, #1
 8006700:	463a      	mov	r2, r7
 8006702:	4616      	mov	r6, r2
 8006704:	3201      	adds	r2, #1
 8006706:	7830      	ldrb	r0, [r6, #0]
 8006708:	f7ff ffa4 	bl	8006654 <__hexdig_fun>
 800670c:	2800      	cmp	r0, #0
 800670e:	d1f8      	bne.n	8006702 <__gethex+0x84>
 8006710:	9a01      	ldr	r2, [sp, #4]
 8006712:	9903      	ldr	r1, [sp, #12]
 8006714:	4630      	mov	r0, r6
 8006716:	f001 f8d9 	bl	80078cc <strncmp>
 800671a:	b950      	cbnz	r0, 8006732 <__gethex+0xb4>
 800671c:	b954      	cbnz	r4, 8006734 <__gethex+0xb6>
 800671e:	9b01      	ldr	r3, [sp, #4]
 8006720:	18f4      	adds	r4, r6, r3
 8006722:	4622      	mov	r2, r4
 8006724:	4616      	mov	r6, r2
 8006726:	3201      	adds	r2, #1
 8006728:	7830      	ldrb	r0, [r6, #0]
 800672a:	f7ff ff93 	bl	8006654 <__hexdig_fun>
 800672e:	2800      	cmp	r0, #0
 8006730:	d1f8      	bne.n	8006724 <__gethex+0xa6>
 8006732:	b10c      	cbz	r4, 8006738 <__gethex+0xba>
 8006734:	1ba4      	subs	r4, r4, r6
 8006736:	00a4      	lsls	r4, r4, #2
 8006738:	7833      	ldrb	r3, [r6, #0]
 800673a:	2b50      	cmp	r3, #80	; 0x50
 800673c:	d001      	beq.n	8006742 <__gethex+0xc4>
 800673e:	2b70      	cmp	r3, #112	; 0x70
 8006740:	d140      	bne.n	80067c4 <__gethex+0x146>
 8006742:	7873      	ldrb	r3, [r6, #1]
 8006744:	2b2b      	cmp	r3, #43	; 0x2b
 8006746:	d031      	beq.n	80067ac <__gethex+0x12e>
 8006748:	2b2d      	cmp	r3, #45	; 0x2d
 800674a:	d033      	beq.n	80067b4 <__gethex+0x136>
 800674c:	1c71      	adds	r1, r6, #1
 800674e:	f04f 0900 	mov.w	r9, #0
 8006752:	7808      	ldrb	r0, [r1, #0]
 8006754:	f7ff ff7e 	bl	8006654 <__hexdig_fun>
 8006758:	1e43      	subs	r3, r0, #1
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b18      	cmp	r3, #24
 800675e:	d831      	bhi.n	80067c4 <__gethex+0x146>
 8006760:	f1a0 0210 	sub.w	r2, r0, #16
 8006764:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006768:	f7ff ff74 	bl	8006654 <__hexdig_fun>
 800676c:	1e43      	subs	r3, r0, #1
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b18      	cmp	r3, #24
 8006772:	d922      	bls.n	80067ba <__gethex+0x13c>
 8006774:	f1b9 0f00 	cmp.w	r9, #0
 8006778:	d000      	beq.n	800677c <__gethex+0xfe>
 800677a:	4252      	negs	r2, r2
 800677c:	4414      	add	r4, r2
 800677e:	f8ca 1000 	str.w	r1, [sl]
 8006782:	b30d      	cbz	r5, 80067c8 <__gethex+0x14a>
 8006784:	f1bb 0f00 	cmp.w	fp, #0
 8006788:	bf0c      	ite	eq
 800678a:	2706      	moveq	r7, #6
 800678c:	2700      	movne	r7, #0
 800678e:	4638      	mov	r0, r7
 8006790:	b00b      	add	sp, #44	; 0x2c
 8006792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006796:	f10b 0b01 	add.w	fp, fp, #1
 800679a:	e78a      	b.n	80066b2 <__gethex+0x34>
 800679c:	2500      	movs	r5, #0
 800679e:	462c      	mov	r4, r5
 80067a0:	e7ae      	b.n	8006700 <__gethex+0x82>
 80067a2:	463e      	mov	r6, r7
 80067a4:	2501      	movs	r5, #1
 80067a6:	e7c7      	b.n	8006738 <__gethex+0xba>
 80067a8:	4604      	mov	r4, r0
 80067aa:	e7fb      	b.n	80067a4 <__gethex+0x126>
 80067ac:	f04f 0900 	mov.w	r9, #0
 80067b0:	1cb1      	adds	r1, r6, #2
 80067b2:	e7ce      	b.n	8006752 <__gethex+0xd4>
 80067b4:	f04f 0901 	mov.w	r9, #1
 80067b8:	e7fa      	b.n	80067b0 <__gethex+0x132>
 80067ba:	230a      	movs	r3, #10
 80067bc:	fb03 0202 	mla	r2, r3, r2, r0
 80067c0:	3a10      	subs	r2, #16
 80067c2:	e7cf      	b.n	8006764 <__gethex+0xe6>
 80067c4:	4631      	mov	r1, r6
 80067c6:	e7da      	b.n	800677e <__gethex+0x100>
 80067c8:	1bf3      	subs	r3, r6, r7
 80067ca:	3b01      	subs	r3, #1
 80067cc:	4629      	mov	r1, r5
 80067ce:	2b07      	cmp	r3, #7
 80067d0:	dc49      	bgt.n	8006866 <__gethex+0x1e8>
 80067d2:	9802      	ldr	r0, [sp, #8]
 80067d4:	f000 fa63 	bl	8006c9e <_Balloc>
 80067d8:	9b01      	ldr	r3, [sp, #4]
 80067da:	f100 0914 	add.w	r9, r0, #20
 80067de:	f04f 0b00 	mov.w	fp, #0
 80067e2:	f1c3 0301 	rsb	r3, r3, #1
 80067e6:	4605      	mov	r5, r0
 80067e8:	f8cd 9010 	str.w	r9, [sp, #16]
 80067ec:	46da      	mov	sl, fp
 80067ee:	9308      	str	r3, [sp, #32]
 80067f0:	42b7      	cmp	r7, r6
 80067f2:	d33b      	bcc.n	800686c <__gethex+0x1ee>
 80067f4:	9804      	ldr	r0, [sp, #16]
 80067f6:	f840 ab04 	str.w	sl, [r0], #4
 80067fa:	eba0 0009 	sub.w	r0, r0, r9
 80067fe:	1080      	asrs	r0, r0, #2
 8006800:	6128      	str	r0, [r5, #16]
 8006802:	0147      	lsls	r7, r0, #5
 8006804:	4650      	mov	r0, sl
 8006806:	f000 fb0e 	bl	8006e26 <__hi0bits>
 800680a:	f8d8 6000 	ldr.w	r6, [r8]
 800680e:	1a3f      	subs	r7, r7, r0
 8006810:	42b7      	cmp	r7, r6
 8006812:	dd64      	ble.n	80068de <__gethex+0x260>
 8006814:	1bbf      	subs	r7, r7, r6
 8006816:	4639      	mov	r1, r7
 8006818:	4628      	mov	r0, r5
 800681a:	f000 fe1d 	bl	8007458 <__any_on>
 800681e:	4682      	mov	sl, r0
 8006820:	b178      	cbz	r0, 8006842 <__gethex+0x1c4>
 8006822:	1e7b      	subs	r3, r7, #1
 8006824:	1159      	asrs	r1, r3, #5
 8006826:	f003 021f 	and.w	r2, r3, #31
 800682a:	f04f 0a01 	mov.w	sl, #1
 800682e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006832:	fa0a f202 	lsl.w	r2, sl, r2
 8006836:	420a      	tst	r2, r1
 8006838:	d003      	beq.n	8006842 <__gethex+0x1c4>
 800683a:	4553      	cmp	r3, sl
 800683c:	dc46      	bgt.n	80068cc <__gethex+0x24e>
 800683e:	f04f 0a02 	mov.w	sl, #2
 8006842:	4639      	mov	r1, r7
 8006844:	4628      	mov	r0, r5
 8006846:	f7ff fecb 	bl	80065e0 <rshift>
 800684a:	443c      	add	r4, r7
 800684c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006850:	42a3      	cmp	r3, r4
 8006852:	da52      	bge.n	80068fa <__gethex+0x27c>
 8006854:	4629      	mov	r1, r5
 8006856:	9802      	ldr	r0, [sp, #8]
 8006858:	f000 fa55 	bl	8006d06 <_Bfree>
 800685c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800685e:	2300      	movs	r3, #0
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	27a3      	movs	r7, #163	; 0xa3
 8006864:	e793      	b.n	800678e <__gethex+0x110>
 8006866:	3101      	adds	r1, #1
 8006868:	105b      	asrs	r3, r3, #1
 800686a:	e7b0      	b.n	80067ce <__gethex+0x150>
 800686c:	1e73      	subs	r3, r6, #1
 800686e:	9305      	str	r3, [sp, #20]
 8006870:	9a07      	ldr	r2, [sp, #28]
 8006872:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006876:	4293      	cmp	r3, r2
 8006878:	d018      	beq.n	80068ac <__gethex+0x22e>
 800687a:	f1bb 0f20 	cmp.w	fp, #32
 800687e:	d107      	bne.n	8006890 <__gethex+0x212>
 8006880:	9b04      	ldr	r3, [sp, #16]
 8006882:	f8c3 a000 	str.w	sl, [r3]
 8006886:	3304      	adds	r3, #4
 8006888:	f04f 0a00 	mov.w	sl, #0
 800688c:	9304      	str	r3, [sp, #16]
 800688e:	46d3      	mov	fp, sl
 8006890:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006894:	f7ff fede 	bl	8006654 <__hexdig_fun>
 8006898:	f000 000f 	and.w	r0, r0, #15
 800689c:	fa00 f00b 	lsl.w	r0, r0, fp
 80068a0:	ea4a 0a00 	orr.w	sl, sl, r0
 80068a4:	f10b 0b04 	add.w	fp, fp, #4
 80068a8:	9b05      	ldr	r3, [sp, #20]
 80068aa:	e00d      	b.n	80068c8 <__gethex+0x24a>
 80068ac:	9b05      	ldr	r3, [sp, #20]
 80068ae:	9a08      	ldr	r2, [sp, #32]
 80068b0:	4413      	add	r3, r2
 80068b2:	42bb      	cmp	r3, r7
 80068b4:	d3e1      	bcc.n	800687a <__gethex+0x1fc>
 80068b6:	4618      	mov	r0, r3
 80068b8:	9a01      	ldr	r2, [sp, #4]
 80068ba:	9903      	ldr	r1, [sp, #12]
 80068bc:	9309      	str	r3, [sp, #36]	; 0x24
 80068be:	f001 f805 	bl	80078cc <strncmp>
 80068c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d1d8      	bne.n	800687a <__gethex+0x1fc>
 80068c8:	461e      	mov	r6, r3
 80068ca:	e791      	b.n	80067f0 <__gethex+0x172>
 80068cc:	1eb9      	subs	r1, r7, #2
 80068ce:	4628      	mov	r0, r5
 80068d0:	f000 fdc2 	bl	8007458 <__any_on>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d0b2      	beq.n	800683e <__gethex+0x1c0>
 80068d8:	f04f 0a03 	mov.w	sl, #3
 80068dc:	e7b1      	b.n	8006842 <__gethex+0x1c4>
 80068de:	da09      	bge.n	80068f4 <__gethex+0x276>
 80068e0:	1bf7      	subs	r7, r6, r7
 80068e2:	4629      	mov	r1, r5
 80068e4:	463a      	mov	r2, r7
 80068e6:	9802      	ldr	r0, [sp, #8]
 80068e8:	f000 fbd8 	bl	800709c <__lshift>
 80068ec:	1be4      	subs	r4, r4, r7
 80068ee:	4605      	mov	r5, r0
 80068f0:	f100 0914 	add.w	r9, r0, #20
 80068f4:	f04f 0a00 	mov.w	sl, #0
 80068f8:	e7a8      	b.n	800684c <__gethex+0x1ce>
 80068fa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80068fe:	42a0      	cmp	r0, r4
 8006900:	dd6a      	ble.n	80069d8 <__gethex+0x35a>
 8006902:	1b04      	subs	r4, r0, r4
 8006904:	42a6      	cmp	r6, r4
 8006906:	dc2e      	bgt.n	8006966 <__gethex+0x2e8>
 8006908:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800690c:	2b02      	cmp	r3, #2
 800690e:	d022      	beq.n	8006956 <__gethex+0x2d8>
 8006910:	2b03      	cmp	r3, #3
 8006912:	d024      	beq.n	800695e <__gethex+0x2e0>
 8006914:	2b01      	cmp	r3, #1
 8006916:	d115      	bne.n	8006944 <__gethex+0x2c6>
 8006918:	42a6      	cmp	r6, r4
 800691a:	d113      	bne.n	8006944 <__gethex+0x2c6>
 800691c:	2e01      	cmp	r6, #1
 800691e:	dc0b      	bgt.n	8006938 <__gethex+0x2ba>
 8006920:	9a06      	ldr	r2, [sp, #24]
 8006922:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	2301      	movs	r3, #1
 800692a:	612b      	str	r3, [r5, #16]
 800692c:	f8c9 3000 	str.w	r3, [r9]
 8006930:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006932:	2762      	movs	r7, #98	; 0x62
 8006934:	601d      	str	r5, [r3, #0]
 8006936:	e72a      	b.n	800678e <__gethex+0x110>
 8006938:	1e71      	subs	r1, r6, #1
 800693a:	4628      	mov	r0, r5
 800693c:	f000 fd8c 	bl	8007458 <__any_on>
 8006940:	2800      	cmp	r0, #0
 8006942:	d1ed      	bne.n	8006920 <__gethex+0x2a2>
 8006944:	4629      	mov	r1, r5
 8006946:	9802      	ldr	r0, [sp, #8]
 8006948:	f000 f9dd 	bl	8006d06 <_Bfree>
 800694c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800694e:	2300      	movs	r3, #0
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	2750      	movs	r7, #80	; 0x50
 8006954:	e71b      	b.n	800678e <__gethex+0x110>
 8006956:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0e1      	beq.n	8006920 <__gethex+0x2a2>
 800695c:	e7f2      	b.n	8006944 <__gethex+0x2c6>
 800695e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1dd      	bne.n	8006920 <__gethex+0x2a2>
 8006964:	e7ee      	b.n	8006944 <__gethex+0x2c6>
 8006966:	1e67      	subs	r7, r4, #1
 8006968:	f1ba 0f00 	cmp.w	sl, #0
 800696c:	d131      	bne.n	80069d2 <__gethex+0x354>
 800696e:	b127      	cbz	r7, 800697a <__gethex+0x2fc>
 8006970:	4639      	mov	r1, r7
 8006972:	4628      	mov	r0, r5
 8006974:	f000 fd70 	bl	8007458 <__any_on>
 8006978:	4682      	mov	sl, r0
 800697a:	117a      	asrs	r2, r7, #5
 800697c:	2301      	movs	r3, #1
 800697e:	f007 071f 	and.w	r7, r7, #31
 8006982:	fa03 f707 	lsl.w	r7, r3, r7
 8006986:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800698a:	4621      	mov	r1, r4
 800698c:	421f      	tst	r7, r3
 800698e:	4628      	mov	r0, r5
 8006990:	bf18      	it	ne
 8006992:	f04a 0a02 	orrne.w	sl, sl, #2
 8006996:	1b36      	subs	r6, r6, r4
 8006998:	f7ff fe22 	bl	80065e0 <rshift>
 800699c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80069a0:	2702      	movs	r7, #2
 80069a2:	f1ba 0f00 	cmp.w	sl, #0
 80069a6:	d048      	beq.n	8006a3a <__gethex+0x3bc>
 80069a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d015      	beq.n	80069dc <__gethex+0x35e>
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d017      	beq.n	80069e4 <__gethex+0x366>
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d109      	bne.n	80069cc <__gethex+0x34e>
 80069b8:	f01a 0f02 	tst.w	sl, #2
 80069bc:	d006      	beq.n	80069cc <__gethex+0x34e>
 80069be:	f8d9 3000 	ldr.w	r3, [r9]
 80069c2:	ea4a 0a03 	orr.w	sl, sl, r3
 80069c6:	f01a 0f01 	tst.w	sl, #1
 80069ca:	d10e      	bne.n	80069ea <__gethex+0x36c>
 80069cc:	f047 0710 	orr.w	r7, r7, #16
 80069d0:	e033      	b.n	8006a3a <__gethex+0x3bc>
 80069d2:	f04f 0a01 	mov.w	sl, #1
 80069d6:	e7d0      	b.n	800697a <__gethex+0x2fc>
 80069d8:	2701      	movs	r7, #1
 80069da:	e7e2      	b.n	80069a2 <__gethex+0x324>
 80069dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069de:	f1c3 0301 	rsb	r3, r3, #1
 80069e2:	9315      	str	r3, [sp, #84]	; 0x54
 80069e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0f0      	beq.n	80069cc <__gethex+0x34e>
 80069ea:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80069ee:	f105 0314 	add.w	r3, r5, #20
 80069f2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80069f6:	eb03 010a 	add.w	r1, r3, sl
 80069fa:	f04f 0c00 	mov.w	ip, #0
 80069fe:	4618      	mov	r0, r3
 8006a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a04:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006a08:	d01c      	beq.n	8006a44 <__gethex+0x3c6>
 8006a0a:	3201      	adds	r2, #1
 8006a0c:	6002      	str	r2, [r0, #0]
 8006a0e:	2f02      	cmp	r7, #2
 8006a10:	f105 0314 	add.w	r3, r5, #20
 8006a14:	d138      	bne.n	8006a88 <__gethex+0x40a>
 8006a16:	f8d8 2000 	ldr.w	r2, [r8]
 8006a1a:	3a01      	subs	r2, #1
 8006a1c:	42b2      	cmp	r2, r6
 8006a1e:	d10a      	bne.n	8006a36 <__gethex+0x3b8>
 8006a20:	1171      	asrs	r1, r6, #5
 8006a22:	2201      	movs	r2, #1
 8006a24:	f006 061f 	and.w	r6, r6, #31
 8006a28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006a2c:	fa02 f606 	lsl.w	r6, r2, r6
 8006a30:	421e      	tst	r6, r3
 8006a32:	bf18      	it	ne
 8006a34:	4617      	movne	r7, r2
 8006a36:	f047 0720 	orr.w	r7, r7, #32
 8006a3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a3c:	601d      	str	r5, [r3, #0]
 8006a3e:	9b06      	ldr	r3, [sp, #24]
 8006a40:	601c      	str	r4, [r3, #0]
 8006a42:	e6a4      	b.n	800678e <__gethex+0x110>
 8006a44:	4299      	cmp	r1, r3
 8006a46:	f843 cc04 	str.w	ip, [r3, #-4]
 8006a4a:	d8d8      	bhi.n	80069fe <__gethex+0x380>
 8006a4c:	68ab      	ldr	r3, [r5, #8]
 8006a4e:	4599      	cmp	r9, r3
 8006a50:	db12      	blt.n	8006a78 <__gethex+0x3fa>
 8006a52:	6869      	ldr	r1, [r5, #4]
 8006a54:	9802      	ldr	r0, [sp, #8]
 8006a56:	3101      	adds	r1, #1
 8006a58:	f000 f921 	bl	8006c9e <_Balloc>
 8006a5c:	692a      	ldr	r2, [r5, #16]
 8006a5e:	3202      	adds	r2, #2
 8006a60:	f105 010c 	add.w	r1, r5, #12
 8006a64:	4683      	mov	fp, r0
 8006a66:	0092      	lsls	r2, r2, #2
 8006a68:	300c      	adds	r0, #12
 8006a6a:	f000 f90d 	bl	8006c88 <memcpy>
 8006a6e:	4629      	mov	r1, r5
 8006a70:	9802      	ldr	r0, [sp, #8]
 8006a72:	f000 f948 	bl	8006d06 <_Bfree>
 8006a76:	465d      	mov	r5, fp
 8006a78:	692b      	ldr	r3, [r5, #16]
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006a80:	612a      	str	r2, [r5, #16]
 8006a82:	2201      	movs	r2, #1
 8006a84:	615a      	str	r2, [r3, #20]
 8006a86:	e7c2      	b.n	8006a0e <__gethex+0x390>
 8006a88:	692a      	ldr	r2, [r5, #16]
 8006a8a:	454a      	cmp	r2, r9
 8006a8c:	dd0b      	ble.n	8006aa6 <__gethex+0x428>
 8006a8e:	2101      	movs	r1, #1
 8006a90:	4628      	mov	r0, r5
 8006a92:	f7ff fda5 	bl	80065e0 <rshift>
 8006a96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a9a:	3401      	adds	r4, #1
 8006a9c:	42a3      	cmp	r3, r4
 8006a9e:	f6ff aed9 	blt.w	8006854 <__gethex+0x1d6>
 8006aa2:	2701      	movs	r7, #1
 8006aa4:	e7c7      	b.n	8006a36 <__gethex+0x3b8>
 8006aa6:	f016 061f 	ands.w	r6, r6, #31
 8006aaa:	d0fa      	beq.n	8006aa2 <__gethex+0x424>
 8006aac:	449a      	add	sl, r3
 8006aae:	f1c6 0620 	rsb	r6, r6, #32
 8006ab2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006ab6:	f000 f9b6 	bl	8006e26 <__hi0bits>
 8006aba:	42b0      	cmp	r0, r6
 8006abc:	dbe7      	blt.n	8006a8e <__gethex+0x410>
 8006abe:	e7f0      	b.n	8006aa2 <__gethex+0x424>

08006ac0 <L_shift>:
 8006ac0:	f1c2 0208 	rsb	r2, r2, #8
 8006ac4:	0092      	lsls	r2, r2, #2
 8006ac6:	b570      	push	{r4, r5, r6, lr}
 8006ac8:	f1c2 0620 	rsb	r6, r2, #32
 8006acc:	6843      	ldr	r3, [r0, #4]
 8006ace:	6804      	ldr	r4, [r0, #0]
 8006ad0:	fa03 f506 	lsl.w	r5, r3, r6
 8006ad4:	432c      	orrs	r4, r5
 8006ad6:	40d3      	lsrs	r3, r2
 8006ad8:	6004      	str	r4, [r0, #0]
 8006ada:	f840 3f04 	str.w	r3, [r0, #4]!
 8006ade:	4288      	cmp	r0, r1
 8006ae0:	d3f4      	bcc.n	8006acc <L_shift+0xc>
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}

08006ae4 <__match>:
 8006ae4:	b530      	push	{r4, r5, lr}
 8006ae6:	6803      	ldr	r3, [r0, #0]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aee:	b914      	cbnz	r4, 8006af6 <__match+0x12>
 8006af0:	6003      	str	r3, [r0, #0]
 8006af2:	2001      	movs	r0, #1
 8006af4:	bd30      	pop	{r4, r5, pc}
 8006af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006afa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006afe:	2d19      	cmp	r5, #25
 8006b00:	bf98      	it	ls
 8006b02:	3220      	addls	r2, #32
 8006b04:	42a2      	cmp	r2, r4
 8006b06:	d0f0      	beq.n	8006aea <__match+0x6>
 8006b08:	2000      	movs	r0, #0
 8006b0a:	e7f3      	b.n	8006af4 <__match+0x10>

08006b0c <__hexnan>:
 8006b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b10:	680b      	ldr	r3, [r1, #0]
 8006b12:	6801      	ldr	r1, [r0, #0]
 8006b14:	115f      	asrs	r7, r3, #5
 8006b16:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006b1a:	f013 031f 	ands.w	r3, r3, #31
 8006b1e:	b087      	sub	sp, #28
 8006b20:	bf18      	it	ne
 8006b22:	3704      	addne	r7, #4
 8006b24:	2500      	movs	r5, #0
 8006b26:	1f3e      	subs	r6, r7, #4
 8006b28:	4682      	mov	sl, r0
 8006b2a:	4690      	mov	r8, r2
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	f847 5c04 	str.w	r5, [r7, #-4]
 8006b32:	46b1      	mov	r9, r6
 8006b34:	4634      	mov	r4, r6
 8006b36:	9502      	str	r5, [sp, #8]
 8006b38:	46ab      	mov	fp, r5
 8006b3a:	784a      	ldrb	r2, [r1, #1]
 8006b3c:	1c4b      	adds	r3, r1, #1
 8006b3e:	9303      	str	r3, [sp, #12]
 8006b40:	b342      	cbz	r2, 8006b94 <__hexnan+0x88>
 8006b42:	4610      	mov	r0, r2
 8006b44:	9105      	str	r1, [sp, #20]
 8006b46:	9204      	str	r2, [sp, #16]
 8006b48:	f7ff fd84 	bl	8006654 <__hexdig_fun>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d143      	bne.n	8006bd8 <__hexnan+0xcc>
 8006b50:	9a04      	ldr	r2, [sp, #16]
 8006b52:	9905      	ldr	r1, [sp, #20]
 8006b54:	2a20      	cmp	r2, #32
 8006b56:	d818      	bhi.n	8006b8a <__hexnan+0x7e>
 8006b58:	9b02      	ldr	r3, [sp, #8]
 8006b5a:	459b      	cmp	fp, r3
 8006b5c:	dd13      	ble.n	8006b86 <__hexnan+0x7a>
 8006b5e:	454c      	cmp	r4, r9
 8006b60:	d206      	bcs.n	8006b70 <__hexnan+0x64>
 8006b62:	2d07      	cmp	r5, #7
 8006b64:	dc04      	bgt.n	8006b70 <__hexnan+0x64>
 8006b66:	462a      	mov	r2, r5
 8006b68:	4649      	mov	r1, r9
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f7ff ffa8 	bl	8006ac0 <L_shift>
 8006b70:	4544      	cmp	r4, r8
 8006b72:	d944      	bls.n	8006bfe <__hexnan+0xf2>
 8006b74:	2300      	movs	r3, #0
 8006b76:	f1a4 0904 	sub.w	r9, r4, #4
 8006b7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8006b7e:	f8cd b008 	str.w	fp, [sp, #8]
 8006b82:	464c      	mov	r4, r9
 8006b84:	461d      	mov	r5, r3
 8006b86:	9903      	ldr	r1, [sp, #12]
 8006b88:	e7d7      	b.n	8006b3a <__hexnan+0x2e>
 8006b8a:	2a29      	cmp	r2, #41	; 0x29
 8006b8c:	d14a      	bne.n	8006c24 <__hexnan+0x118>
 8006b8e:	3102      	adds	r1, #2
 8006b90:	f8ca 1000 	str.w	r1, [sl]
 8006b94:	f1bb 0f00 	cmp.w	fp, #0
 8006b98:	d044      	beq.n	8006c24 <__hexnan+0x118>
 8006b9a:	454c      	cmp	r4, r9
 8006b9c:	d206      	bcs.n	8006bac <__hexnan+0xa0>
 8006b9e:	2d07      	cmp	r5, #7
 8006ba0:	dc04      	bgt.n	8006bac <__hexnan+0xa0>
 8006ba2:	462a      	mov	r2, r5
 8006ba4:	4649      	mov	r1, r9
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f7ff ff8a 	bl	8006ac0 <L_shift>
 8006bac:	4544      	cmp	r4, r8
 8006bae:	d928      	bls.n	8006c02 <__hexnan+0xf6>
 8006bb0:	4643      	mov	r3, r8
 8006bb2:	f854 2b04 	ldr.w	r2, [r4], #4
 8006bb6:	f843 2b04 	str.w	r2, [r3], #4
 8006bba:	42a6      	cmp	r6, r4
 8006bbc:	d2f9      	bcs.n	8006bb2 <__hexnan+0xa6>
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f843 2b04 	str.w	r2, [r3], #4
 8006bc4:	429e      	cmp	r6, r3
 8006bc6:	d2fb      	bcs.n	8006bc0 <__hexnan+0xb4>
 8006bc8:	6833      	ldr	r3, [r6, #0]
 8006bca:	b91b      	cbnz	r3, 8006bd4 <__hexnan+0xc8>
 8006bcc:	4546      	cmp	r6, r8
 8006bce:	d127      	bne.n	8006c20 <__hexnan+0x114>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	6033      	str	r3, [r6, #0]
 8006bd4:	2005      	movs	r0, #5
 8006bd6:	e026      	b.n	8006c26 <__hexnan+0x11a>
 8006bd8:	3501      	adds	r5, #1
 8006bda:	2d08      	cmp	r5, #8
 8006bdc:	f10b 0b01 	add.w	fp, fp, #1
 8006be0:	dd06      	ble.n	8006bf0 <__hexnan+0xe4>
 8006be2:	4544      	cmp	r4, r8
 8006be4:	d9cf      	bls.n	8006b86 <__hexnan+0x7a>
 8006be6:	2300      	movs	r3, #0
 8006be8:	f844 3c04 	str.w	r3, [r4, #-4]
 8006bec:	2501      	movs	r5, #1
 8006bee:	3c04      	subs	r4, #4
 8006bf0:	6822      	ldr	r2, [r4, #0]
 8006bf2:	f000 000f 	and.w	r0, r0, #15
 8006bf6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006bfa:	6020      	str	r0, [r4, #0]
 8006bfc:	e7c3      	b.n	8006b86 <__hexnan+0x7a>
 8006bfe:	2508      	movs	r5, #8
 8006c00:	e7c1      	b.n	8006b86 <__hexnan+0x7a>
 8006c02:	9b01      	ldr	r3, [sp, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d0df      	beq.n	8006bc8 <__hexnan+0xbc>
 8006c08:	f04f 32ff 	mov.w	r2, #4294967295
 8006c0c:	f1c3 0320 	rsb	r3, r3, #32
 8006c10:	fa22 f303 	lsr.w	r3, r2, r3
 8006c14:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006c18:	401a      	ands	r2, r3
 8006c1a:	f847 2c04 	str.w	r2, [r7, #-4]
 8006c1e:	e7d3      	b.n	8006bc8 <__hexnan+0xbc>
 8006c20:	3e04      	subs	r6, #4
 8006c22:	e7d1      	b.n	8006bc8 <__hexnan+0xbc>
 8006c24:	2004      	movs	r0, #4
 8006c26:	b007      	add	sp, #28
 8006c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006c2c <__locale_ctype_ptr_l>:
 8006c2c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006c30:	4770      	bx	lr

08006c32 <__localeconv_l>:
 8006c32:	30f0      	adds	r0, #240	; 0xf0
 8006c34:	4770      	bx	lr
	...

08006c38 <_localeconv_r>:
 8006c38:	4b04      	ldr	r3, [pc, #16]	; (8006c4c <_localeconv_r+0x14>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6a18      	ldr	r0, [r3, #32]
 8006c3e:	4b04      	ldr	r3, [pc, #16]	; (8006c50 <_localeconv_r+0x18>)
 8006c40:	2800      	cmp	r0, #0
 8006c42:	bf08      	it	eq
 8006c44:	4618      	moveq	r0, r3
 8006c46:	30f0      	adds	r0, #240	; 0xf0
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	2000000c 	.word	0x2000000c
 8006c50:	20000070 	.word	0x20000070

08006c54 <malloc>:
 8006c54:	4b02      	ldr	r3, [pc, #8]	; (8006c60 <malloc+0xc>)
 8006c56:	4601      	mov	r1, r0
 8006c58:	6818      	ldr	r0, [r3, #0]
 8006c5a:	f000 bc7b 	b.w	8007554 <_malloc_r>
 8006c5e:	bf00      	nop
 8006c60:	2000000c 	.word	0x2000000c

08006c64 <__ascii_mbtowc>:
 8006c64:	b082      	sub	sp, #8
 8006c66:	b901      	cbnz	r1, 8006c6a <__ascii_mbtowc+0x6>
 8006c68:	a901      	add	r1, sp, #4
 8006c6a:	b142      	cbz	r2, 8006c7e <__ascii_mbtowc+0x1a>
 8006c6c:	b14b      	cbz	r3, 8006c82 <__ascii_mbtowc+0x1e>
 8006c6e:	7813      	ldrb	r3, [r2, #0]
 8006c70:	600b      	str	r3, [r1, #0]
 8006c72:	7812      	ldrb	r2, [r2, #0]
 8006c74:	1c10      	adds	r0, r2, #0
 8006c76:	bf18      	it	ne
 8006c78:	2001      	movne	r0, #1
 8006c7a:	b002      	add	sp, #8
 8006c7c:	4770      	bx	lr
 8006c7e:	4610      	mov	r0, r2
 8006c80:	e7fb      	b.n	8006c7a <__ascii_mbtowc+0x16>
 8006c82:	f06f 0001 	mvn.w	r0, #1
 8006c86:	e7f8      	b.n	8006c7a <__ascii_mbtowc+0x16>

08006c88 <memcpy>:
 8006c88:	b510      	push	{r4, lr}
 8006c8a:	1e43      	subs	r3, r0, #1
 8006c8c:	440a      	add	r2, r1
 8006c8e:	4291      	cmp	r1, r2
 8006c90:	d100      	bne.n	8006c94 <memcpy+0xc>
 8006c92:	bd10      	pop	{r4, pc}
 8006c94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c9c:	e7f7      	b.n	8006c8e <memcpy+0x6>

08006c9e <_Balloc>:
 8006c9e:	b570      	push	{r4, r5, r6, lr}
 8006ca0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	460e      	mov	r6, r1
 8006ca6:	b93d      	cbnz	r5, 8006cb8 <_Balloc+0x1a>
 8006ca8:	2010      	movs	r0, #16
 8006caa:	f7ff ffd3 	bl	8006c54 <malloc>
 8006cae:	6260      	str	r0, [r4, #36]	; 0x24
 8006cb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006cb4:	6005      	str	r5, [r0, #0]
 8006cb6:	60c5      	str	r5, [r0, #12]
 8006cb8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006cba:	68eb      	ldr	r3, [r5, #12]
 8006cbc:	b183      	cbz	r3, 8006ce0 <_Balloc+0x42>
 8006cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006cc6:	b9b8      	cbnz	r0, 8006cf8 <_Balloc+0x5a>
 8006cc8:	2101      	movs	r1, #1
 8006cca:	fa01 f506 	lsl.w	r5, r1, r6
 8006cce:	1d6a      	adds	r2, r5, #5
 8006cd0:	0092      	lsls	r2, r2, #2
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 fbe1 	bl	800749a <_calloc_r>
 8006cd8:	b160      	cbz	r0, 8006cf4 <_Balloc+0x56>
 8006cda:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006cde:	e00e      	b.n	8006cfe <_Balloc+0x60>
 8006ce0:	2221      	movs	r2, #33	; 0x21
 8006ce2:	2104      	movs	r1, #4
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f000 fbd8 	bl	800749a <_calloc_r>
 8006cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cec:	60e8      	str	r0, [r5, #12]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e4      	bne.n	8006cbe <_Balloc+0x20>
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
 8006cf8:	6802      	ldr	r2, [r0, #0]
 8006cfa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d04:	e7f7      	b.n	8006cf6 <_Balloc+0x58>

08006d06 <_Bfree>:
 8006d06:	b570      	push	{r4, r5, r6, lr}
 8006d08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	460d      	mov	r5, r1
 8006d0e:	b93c      	cbnz	r4, 8006d20 <_Bfree+0x1a>
 8006d10:	2010      	movs	r0, #16
 8006d12:	f7ff ff9f 	bl	8006c54 <malloc>
 8006d16:	6270      	str	r0, [r6, #36]	; 0x24
 8006d18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d1c:	6004      	str	r4, [r0, #0]
 8006d1e:	60c4      	str	r4, [r0, #12]
 8006d20:	b13d      	cbz	r5, 8006d32 <_Bfree+0x2c>
 8006d22:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006d24:	686a      	ldr	r2, [r5, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d2c:	6029      	str	r1, [r5, #0]
 8006d2e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006d32:	bd70      	pop	{r4, r5, r6, pc}

08006d34 <__multadd>:
 8006d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d38:	690d      	ldr	r5, [r1, #16]
 8006d3a:	461f      	mov	r7, r3
 8006d3c:	4606      	mov	r6, r0
 8006d3e:	460c      	mov	r4, r1
 8006d40:	f101 0c14 	add.w	ip, r1, #20
 8006d44:	2300      	movs	r3, #0
 8006d46:	f8dc 0000 	ldr.w	r0, [ip]
 8006d4a:	b281      	uxth	r1, r0
 8006d4c:	fb02 7101 	mla	r1, r2, r1, r7
 8006d50:	0c0f      	lsrs	r7, r1, #16
 8006d52:	0c00      	lsrs	r0, r0, #16
 8006d54:	fb02 7000 	mla	r0, r2, r0, r7
 8006d58:	b289      	uxth	r1, r1
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006d60:	429d      	cmp	r5, r3
 8006d62:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006d66:	f84c 1b04 	str.w	r1, [ip], #4
 8006d6a:	dcec      	bgt.n	8006d46 <__multadd+0x12>
 8006d6c:	b1d7      	cbz	r7, 8006da4 <__multadd+0x70>
 8006d6e:	68a3      	ldr	r3, [r4, #8]
 8006d70:	42ab      	cmp	r3, r5
 8006d72:	dc12      	bgt.n	8006d9a <__multadd+0x66>
 8006d74:	6861      	ldr	r1, [r4, #4]
 8006d76:	4630      	mov	r0, r6
 8006d78:	3101      	adds	r1, #1
 8006d7a:	f7ff ff90 	bl	8006c9e <_Balloc>
 8006d7e:	6922      	ldr	r2, [r4, #16]
 8006d80:	3202      	adds	r2, #2
 8006d82:	f104 010c 	add.w	r1, r4, #12
 8006d86:	4680      	mov	r8, r0
 8006d88:	0092      	lsls	r2, r2, #2
 8006d8a:	300c      	adds	r0, #12
 8006d8c:	f7ff ff7c 	bl	8006c88 <memcpy>
 8006d90:	4621      	mov	r1, r4
 8006d92:	4630      	mov	r0, r6
 8006d94:	f7ff ffb7 	bl	8006d06 <_Bfree>
 8006d98:	4644      	mov	r4, r8
 8006d9a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d9e:	3501      	adds	r5, #1
 8006da0:	615f      	str	r7, [r3, #20]
 8006da2:	6125      	str	r5, [r4, #16]
 8006da4:	4620      	mov	r0, r4
 8006da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006daa <__s2b>:
 8006daa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dae:	460c      	mov	r4, r1
 8006db0:	4615      	mov	r5, r2
 8006db2:	461f      	mov	r7, r3
 8006db4:	2209      	movs	r2, #9
 8006db6:	3308      	adds	r3, #8
 8006db8:	4606      	mov	r6, r0
 8006dba:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	db20      	blt.n	8006e08 <__s2b+0x5e>
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	f7ff ff69 	bl	8006c9e <_Balloc>
 8006dcc:	9b08      	ldr	r3, [sp, #32]
 8006dce:	6143      	str	r3, [r0, #20]
 8006dd0:	2d09      	cmp	r5, #9
 8006dd2:	f04f 0301 	mov.w	r3, #1
 8006dd6:	6103      	str	r3, [r0, #16]
 8006dd8:	dd19      	ble.n	8006e0e <__s2b+0x64>
 8006dda:	f104 0809 	add.w	r8, r4, #9
 8006dde:	46c1      	mov	r9, r8
 8006de0:	442c      	add	r4, r5
 8006de2:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006de6:	4601      	mov	r1, r0
 8006de8:	3b30      	subs	r3, #48	; 0x30
 8006dea:	220a      	movs	r2, #10
 8006dec:	4630      	mov	r0, r6
 8006dee:	f7ff ffa1 	bl	8006d34 <__multadd>
 8006df2:	45a1      	cmp	r9, r4
 8006df4:	d1f5      	bne.n	8006de2 <__s2b+0x38>
 8006df6:	eb08 0405 	add.w	r4, r8, r5
 8006dfa:	3c08      	subs	r4, #8
 8006dfc:	1b2d      	subs	r5, r5, r4
 8006dfe:	1963      	adds	r3, r4, r5
 8006e00:	42bb      	cmp	r3, r7
 8006e02:	db07      	blt.n	8006e14 <__s2b+0x6a>
 8006e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e08:	0052      	lsls	r2, r2, #1
 8006e0a:	3101      	adds	r1, #1
 8006e0c:	e7d9      	b.n	8006dc2 <__s2b+0x18>
 8006e0e:	340a      	adds	r4, #10
 8006e10:	2509      	movs	r5, #9
 8006e12:	e7f3      	b.n	8006dfc <__s2b+0x52>
 8006e14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e18:	4601      	mov	r1, r0
 8006e1a:	3b30      	subs	r3, #48	; 0x30
 8006e1c:	220a      	movs	r2, #10
 8006e1e:	4630      	mov	r0, r6
 8006e20:	f7ff ff88 	bl	8006d34 <__multadd>
 8006e24:	e7eb      	b.n	8006dfe <__s2b+0x54>

08006e26 <__hi0bits>:
 8006e26:	0c02      	lsrs	r2, r0, #16
 8006e28:	0412      	lsls	r2, r2, #16
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	b9b2      	cbnz	r2, 8006e5c <__hi0bits+0x36>
 8006e2e:	0403      	lsls	r3, r0, #16
 8006e30:	2010      	movs	r0, #16
 8006e32:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006e36:	bf04      	itt	eq
 8006e38:	021b      	lsleq	r3, r3, #8
 8006e3a:	3008      	addeq	r0, #8
 8006e3c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006e40:	bf04      	itt	eq
 8006e42:	011b      	lsleq	r3, r3, #4
 8006e44:	3004      	addeq	r0, #4
 8006e46:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006e4a:	bf04      	itt	eq
 8006e4c:	009b      	lsleq	r3, r3, #2
 8006e4e:	3002      	addeq	r0, #2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	db06      	blt.n	8006e62 <__hi0bits+0x3c>
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	d503      	bpl.n	8006e60 <__hi0bits+0x3a>
 8006e58:	3001      	adds	r0, #1
 8006e5a:	4770      	bx	lr
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e7e8      	b.n	8006e32 <__hi0bits+0xc>
 8006e60:	2020      	movs	r0, #32
 8006e62:	4770      	bx	lr

08006e64 <__lo0bits>:
 8006e64:	6803      	ldr	r3, [r0, #0]
 8006e66:	f013 0207 	ands.w	r2, r3, #7
 8006e6a:	4601      	mov	r1, r0
 8006e6c:	d00b      	beq.n	8006e86 <__lo0bits+0x22>
 8006e6e:	07da      	lsls	r2, r3, #31
 8006e70:	d423      	bmi.n	8006eba <__lo0bits+0x56>
 8006e72:	0798      	lsls	r0, r3, #30
 8006e74:	bf49      	itett	mi
 8006e76:	085b      	lsrmi	r3, r3, #1
 8006e78:	089b      	lsrpl	r3, r3, #2
 8006e7a:	2001      	movmi	r0, #1
 8006e7c:	600b      	strmi	r3, [r1, #0]
 8006e7e:	bf5c      	itt	pl
 8006e80:	600b      	strpl	r3, [r1, #0]
 8006e82:	2002      	movpl	r0, #2
 8006e84:	4770      	bx	lr
 8006e86:	b298      	uxth	r0, r3
 8006e88:	b9a8      	cbnz	r0, 8006eb6 <__lo0bits+0x52>
 8006e8a:	0c1b      	lsrs	r3, r3, #16
 8006e8c:	2010      	movs	r0, #16
 8006e8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006e92:	bf04      	itt	eq
 8006e94:	0a1b      	lsreq	r3, r3, #8
 8006e96:	3008      	addeq	r0, #8
 8006e98:	071a      	lsls	r2, r3, #28
 8006e9a:	bf04      	itt	eq
 8006e9c:	091b      	lsreq	r3, r3, #4
 8006e9e:	3004      	addeq	r0, #4
 8006ea0:	079a      	lsls	r2, r3, #30
 8006ea2:	bf04      	itt	eq
 8006ea4:	089b      	lsreq	r3, r3, #2
 8006ea6:	3002      	addeq	r0, #2
 8006ea8:	07da      	lsls	r2, r3, #31
 8006eaa:	d402      	bmi.n	8006eb2 <__lo0bits+0x4e>
 8006eac:	085b      	lsrs	r3, r3, #1
 8006eae:	d006      	beq.n	8006ebe <__lo0bits+0x5a>
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	600b      	str	r3, [r1, #0]
 8006eb4:	4770      	bx	lr
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	e7e9      	b.n	8006e8e <__lo0bits+0x2a>
 8006eba:	2000      	movs	r0, #0
 8006ebc:	4770      	bx	lr
 8006ebe:	2020      	movs	r0, #32
 8006ec0:	4770      	bx	lr

08006ec2 <__i2b>:
 8006ec2:	b510      	push	{r4, lr}
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	f7ff fee9 	bl	8006c9e <_Balloc>
 8006ecc:	2201      	movs	r2, #1
 8006ece:	6144      	str	r4, [r0, #20]
 8006ed0:	6102      	str	r2, [r0, #16]
 8006ed2:	bd10      	pop	{r4, pc}

08006ed4 <__multiply>:
 8006ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed8:	4614      	mov	r4, r2
 8006eda:	690a      	ldr	r2, [r1, #16]
 8006edc:	6923      	ldr	r3, [r4, #16]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	bfb8      	it	lt
 8006ee2:	460b      	movlt	r3, r1
 8006ee4:	4688      	mov	r8, r1
 8006ee6:	bfbc      	itt	lt
 8006ee8:	46a0      	movlt	r8, r4
 8006eea:	461c      	movlt	r4, r3
 8006eec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006ef0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006ef4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ef8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006efc:	eb07 0609 	add.w	r6, r7, r9
 8006f00:	42b3      	cmp	r3, r6
 8006f02:	bfb8      	it	lt
 8006f04:	3101      	addlt	r1, #1
 8006f06:	f7ff feca 	bl	8006c9e <_Balloc>
 8006f0a:	f100 0514 	add.w	r5, r0, #20
 8006f0e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006f12:	462b      	mov	r3, r5
 8006f14:	2200      	movs	r2, #0
 8006f16:	4573      	cmp	r3, lr
 8006f18:	d316      	bcc.n	8006f48 <__multiply+0x74>
 8006f1a:	f104 0214 	add.w	r2, r4, #20
 8006f1e:	f108 0114 	add.w	r1, r8, #20
 8006f22:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006f26:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	9b00      	ldr	r3, [sp, #0]
 8006f2e:	9201      	str	r2, [sp, #4]
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d80c      	bhi.n	8006f4e <__multiply+0x7a>
 8006f34:	2e00      	cmp	r6, #0
 8006f36:	dd03      	ble.n	8006f40 <__multiply+0x6c>
 8006f38:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d05d      	beq.n	8006ffc <__multiply+0x128>
 8006f40:	6106      	str	r6, [r0, #16]
 8006f42:	b003      	add	sp, #12
 8006f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f48:	f843 2b04 	str.w	r2, [r3], #4
 8006f4c:	e7e3      	b.n	8006f16 <__multiply+0x42>
 8006f4e:	f8b2 b000 	ldrh.w	fp, [r2]
 8006f52:	f1bb 0f00 	cmp.w	fp, #0
 8006f56:	d023      	beq.n	8006fa0 <__multiply+0xcc>
 8006f58:	4689      	mov	r9, r1
 8006f5a:	46ac      	mov	ip, r5
 8006f5c:	f04f 0800 	mov.w	r8, #0
 8006f60:	f859 4b04 	ldr.w	r4, [r9], #4
 8006f64:	f8dc a000 	ldr.w	sl, [ip]
 8006f68:	b2a3      	uxth	r3, r4
 8006f6a:	fa1f fa8a 	uxth.w	sl, sl
 8006f6e:	fb0b a303 	mla	r3, fp, r3, sl
 8006f72:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006f76:	f8dc 4000 	ldr.w	r4, [ip]
 8006f7a:	4443      	add	r3, r8
 8006f7c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f80:	fb0b 840a 	mla	r4, fp, sl, r8
 8006f84:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006f88:	46e2      	mov	sl, ip
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f90:	454f      	cmp	r7, r9
 8006f92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f96:	f84a 3b04 	str.w	r3, [sl], #4
 8006f9a:	d82b      	bhi.n	8006ff4 <__multiply+0x120>
 8006f9c:	f8cc 8004 	str.w	r8, [ip, #4]
 8006fa0:	9b01      	ldr	r3, [sp, #4]
 8006fa2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006fa6:	3204      	adds	r2, #4
 8006fa8:	f1ba 0f00 	cmp.w	sl, #0
 8006fac:	d020      	beq.n	8006ff0 <__multiply+0x11c>
 8006fae:	682b      	ldr	r3, [r5, #0]
 8006fb0:	4689      	mov	r9, r1
 8006fb2:	46a8      	mov	r8, r5
 8006fb4:	f04f 0b00 	mov.w	fp, #0
 8006fb8:	f8b9 c000 	ldrh.w	ip, [r9]
 8006fbc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006fc0:	fb0a 440c 	mla	r4, sl, ip, r4
 8006fc4:	445c      	add	r4, fp
 8006fc6:	46c4      	mov	ip, r8
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006fce:	f84c 3b04 	str.w	r3, [ip], #4
 8006fd2:	f859 3b04 	ldr.w	r3, [r9], #4
 8006fd6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006fda:	0c1b      	lsrs	r3, r3, #16
 8006fdc:	fb0a b303 	mla	r3, sl, r3, fp
 8006fe0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006fe4:	454f      	cmp	r7, r9
 8006fe6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006fea:	d805      	bhi.n	8006ff8 <__multiply+0x124>
 8006fec:	f8c8 3004 	str.w	r3, [r8, #4]
 8006ff0:	3504      	adds	r5, #4
 8006ff2:	e79b      	b.n	8006f2c <__multiply+0x58>
 8006ff4:	46d4      	mov	ip, sl
 8006ff6:	e7b3      	b.n	8006f60 <__multiply+0x8c>
 8006ff8:	46e0      	mov	r8, ip
 8006ffa:	e7dd      	b.n	8006fb8 <__multiply+0xe4>
 8006ffc:	3e01      	subs	r6, #1
 8006ffe:	e799      	b.n	8006f34 <__multiply+0x60>

08007000 <__pow5mult>:
 8007000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007004:	4615      	mov	r5, r2
 8007006:	f012 0203 	ands.w	r2, r2, #3
 800700a:	4606      	mov	r6, r0
 800700c:	460f      	mov	r7, r1
 800700e:	d007      	beq.n	8007020 <__pow5mult+0x20>
 8007010:	3a01      	subs	r2, #1
 8007012:	4c21      	ldr	r4, [pc, #132]	; (8007098 <__pow5mult+0x98>)
 8007014:	2300      	movs	r3, #0
 8007016:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800701a:	f7ff fe8b 	bl	8006d34 <__multadd>
 800701e:	4607      	mov	r7, r0
 8007020:	10ad      	asrs	r5, r5, #2
 8007022:	d035      	beq.n	8007090 <__pow5mult+0x90>
 8007024:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007026:	b93c      	cbnz	r4, 8007038 <__pow5mult+0x38>
 8007028:	2010      	movs	r0, #16
 800702a:	f7ff fe13 	bl	8006c54 <malloc>
 800702e:	6270      	str	r0, [r6, #36]	; 0x24
 8007030:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007034:	6004      	str	r4, [r0, #0]
 8007036:	60c4      	str	r4, [r0, #12]
 8007038:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800703c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007040:	b94c      	cbnz	r4, 8007056 <__pow5mult+0x56>
 8007042:	f240 2171 	movw	r1, #625	; 0x271
 8007046:	4630      	mov	r0, r6
 8007048:	f7ff ff3b 	bl	8006ec2 <__i2b>
 800704c:	2300      	movs	r3, #0
 800704e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007052:	4604      	mov	r4, r0
 8007054:	6003      	str	r3, [r0, #0]
 8007056:	f04f 0800 	mov.w	r8, #0
 800705a:	07eb      	lsls	r3, r5, #31
 800705c:	d50a      	bpl.n	8007074 <__pow5mult+0x74>
 800705e:	4639      	mov	r1, r7
 8007060:	4622      	mov	r2, r4
 8007062:	4630      	mov	r0, r6
 8007064:	f7ff ff36 	bl	8006ed4 <__multiply>
 8007068:	4639      	mov	r1, r7
 800706a:	4681      	mov	r9, r0
 800706c:	4630      	mov	r0, r6
 800706e:	f7ff fe4a 	bl	8006d06 <_Bfree>
 8007072:	464f      	mov	r7, r9
 8007074:	106d      	asrs	r5, r5, #1
 8007076:	d00b      	beq.n	8007090 <__pow5mult+0x90>
 8007078:	6820      	ldr	r0, [r4, #0]
 800707a:	b938      	cbnz	r0, 800708c <__pow5mult+0x8c>
 800707c:	4622      	mov	r2, r4
 800707e:	4621      	mov	r1, r4
 8007080:	4630      	mov	r0, r6
 8007082:	f7ff ff27 	bl	8006ed4 <__multiply>
 8007086:	6020      	str	r0, [r4, #0]
 8007088:	f8c0 8000 	str.w	r8, [r0]
 800708c:	4604      	mov	r4, r0
 800708e:	e7e4      	b.n	800705a <__pow5mult+0x5a>
 8007090:	4638      	mov	r0, r7
 8007092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007096:	bf00      	nop
 8007098:	08007ba8 	.word	0x08007ba8

0800709c <__lshift>:
 800709c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a0:	460c      	mov	r4, r1
 80070a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070a6:	6923      	ldr	r3, [r4, #16]
 80070a8:	6849      	ldr	r1, [r1, #4]
 80070aa:	eb0a 0903 	add.w	r9, sl, r3
 80070ae:	68a3      	ldr	r3, [r4, #8]
 80070b0:	4607      	mov	r7, r0
 80070b2:	4616      	mov	r6, r2
 80070b4:	f109 0501 	add.w	r5, r9, #1
 80070b8:	42ab      	cmp	r3, r5
 80070ba:	db32      	blt.n	8007122 <__lshift+0x86>
 80070bc:	4638      	mov	r0, r7
 80070be:	f7ff fdee 	bl	8006c9e <_Balloc>
 80070c2:	2300      	movs	r3, #0
 80070c4:	4680      	mov	r8, r0
 80070c6:	f100 0114 	add.w	r1, r0, #20
 80070ca:	461a      	mov	r2, r3
 80070cc:	4553      	cmp	r3, sl
 80070ce:	db2b      	blt.n	8007128 <__lshift+0x8c>
 80070d0:	6920      	ldr	r0, [r4, #16]
 80070d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070d6:	f104 0314 	add.w	r3, r4, #20
 80070da:	f016 021f 	ands.w	r2, r6, #31
 80070de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070e6:	d025      	beq.n	8007134 <__lshift+0x98>
 80070e8:	f1c2 0e20 	rsb	lr, r2, #32
 80070ec:	2000      	movs	r0, #0
 80070ee:	681e      	ldr	r6, [r3, #0]
 80070f0:	468a      	mov	sl, r1
 80070f2:	4096      	lsls	r6, r2
 80070f4:	4330      	orrs	r0, r6
 80070f6:	f84a 0b04 	str.w	r0, [sl], #4
 80070fa:	f853 0b04 	ldr.w	r0, [r3], #4
 80070fe:	459c      	cmp	ip, r3
 8007100:	fa20 f00e 	lsr.w	r0, r0, lr
 8007104:	d814      	bhi.n	8007130 <__lshift+0x94>
 8007106:	6048      	str	r0, [r1, #4]
 8007108:	b108      	cbz	r0, 800710e <__lshift+0x72>
 800710a:	f109 0502 	add.w	r5, r9, #2
 800710e:	3d01      	subs	r5, #1
 8007110:	4638      	mov	r0, r7
 8007112:	f8c8 5010 	str.w	r5, [r8, #16]
 8007116:	4621      	mov	r1, r4
 8007118:	f7ff fdf5 	bl	8006d06 <_Bfree>
 800711c:	4640      	mov	r0, r8
 800711e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007122:	3101      	adds	r1, #1
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	e7c7      	b.n	80070b8 <__lshift+0x1c>
 8007128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800712c:	3301      	adds	r3, #1
 800712e:	e7cd      	b.n	80070cc <__lshift+0x30>
 8007130:	4651      	mov	r1, sl
 8007132:	e7dc      	b.n	80070ee <__lshift+0x52>
 8007134:	3904      	subs	r1, #4
 8007136:	f853 2b04 	ldr.w	r2, [r3], #4
 800713a:	f841 2f04 	str.w	r2, [r1, #4]!
 800713e:	459c      	cmp	ip, r3
 8007140:	d8f9      	bhi.n	8007136 <__lshift+0x9a>
 8007142:	e7e4      	b.n	800710e <__lshift+0x72>

08007144 <__mcmp>:
 8007144:	6903      	ldr	r3, [r0, #16]
 8007146:	690a      	ldr	r2, [r1, #16]
 8007148:	1a9b      	subs	r3, r3, r2
 800714a:	b530      	push	{r4, r5, lr}
 800714c:	d10c      	bne.n	8007168 <__mcmp+0x24>
 800714e:	0092      	lsls	r2, r2, #2
 8007150:	3014      	adds	r0, #20
 8007152:	3114      	adds	r1, #20
 8007154:	1884      	adds	r4, r0, r2
 8007156:	4411      	add	r1, r2
 8007158:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800715c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007160:	4295      	cmp	r5, r2
 8007162:	d003      	beq.n	800716c <__mcmp+0x28>
 8007164:	d305      	bcc.n	8007172 <__mcmp+0x2e>
 8007166:	2301      	movs	r3, #1
 8007168:	4618      	mov	r0, r3
 800716a:	bd30      	pop	{r4, r5, pc}
 800716c:	42a0      	cmp	r0, r4
 800716e:	d3f3      	bcc.n	8007158 <__mcmp+0x14>
 8007170:	e7fa      	b.n	8007168 <__mcmp+0x24>
 8007172:	f04f 33ff 	mov.w	r3, #4294967295
 8007176:	e7f7      	b.n	8007168 <__mcmp+0x24>

08007178 <__mdiff>:
 8007178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800717c:	460d      	mov	r5, r1
 800717e:	4607      	mov	r7, r0
 8007180:	4611      	mov	r1, r2
 8007182:	4628      	mov	r0, r5
 8007184:	4614      	mov	r4, r2
 8007186:	f7ff ffdd 	bl	8007144 <__mcmp>
 800718a:	1e06      	subs	r6, r0, #0
 800718c:	d108      	bne.n	80071a0 <__mdiff+0x28>
 800718e:	4631      	mov	r1, r6
 8007190:	4638      	mov	r0, r7
 8007192:	f7ff fd84 	bl	8006c9e <_Balloc>
 8007196:	2301      	movs	r3, #1
 8007198:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800719c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a0:	bfa4      	itt	ge
 80071a2:	4623      	movge	r3, r4
 80071a4:	462c      	movge	r4, r5
 80071a6:	4638      	mov	r0, r7
 80071a8:	6861      	ldr	r1, [r4, #4]
 80071aa:	bfa6      	itte	ge
 80071ac:	461d      	movge	r5, r3
 80071ae:	2600      	movge	r6, #0
 80071b0:	2601      	movlt	r6, #1
 80071b2:	f7ff fd74 	bl	8006c9e <_Balloc>
 80071b6:	692b      	ldr	r3, [r5, #16]
 80071b8:	60c6      	str	r6, [r0, #12]
 80071ba:	6926      	ldr	r6, [r4, #16]
 80071bc:	f105 0914 	add.w	r9, r5, #20
 80071c0:	f104 0214 	add.w	r2, r4, #20
 80071c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80071c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80071cc:	f100 0514 	add.w	r5, r0, #20
 80071d0:	f04f 0e00 	mov.w	lr, #0
 80071d4:	f852 ab04 	ldr.w	sl, [r2], #4
 80071d8:	f859 4b04 	ldr.w	r4, [r9], #4
 80071dc:	fa1e f18a 	uxtah	r1, lr, sl
 80071e0:	b2a3      	uxth	r3, r4
 80071e2:	1ac9      	subs	r1, r1, r3
 80071e4:	0c23      	lsrs	r3, r4, #16
 80071e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80071ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80071ee:	b289      	uxth	r1, r1
 80071f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80071f4:	45c8      	cmp	r8, r9
 80071f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80071fa:	4694      	mov	ip, r2
 80071fc:	f845 3b04 	str.w	r3, [r5], #4
 8007200:	d8e8      	bhi.n	80071d4 <__mdiff+0x5c>
 8007202:	45bc      	cmp	ip, r7
 8007204:	d304      	bcc.n	8007210 <__mdiff+0x98>
 8007206:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800720a:	b183      	cbz	r3, 800722e <__mdiff+0xb6>
 800720c:	6106      	str	r6, [r0, #16]
 800720e:	e7c5      	b.n	800719c <__mdiff+0x24>
 8007210:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007214:	fa1e f381 	uxtah	r3, lr, r1
 8007218:	141a      	asrs	r2, r3, #16
 800721a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800721e:	b29b      	uxth	r3, r3
 8007220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007224:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007228:	f845 3b04 	str.w	r3, [r5], #4
 800722c:	e7e9      	b.n	8007202 <__mdiff+0x8a>
 800722e:	3e01      	subs	r6, #1
 8007230:	e7e9      	b.n	8007206 <__mdiff+0x8e>
	...

08007234 <__ulp>:
 8007234:	4b12      	ldr	r3, [pc, #72]	; (8007280 <__ulp+0x4c>)
 8007236:	ee10 2a90 	vmov	r2, s1
 800723a:	401a      	ands	r2, r3
 800723c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007240:	2b00      	cmp	r3, #0
 8007242:	dd04      	ble.n	800724e <__ulp+0x1a>
 8007244:	2000      	movs	r0, #0
 8007246:	4619      	mov	r1, r3
 8007248:	ec41 0b10 	vmov	d0, r0, r1
 800724c:	4770      	bx	lr
 800724e:	425b      	negs	r3, r3
 8007250:	151b      	asrs	r3, r3, #20
 8007252:	2b13      	cmp	r3, #19
 8007254:	f04f 0000 	mov.w	r0, #0
 8007258:	f04f 0100 	mov.w	r1, #0
 800725c:	dc04      	bgt.n	8007268 <__ulp+0x34>
 800725e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007262:	fa42 f103 	asr.w	r1, r2, r3
 8007266:	e7ef      	b.n	8007248 <__ulp+0x14>
 8007268:	3b14      	subs	r3, #20
 800726a:	2b1e      	cmp	r3, #30
 800726c:	f04f 0201 	mov.w	r2, #1
 8007270:	bfda      	itte	le
 8007272:	f1c3 031f 	rsble	r3, r3, #31
 8007276:	fa02 f303 	lslle.w	r3, r2, r3
 800727a:	4613      	movgt	r3, r2
 800727c:	4618      	mov	r0, r3
 800727e:	e7e3      	b.n	8007248 <__ulp+0x14>
 8007280:	7ff00000 	.word	0x7ff00000

08007284 <__b2d>:
 8007284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007286:	6905      	ldr	r5, [r0, #16]
 8007288:	f100 0714 	add.w	r7, r0, #20
 800728c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007290:	1f2e      	subs	r6, r5, #4
 8007292:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007296:	4620      	mov	r0, r4
 8007298:	f7ff fdc5 	bl	8006e26 <__hi0bits>
 800729c:	f1c0 0320 	rsb	r3, r0, #32
 80072a0:	280a      	cmp	r0, #10
 80072a2:	600b      	str	r3, [r1, #0]
 80072a4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800731c <__b2d+0x98>
 80072a8:	dc14      	bgt.n	80072d4 <__b2d+0x50>
 80072aa:	f1c0 0e0b 	rsb	lr, r0, #11
 80072ae:	fa24 f10e 	lsr.w	r1, r4, lr
 80072b2:	42b7      	cmp	r7, r6
 80072b4:	ea41 030c 	orr.w	r3, r1, ip
 80072b8:	bf34      	ite	cc
 80072ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80072be:	2100      	movcs	r1, #0
 80072c0:	3015      	adds	r0, #21
 80072c2:	fa04 f000 	lsl.w	r0, r4, r0
 80072c6:	fa21 f10e 	lsr.w	r1, r1, lr
 80072ca:	ea40 0201 	orr.w	r2, r0, r1
 80072ce:	ec43 2b10 	vmov	d0, r2, r3
 80072d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d4:	42b7      	cmp	r7, r6
 80072d6:	bf3a      	itte	cc
 80072d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80072dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80072e0:	2100      	movcs	r1, #0
 80072e2:	380b      	subs	r0, #11
 80072e4:	d015      	beq.n	8007312 <__b2d+0x8e>
 80072e6:	4084      	lsls	r4, r0
 80072e8:	f1c0 0520 	rsb	r5, r0, #32
 80072ec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80072f0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80072f4:	42be      	cmp	r6, r7
 80072f6:	fa21 fc05 	lsr.w	ip, r1, r5
 80072fa:	ea44 030c 	orr.w	r3, r4, ip
 80072fe:	bf8c      	ite	hi
 8007300:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007304:	2400      	movls	r4, #0
 8007306:	fa01 f000 	lsl.w	r0, r1, r0
 800730a:	40ec      	lsrs	r4, r5
 800730c:	ea40 0204 	orr.w	r2, r0, r4
 8007310:	e7dd      	b.n	80072ce <__b2d+0x4a>
 8007312:	ea44 030c 	orr.w	r3, r4, ip
 8007316:	460a      	mov	r2, r1
 8007318:	e7d9      	b.n	80072ce <__b2d+0x4a>
 800731a:	bf00      	nop
 800731c:	3ff00000 	.word	0x3ff00000

08007320 <__d2b>:
 8007320:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007324:	460e      	mov	r6, r1
 8007326:	2101      	movs	r1, #1
 8007328:	ec59 8b10 	vmov	r8, r9, d0
 800732c:	4615      	mov	r5, r2
 800732e:	f7ff fcb6 	bl	8006c9e <_Balloc>
 8007332:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007336:	4607      	mov	r7, r0
 8007338:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800733c:	bb34      	cbnz	r4, 800738c <__d2b+0x6c>
 800733e:	9301      	str	r3, [sp, #4]
 8007340:	f1b8 0300 	subs.w	r3, r8, #0
 8007344:	d027      	beq.n	8007396 <__d2b+0x76>
 8007346:	a802      	add	r0, sp, #8
 8007348:	f840 3d08 	str.w	r3, [r0, #-8]!
 800734c:	f7ff fd8a 	bl	8006e64 <__lo0bits>
 8007350:	9900      	ldr	r1, [sp, #0]
 8007352:	b1f0      	cbz	r0, 8007392 <__d2b+0x72>
 8007354:	9a01      	ldr	r2, [sp, #4]
 8007356:	f1c0 0320 	rsb	r3, r0, #32
 800735a:	fa02 f303 	lsl.w	r3, r2, r3
 800735e:	430b      	orrs	r3, r1
 8007360:	40c2      	lsrs	r2, r0
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	9201      	str	r2, [sp, #4]
 8007366:	9b01      	ldr	r3, [sp, #4]
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	2b00      	cmp	r3, #0
 800736c:	bf14      	ite	ne
 800736e:	2102      	movne	r1, #2
 8007370:	2101      	moveq	r1, #1
 8007372:	6139      	str	r1, [r7, #16]
 8007374:	b1c4      	cbz	r4, 80073a8 <__d2b+0x88>
 8007376:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800737a:	4404      	add	r4, r0
 800737c:	6034      	str	r4, [r6, #0]
 800737e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007382:	6028      	str	r0, [r5, #0]
 8007384:	4638      	mov	r0, r7
 8007386:	b003      	add	sp, #12
 8007388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800738c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007390:	e7d5      	b.n	800733e <__d2b+0x1e>
 8007392:	6179      	str	r1, [r7, #20]
 8007394:	e7e7      	b.n	8007366 <__d2b+0x46>
 8007396:	a801      	add	r0, sp, #4
 8007398:	f7ff fd64 	bl	8006e64 <__lo0bits>
 800739c:	9b01      	ldr	r3, [sp, #4]
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	2101      	movs	r1, #1
 80073a2:	6139      	str	r1, [r7, #16]
 80073a4:	3020      	adds	r0, #32
 80073a6:	e7e5      	b.n	8007374 <__d2b+0x54>
 80073a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80073ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073b0:	6030      	str	r0, [r6, #0]
 80073b2:	6918      	ldr	r0, [r3, #16]
 80073b4:	f7ff fd37 	bl	8006e26 <__hi0bits>
 80073b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80073bc:	e7e1      	b.n	8007382 <__d2b+0x62>

080073be <__ratio>:
 80073be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c2:	4688      	mov	r8, r1
 80073c4:	4669      	mov	r1, sp
 80073c6:	4681      	mov	r9, r0
 80073c8:	f7ff ff5c 	bl	8007284 <__b2d>
 80073cc:	a901      	add	r1, sp, #4
 80073ce:	4640      	mov	r0, r8
 80073d0:	ec57 6b10 	vmov	r6, r7, d0
 80073d4:	f7ff ff56 	bl	8007284 <__b2d>
 80073d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80073e0:	eba3 0c02 	sub.w	ip, r3, r2
 80073e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80073e8:	1a9b      	subs	r3, r3, r2
 80073ea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80073ee:	ec5b ab10 	vmov	sl, fp, d0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	bfce      	itee	gt
 80073f6:	463a      	movgt	r2, r7
 80073f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80073fc:	465a      	movle	r2, fp
 80073fe:	4659      	mov	r1, fp
 8007400:	463d      	mov	r5, r7
 8007402:	bfd4      	ite	le
 8007404:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007408:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800740c:	4630      	mov	r0, r6
 800740e:	ee10 2a10 	vmov	r2, s0
 8007412:	460b      	mov	r3, r1
 8007414:	4629      	mov	r1, r5
 8007416:	f7f9 fa19 	bl	800084c <__aeabi_ddiv>
 800741a:	ec41 0b10 	vmov	d0, r0, r1
 800741e:	b003      	add	sp, #12
 8007420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007424 <__copybits>:
 8007424:	3901      	subs	r1, #1
 8007426:	b510      	push	{r4, lr}
 8007428:	1149      	asrs	r1, r1, #5
 800742a:	6914      	ldr	r4, [r2, #16]
 800742c:	3101      	adds	r1, #1
 800742e:	f102 0314 	add.w	r3, r2, #20
 8007432:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007436:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800743a:	42a3      	cmp	r3, r4
 800743c:	4602      	mov	r2, r0
 800743e:	d303      	bcc.n	8007448 <__copybits+0x24>
 8007440:	2300      	movs	r3, #0
 8007442:	428a      	cmp	r2, r1
 8007444:	d305      	bcc.n	8007452 <__copybits+0x2e>
 8007446:	bd10      	pop	{r4, pc}
 8007448:	f853 2b04 	ldr.w	r2, [r3], #4
 800744c:	f840 2b04 	str.w	r2, [r0], #4
 8007450:	e7f3      	b.n	800743a <__copybits+0x16>
 8007452:	f842 3b04 	str.w	r3, [r2], #4
 8007456:	e7f4      	b.n	8007442 <__copybits+0x1e>

08007458 <__any_on>:
 8007458:	f100 0214 	add.w	r2, r0, #20
 800745c:	6900      	ldr	r0, [r0, #16]
 800745e:	114b      	asrs	r3, r1, #5
 8007460:	4298      	cmp	r0, r3
 8007462:	b510      	push	{r4, lr}
 8007464:	db11      	blt.n	800748a <__any_on+0x32>
 8007466:	dd0a      	ble.n	800747e <__any_on+0x26>
 8007468:	f011 011f 	ands.w	r1, r1, #31
 800746c:	d007      	beq.n	800747e <__any_on+0x26>
 800746e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007472:	fa24 f001 	lsr.w	r0, r4, r1
 8007476:	fa00 f101 	lsl.w	r1, r0, r1
 800747a:	428c      	cmp	r4, r1
 800747c:	d10b      	bne.n	8007496 <__any_on+0x3e>
 800747e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007482:	4293      	cmp	r3, r2
 8007484:	d803      	bhi.n	800748e <__any_on+0x36>
 8007486:	2000      	movs	r0, #0
 8007488:	bd10      	pop	{r4, pc}
 800748a:	4603      	mov	r3, r0
 800748c:	e7f7      	b.n	800747e <__any_on+0x26>
 800748e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007492:	2900      	cmp	r1, #0
 8007494:	d0f5      	beq.n	8007482 <__any_on+0x2a>
 8007496:	2001      	movs	r0, #1
 8007498:	e7f6      	b.n	8007488 <__any_on+0x30>

0800749a <_calloc_r>:
 800749a:	b538      	push	{r3, r4, r5, lr}
 800749c:	fb02 f401 	mul.w	r4, r2, r1
 80074a0:	4621      	mov	r1, r4
 80074a2:	f000 f857 	bl	8007554 <_malloc_r>
 80074a6:	4605      	mov	r5, r0
 80074a8:	b118      	cbz	r0, 80074b2 <_calloc_r+0x18>
 80074aa:	4622      	mov	r2, r4
 80074ac:	2100      	movs	r1, #0
 80074ae:	f7fc fd35 	bl	8003f1c <memset>
 80074b2:	4628      	mov	r0, r5
 80074b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080074b8 <_free_r>:
 80074b8:	b538      	push	{r3, r4, r5, lr}
 80074ba:	4605      	mov	r5, r0
 80074bc:	2900      	cmp	r1, #0
 80074be:	d045      	beq.n	800754c <_free_r+0x94>
 80074c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074c4:	1f0c      	subs	r4, r1, #4
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	bfb8      	it	lt
 80074ca:	18e4      	addlt	r4, r4, r3
 80074cc:	f000 fa36 	bl	800793c <__malloc_lock>
 80074d0:	4a1f      	ldr	r2, [pc, #124]	; (8007550 <_free_r+0x98>)
 80074d2:	6813      	ldr	r3, [r2, #0]
 80074d4:	4610      	mov	r0, r2
 80074d6:	b933      	cbnz	r3, 80074e6 <_free_r+0x2e>
 80074d8:	6063      	str	r3, [r4, #4]
 80074da:	6014      	str	r4, [r2, #0]
 80074dc:	4628      	mov	r0, r5
 80074de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074e2:	f000 ba2c 	b.w	800793e <__malloc_unlock>
 80074e6:	42a3      	cmp	r3, r4
 80074e8:	d90c      	bls.n	8007504 <_free_r+0x4c>
 80074ea:	6821      	ldr	r1, [r4, #0]
 80074ec:	1862      	adds	r2, r4, r1
 80074ee:	4293      	cmp	r3, r2
 80074f0:	bf04      	itt	eq
 80074f2:	681a      	ldreq	r2, [r3, #0]
 80074f4:	685b      	ldreq	r3, [r3, #4]
 80074f6:	6063      	str	r3, [r4, #4]
 80074f8:	bf04      	itt	eq
 80074fa:	1852      	addeq	r2, r2, r1
 80074fc:	6022      	streq	r2, [r4, #0]
 80074fe:	6004      	str	r4, [r0, #0]
 8007500:	e7ec      	b.n	80074dc <_free_r+0x24>
 8007502:	4613      	mov	r3, r2
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	b10a      	cbz	r2, 800750c <_free_r+0x54>
 8007508:	42a2      	cmp	r2, r4
 800750a:	d9fa      	bls.n	8007502 <_free_r+0x4a>
 800750c:	6819      	ldr	r1, [r3, #0]
 800750e:	1858      	adds	r0, r3, r1
 8007510:	42a0      	cmp	r0, r4
 8007512:	d10b      	bne.n	800752c <_free_r+0x74>
 8007514:	6820      	ldr	r0, [r4, #0]
 8007516:	4401      	add	r1, r0
 8007518:	1858      	adds	r0, r3, r1
 800751a:	4282      	cmp	r2, r0
 800751c:	6019      	str	r1, [r3, #0]
 800751e:	d1dd      	bne.n	80074dc <_free_r+0x24>
 8007520:	6810      	ldr	r0, [r2, #0]
 8007522:	6852      	ldr	r2, [r2, #4]
 8007524:	605a      	str	r2, [r3, #4]
 8007526:	4401      	add	r1, r0
 8007528:	6019      	str	r1, [r3, #0]
 800752a:	e7d7      	b.n	80074dc <_free_r+0x24>
 800752c:	d902      	bls.n	8007534 <_free_r+0x7c>
 800752e:	230c      	movs	r3, #12
 8007530:	602b      	str	r3, [r5, #0]
 8007532:	e7d3      	b.n	80074dc <_free_r+0x24>
 8007534:	6820      	ldr	r0, [r4, #0]
 8007536:	1821      	adds	r1, r4, r0
 8007538:	428a      	cmp	r2, r1
 800753a:	bf04      	itt	eq
 800753c:	6811      	ldreq	r1, [r2, #0]
 800753e:	6852      	ldreq	r2, [r2, #4]
 8007540:	6062      	str	r2, [r4, #4]
 8007542:	bf04      	itt	eq
 8007544:	1809      	addeq	r1, r1, r0
 8007546:	6021      	streq	r1, [r4, #0]
 8007548:	605c      	str	r4, [r3, #4]
 800754a:	e7c7      	b.n	80074dc <_free_r+0x24>
 800754c:	bd38      	pop	{r3, r4, r5, pc}
 800754e:	bf00      	nop
 8007550:	200001fc 	.word	0x200001fc

08007554 <_malloc_r>:
 8007554:	b570      	push	{r4, r5, r6, lr}
 8007556:	1ccd      	adds	r5, r1, #3
 8007558:	f025 0503 	bic.w	r5, r5, #3
 800755c:	3508      	adds	r5, #8
 800755e:	2d0c      	cmp	r5, #12
 8007560:	bf38      	it	cc
 8007562:	250c      	movcc	r5, #12
 8007564:	2d00      	cmp	r5, #0
 8007566:	4606      	mov	r6, r0
 8007568:	db01      	blt.n	800756e <_malloc_r+0x1a>
 800756a:	42a9      	cmp	r1, r5
 800756c:	d903      	bls.n	8007576 <_malloc_r+0x22>
 800756e:	230c      	movs	r3, #12
 8007570:	6033      	str	r3, [r6, #0]
 8007572:	2000      	movs	r0, #0
 8007574:	bd70      	pop	{r4, r5, r6, pc}
 8007576:	f000 f9e1 	bl	800793c <__malloc_lock>
 800757a:	4a21      	ldr	r2, [pc, #132]	; (8007600 <_malloc_r+0xac>)
 800757c:	6814      	ldr	r4, [r2, #0]
 800757e:	4621      	mov	r1, r4
 8007580:	b991      	cbnz	r1, 80075a8 <_malloc_r+0x54>
 8007582:	4c20      	ldr	r4, [pc, #128]	; (8007604 <_malloc_r+0xb0>)
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	b91b      	cbnz	r3, 8007590 <_malloc_r+0x3c>
 8007588:	4630      	mov	r0, r6
 800758a:	f000 f98f 	bl	80078ac <_sbrk_r>
 800758e:	6020      	str	r0, [r4, #0]
 8007590:	4629      	mov	r1, r5
 8007592:	4630      	mov	r0, r6
 8007594:	f000 f98a 	bl	80078ac <_sbrk_r>
 8007598:	1c43      	adds	r3, r0, #1
 800759a:	d124      	bne.n	80075e6 <_malloc_r+0x92>
 800759c:	230c      	movs	r3, #12
 800759e:	6033      	str	r3, [r6, #0]
 80075a0:	4630      	mov	r0, r6
 80075a2:	f000 f9cc 	bl	800793e <__malloc_unlock>
 80075a6:	e7e4      	b.n	8007572 <_malloc_r+0x1e>
 80075a8:	680b      	ldr	r3, [r1, #0]
 80075aa:	1b5b      	subs	r3, r3, r5
 80075ac:	d418      	bmi.n	80075e0 <_malloc_r+0x8c>
 80075ae:	2b0b      	cmp	r3, #11
 80075b0:	d90f      	bls.n	80075d2 <_malloc_r+0x7e>
 80075b2:	600b      	str	r3, [r1, #0]
 80075b4:	50cd      	str	r5, [r1, r3]
 80075b6:	18cc      	adds	r4, r1, r3
 80075b8:	4630      	mov	r0, r6
 80075ba:	f000 f9c0 	bl	800793e <__malloc_unlock>
 80075be:	f104 000b 	add.w	r0, r4, #11
 80075c2:	1d23      	adds	r3, r4, #4
 80075c4:	f020 0007 	bic.w	r0, r0, #7
 80075c8:	1ac3      	subs	r3, r0, r3
 80075ca:	d0d3      	beq.n	8007574 <_malloc_r+0x20>
 80075cc:	425a      	negs	r2, r3
 80075ce:	50e2      	str	r2, [r4, r3]
 80075d0:	e7d0      	b.n	8007574 <_malloc_r+0x20>
 80075d2:	428c      	cmp	r4, r1
 80075d4:	684b      	ldr	r3, [r1, #4]
 80075d6:	bf16      	itet	ne
 80075d8:	6063      	strne	r3, [r4, #4]
 80075da:	6013      	streq	r3, [r2, #0]
 80075dc:	460c      	movne	r4, r1
 80075de:	e7eb      	b.n	80075b8 <_malloc_r+0x64>
 80075e0:	460c      	mov	r4, r1
 80075e2:	6849      	ldr	r1, [r1, #4]
 80075e4:	e7cc      	b.n	8007580 <_malloc_r+0x2c>
 80075e6:	1cc4      	adds	r4, r0, #3
 80075e8:	f024 0403 	bic.w	r4, r4, #3
 80075ec:	42a0      	cmp	r0, r4
 80075ee:	d005      	beq.n	80075fc <_malloc_r+0xa8>
 80075f0:	1a21      	subs	r1, r4, r0
 80075f2:	4630      	mov	r0, r6
 80075f4:	f000 f95a 	bl	80078ac <_sbrk_r>
 80075f8:	3001      	adds	r0, #1
 80075fa:	d0cf      	beq.n	800759c <_malloc_r+0x48>
 80075fc:	6025      	str	r5, [r4, #0]
 80075fe:	e7db      	b.n	80075b8 <_malloc_r+0x64>
 8007600:	200001fc 	.word	0x200001fc
 8007604:	20000200 	.word	0x20000200

08007608 <__ssputs_r>:
 8007608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800760c:	688e      	ldr	r6, [r1, #8]
 800760e:	429e      	cmp	r6, r3
 8007610:	4682      	mov	sl, r0
 8007612:	460c      	mov	r4, r1
 8007614:	4690      	mov	r8, r2
 8007616:	4699      	mov	r9, r3
 8007618:	d837      	bhi.n	800768a <__ssputs_r+0x82>
 800761a:	898a      	ldrh	r2, [r1, #12]
 800761c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007620:	d031      	beq.n	8007686 <__ssputs_r+0x7e>
 8007622:	6825      	ldr	r5, [r4, #0]
 8007624:	6909      	ldr	r1, [r1, #16]
 8007626:	1a6f      	subs	r7, r5, r1
 8007628:	6965      	ldr	r5, [r4, #20]
 800762a:	2302      	movs	r3, #2
 800762c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007630:	fb95 f5f3 	sdiv	r5, r5, r3
 8007634:	f109 0301 	add.w	r3, r9, #1
 8007638:	443b      	add	r3, r7
 800763a:	429d      	cmp	r5, r3
 800763c:	bf38      	it	cc
 800763e:	461d      	movcc	r5, r3
 8007640:	0553      	lsls	r3, r2, #21
 8007642:	d530      	bpl.n	80076a6 <__ssputs_r+0x9e>
 8007644:	4629      	mov	r1, r5
 8007646:	f7ff ff85 	bl	8007554 <_malloc_r>
 800764a:	4606      	mov	r6, r0
 800764c:	b950      	cbnz	r0, 8007664 <__ssputs_r+0x5c>
 800764e:	230c      	movs	r3, #12
 8007650:	f8ca 3000 	str.w	r3, [sl]
 8007654:	89a3      	ldrh	r3, [r4, #12]
 8007656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800765a:	81a3      	strh	r3, [r4, #12]
 800765c:	f04f 30ff 	mov.w	r0, #4294967295
 8007660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007664:	463a      	mov	r2, r7
 8007666:	6921      	ldr	r1, [r4, #16]
 8007668:	f7ff fb0e 	bl	8006c88 <memcpy>
 800766c:	89a3      	ldrh	r3, [r4, #12]
 800766e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007676:	81a3      	strh	r3, [r4, #12]
 8007678:	6126      	str	r6, [r4, #16]
 800767a:	6165      	str	r5, [r4, #20]
 800767c:	443e      	add	r6, r7
 800767e:	1bed      	subs	r5, r5, r7
 8007680:	6026      	str	r6, [r4, #0]
 8007682:	60a5      	str	r5, [r4, #8]
 8007684:	464e      	mov	r6, r9
 8007686:	454e      	cmp	r6, r9
 8007688:	d900      	bls.n	800768c <__ssputs_r+0x84>
 800768a:	464e      	mov	r6, r9
 800768c:	4632      	mov	r2, r6
 800768e:	4641      	mov	r1, r8
 8007690:	6820      	ldr	r0, [r4, #0]
 8007692:	f000 f93a 	bl	800790a <memmove>
 8007696:	68a3      	ldr	r3, [r4, #8]
 8007698:	1b9b      	subs	r3, r3, r6
 800769a:	60a3      	str	r3, [r4, #8]
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	441e      	add	r6, r3
 80076a0:	6026      	str	r6, [r4, #0]
 80076a2:	2000      	movs	r0, #0
 80076a4:	e7dc      	b.n	8007660 <__ssputs_r+0x58>
 80076a6:	462a      	mov	r2, r5
 80076a8:	f000 f94a 	bl	8007940 <_realloc_r>
 80076ac:	4606      	mov	r6, r0
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d1e2      	bne.n	8007678 <__ssputs_r+0x70>
 80076b2:	6921      	ldr	r1, [r4, #16]
 80076b4:	4650      	mov	r0, sl
 80076b6:	f7ff feff 	bl	80074b8 <_free_r>
 80076ba:	e7c8      	b.n	800764e <__ssputs_r+0x46>

080076bc <_svfiprintf_r>:
 80076bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c0:	461d      	mov	r5, r3
 80076c2:	898b      	ldrh	r3, [r1, #12]
 80076c4:	061f      	lsls	r7, r3, #24
 80076c6:	b09d      	sub	sp, #116	; 0x74
 80076c8:	4680      	mov	r8, r0
 80076ca:	460c      	mov	r4, r1
 80076cc:	4616      	mov	r6, r2
 80076ce:	d50f      	bpl.n	80076f0 <_svfiprintf_r+0x34>
 80076d0:	690b      	ldr	r3, [r1, #16]
 80076d2:	b96b      	cbnz	r3, 80076f0 <_svfiprintf_r+0x34>
 80076d4:	2140      	movs	r1, #64	; 0x40
 80076d6:	f7ff ff3d 	bl	8007554 <_malloc_r>
 80076da:	6020      	str	r0, [r4, #0]
 80076dc:	6120      	str	r0, [r4, #16]
 80076de:	b928      	cbnz	r0, 80076ec <_svfiprintf_r+0x30>
 80076e0:	230c      	movs	r3, #12
 80076e2:	f8c8 3000 	str.w	r3, [r8]
 80076e6:	f04f 30ff 	mov.w	r0, #4294967295
 80076ea:	e0c8      	b.n	800787e <_svfiprintf_r+0x1c2>
 80076ec:	2340      	movs	r3, #64	; 0x40
 80076ee:	6163      	str	r3, [r4, #20]
 80076f0:	2300      	movs	r3, #0
 80076f2:	9309      	str	r3, [sp, #36]	; 0x24
 80076f4:	2320      	movs	r3, #32
 80076f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076fa:	2330      	movs	r3, #48	; 0x30
 80076fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007700:	9503      	str	r5, [sp, #12]
 8007702:	f04f 0b01 	mov.w	fp, #1
 8007706:	4637      	mov	r7, r6
 8007708:	463d      	mov	r5, r7
 800770a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800770e:	b10b      	cbz	r3, 8007714 <_svfiprintf_r+0x58>
 8007710:	2b25      	cmp	r3, #37	; 0x25
 8007712:	d13e      	bne.n	8007792 <_svfiprintf_r+0xd6>
 8007714:	ebb7 0a06 	subs.w	sl, r7, r6
 8007718:	d00b      	beq.n	8007732 <_svfiprintf_r+0x76>
 800771a:	4653      	mov	r3, sl
 800771c:	4632      	mov	r2, r6
 800771e:	4621      	mov	r1, r4
 8007720:	4640      	mov	r0, r8
 8007722:	f7ff ff71 	bl	8007608 <__ssputs_r>
 8007726:	3001      	adds	r0, #1
 8007728:	f000 80a4 	beq.w	8007874 <_svfiprintf_r+0x1b8>
 800772c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800772e:	4453      	add	r3, sl
 8007730:	9309      	str	r3, [sp, #36]	; 0x24
 8007732:	783b      	ldrb	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 809d 	beq.w	8007874 <_svfiprintf_r+0x1b8>
 800773a:	2300      	movs	r3, #0
 800773c:	f04f 32ff 	mov.w	r2, #4294967295
 8007740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007744:	9304      	str	r3, [sp, #16]
 8007746:	9307      	str	r3, [sp, #28]
 8007748:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800774c:	931a      	str	r3, [sp, #104]	; 0x68
 800774e:	462f      	mov	r7, r5
 8007750:	2205      	movs	r2, #5
 8007752:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007756:	4850      	ldr	r0, [pc, #320]	; (8007898 <_svfiprintf_r+0x1dc>)
 8007758:	f7f8 fd42 	bl	80001e0 <memchr>
 800775c:	9b04      	ldr	r3, [sp, #16]
 800775e:	b9d0      	cbnz	r0, 8007796 <_svfiprintf_r+0xda>
 8007760:	06d9      	lsls	r1, r3, #27
 8007762:	bf44      	itt	mi
 8007764:	2220      	movmi	r2, #32
 8007766:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800776a:	071a      	lsls	r2, r3, #28
 800776c:	bf44      	itt	mi
 800776e:	222b      	movmi	r2, #43	; 0x2b
 8007770:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007774:	782a      	ldrb	r2, [r5, #0]
 8007776:	2a2a      	cmp	r2, #42	; 0x2a
 8007778:	d015      	beq.n	80077a6 <_svfiprintf_r+0xea>
 800777a:	9a07      	ldr	r2, [sp, #28]
 800777c:	462f      	mov	r7, r5
 800777e:	2000      	movs	r0, #0
 8007780:	250a      	movs	r5, #10
 8007782:	4639      	mov	r1, r7
 8007784:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007788:	3b30      	subs	r3, #48	; 0x30
 800778a:	2b09      	cmp	r3, #9
 800778c:	d94d      	bls.n	800782a <_svfiprintf_r+0x16e>
 800778e:	b1b8      	cbz	r0, 80077c0 <_svfiprintf_r+0x104>
 8007790:	e00f      	b.n	80077b2 <_svfiprintf_r+0xf6>
 8007792:	462f      	mov	r7, r5
 8007794:	e7b8      	b.n	8007708 <_svfiprintf_r+0x4c>
 8007796:	4a40      	ldr	r2, [pc, #256]	; (8007898 <_svfiprintf_r+0x1dc>)
 8007798:	1a80      	subs	r0, r0, r2
 800779a:	fa0b f000 	lsl.w	r0, fp, r0
 800779e:	4318      	orrs	r0, r3
 80077a0:	9004      	str	r0, [sp, #16]
 80077a2:	463d      	mov	r5, r7
 80077a4:	e7d3      	b.n	800774e <_svfiprintf_r+0x92>
 80077a6:	9a03      	ldr	r2, [sp, #12]
 80077a8:	1d11      	adds	r1, r2, #4
 80077aa:	6812      	ldr	r2, [r2, #0]
 80077ac:	9103      	str	r1, [sp, #12]
 80077ae:	2a00      	cmp	r2, #0
 80077b0:	db01      	blt.n	80077b6 <_svfiprintf_r+0xfa>
 80077b2:	9207      	str	r2, [sp, #28]
 80077b4:	e004      	b.n	80077c0 <_svfiprintf_r+0x104>
 80077b6:	4252      	negs	r2, r2
 80077b8:	f043 0302 	orr.w	r3, r3, #2
 80077bc:	9207      	str	r2, [sp, #28]
 80077be:	9304      	str	r3, [sp, #16]
 80077c0:	783b      	ldrb	r3, [r7, #0]
 80077c2:	2b2e      	cmp	r3, #46	; 0x2e
 80077c4:	d10c      	bne.n	80077e0 <_svfiprintf_r+0x124>
 80077c6:	787b      	ldrb	r3, [r7, #1]
 80077c8:	2b2a      	cmp	r3, #42	; 0x2a
 80077ca:	d133      	bne.n	8007834 <_svfiprintf_r+0x178>
 80077cc:	9b03      	ldr	r3, [sp, #12]
 80077ce:	1d1a      	adds	r2, r3, #4
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	9203      	str	r2, [sp, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	bfb8      	it	lt
 80077d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80077dc:	3702      	adds	r7, #2
 80077de:	9305      	str	r3, [sp, #20]
 80077e0:	4d2e      	ldr	r5, [pc, #184]	; (800789c <_svfiprintf_r+0x1e0>)
 80077e2:	7839      	ldrb	r1, [r7, #0]
 80077e4:	2203      	movs	r2, #3
 80077e6:	4628      	mov	r0, r5
 80077e8:	f7f8 fcfa 	bl	80001e0 <memchr>
 80077ec:	b138      	cbz	r0, 80077fe <_svfiprintf_r+0x142>
 80077ee:	2340      	movs	r3, #64	; 0x40
 80077f0:	1b40      	subs	r0, r0, r5
 80077f2:	fa03 f000 	lsl.w	r0, r3, r0
 80077f6:	9b04      	ldr	r3, [sp, #16]
 80077f8:	4303      	orrs	r3, r0
 80077fa:	3701      	adds	r7, #1
 80077fc:	9304      	str	r3, [sp, #16]
 80077fe:	7839      	ldrb	r1, [r7, #0]
 8007800:	4827      	ldr	r0, [pc, #156]	; (80078a0 <_svfiprintf_r+0x1e4>)
 8007802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007806:	2206      	movs	r2, #6
 8007808:	1c7e      	adds	r6, r7, #1
 800780a:	f7f8 fce9 	bl	80001e0 <memchr>
 800780e:	2800      	cmp	r0, #0
 8007810:	d038      	beq.n	8007884 <_svfiprintf_r+0x1c8>
 8007812:	4b24      	ldr	r3, [pc, #144]	; (80078a4 <_svfiprintf_r+0x1e8>)
 8007814:	bb13      	cbnz	r3, 800785c <_svfiprintf_r+0x1a0>
 8007816:	9b03      	ldr	r3, [sp, #12]
 8007818:	3307      	adds	r3, #7
 800781a:	f023 0307 	bic.w	r3, r3, #7
 800781e:	3308      	adds	r3, #8
 8007820:	9303      	str	r3, [sp, #12]
 8007822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007824:	444b      	add	r3, r9
 8007826:	9309      	str	r3, [sp, #36]	; 0x24
 8007828:	e76d      	b.n	8007706 <_svfiprintf_r+0x4a>
 800782a:	fb05 3202 	mla	r2, r5, r2, r3
 800782e:	2001      	movs	r0, #1
 8007830:	460f      	mov	r7, r1
 8007832:	e7a6      	b.n	8007782 <_svfiprintf_r+0xc6>
 8007834:	2300      	movs	r3, #0
 8007836:	3701      	adds	r7, #1
 8007838:	9305      	str	r3, [sp, #20]
 800783a:	4619      	mov	r1, r3
 800783c:	250a      	movs	r5, #10
 800783e:	4638      	mov	r0, r7
 8007840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007844:	3a30      	subs	r2, #48	; 0x30
 8007846:	2a09      	cmp	r2, #9
 8007848:	d903      	bls.n	8007852 <_svfiprintf_r+0x196>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d0c8      	beq.n	80077e0 <_svfiprintf_r+0x124>
 800784e:	9105      	str	r1, [sp, #20]
 8007850:	e7c6      	b.n	80077e0 <_svfiprintf_r+0x124>
 8007852:	fb05 2101 	mla	r1, r5, r1, r2
 8007856:	2301      	movs	r3, #1
 8007858:	4607      	mov	r7, r0
 800785a:	e7f0      	b.n	800783e <_svfiprintf_r+0x182>
 800785c:	ab03      	add	r3, sp, #12
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	4622      	mov	r2, r4
 8007862:	4b11      	ldr	r3, [pc, #68]	; (80078a8 <_svfiprintf_r+0x1ec>)
 8007864:	a904      	add	r1, sp, #16
 8007866:	4640      	mov	r0, r8
 8007868:	f7fc fbf4 	bl	8004054 <_printf_float>
 800786c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007870:	4681      	mov	r9, r0
 8007872:	d1d6      	bne.n	8007822 <_svfiprintf_r+0x166>
 8007874:	89a3      	ldrh	r3, [r4, #12]
 8007876:	065b      	lsls	r3, r3, #25
 8007878:	f53f af35 	bmi.w	80076e6 <_svfiprintf_r+0x2a>
 800787c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800787e:	b01d      	add	sp, #116	; 0x74
 8007880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007884:	ab03      	add	r3, sp, #12
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	4622      	mov	r2, r4
 800788a:	4b07      	ldr	r3, [pc, #28]	; (80078a8 <_svfiprintf_r+0x1ec>)
 800788c:	a904      	add	r1, sp, #16
 800788e:	4640      	mov	r0, r8
 8007890:	f7fc fe96 	bl	80045c0 <_printf_i>
 8007894:	e7ea      	b.n	800786c <_svfiprintf_r+0x1b0>
 8007896:	bf00      	nop
 8007898:	08007bb4 	.word	0x08007bb4
 800789c:	08007bba 	.word	0x08007bba
 80078a0:	08007bbe 	.word	0x08007bbe
 80078a4:	08004055 	.word	0x08004055
 80078a8:	08007609 	.word	0x08007609

080078ac <_sbrk_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4c06      	ldr	r4, [pc, #24]	; (80078c8 <_sbrk_r+0x1c>)
 80078b0:	2300      	movs	r3, #0
 80078b2:	4605      	mov	r5, r0
 80078b4:	4608      	mov	r0, r1
 80078b6:	6023      	str	r3, [r4, #0]
 80078b8:	f7f9 fd2c 	bl	8001314 <_sbrk>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_sbrk_r+0x1a>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_sbrk_r+0x1a>
 80078c4:	602b      	str	r3, [r5, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	20000374 	.word	0x20000374

080078cc <strncmp>:
 80078cc:	b510      	push	{r4, lr}
 80078ce:	b16a      	cbz	r2, 80078ec <strncmp+0x20>
 80078d0:	3901      	subs	r1, #1
 80078d2:	1884      	adds	r4, r0, r2
 80078d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80078d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80078dc:	4293      	cmp	r3, r2
 80078de:	d103      	bne.n	80078e8 <strncmp+0x1c>
 80078e0:	42a0      	cmp	r0, r4
 80078e2:	d001      	beq.n	80078e8 <strncmp+0x1c>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1f5      	bne.n	80078d4 <strncmp+0x8>
 80078e8:	1a98      	subs	r0, r3, r2
 80078ea:	bd10      	pop	{r4, pc}
 80078ec:	4610      	mov	r0, r2
 80078ee:	e7fc      	b.n	80078ea <strncmp+0x1e>

080078f0 <__ascii_wctomb>:
 80078f0:	b149      	cbz	r1, 8007906 <__ascii_wctomb+0x16>
 80078f2:	2aff      	cmp	r2, #255	; 0xff
 80078f4:	bf85      	ittet	hi
 80078f6:	238a      	movhi	r3, #138	; 0x8a
 80078f8:	6003      	strhi	r3, [r0, #0]
 80078fa:	700a      	strbls	r2, [r1, #0]
 80078fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007900:	bf98      	it	ls
 8007902:	2001      	movls	r0, #1
 8007904:	4770      	bx	lr
 8007906:	4608      	mov	r0, r1
 8007908:	4770      	bx	lr

0800790a <memmove>:
 800790a:	4288      	cmp	r0, r1
 800790c:	b510      	push	{r4, lr}
 800790e:	eb01 0302 	add.w	r3, r1, r2
 8007912:	d807      	bhi.n	8007924 <memmove+0x1a>
 8007914:	1e42      	subs	r2, r0, #1
 8007916:	4299      	cmp	r1, r3
 8007918:	d00a      	beq.n	8007930 <memmove+0x26>
 800791a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800791e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007922:	e7f8      	b.n	8007916 <memmove+0xc>
 8007924:	4283      	cmp	r3, r0
 8007926:	d9f5      	bls.n	8007914 <memmove+0xa>
 8007928:	1881      	adds	r1, r0, r2
 800792a:	1ad2      	subs	r2, r2, r3
 800792c:	42d3      	cmn	r3, r2
 800792e:	d100      	bne.n	8007932 <memmove+0x28>
 8007930:	bd10      	pop	{r4, pc}
 8007932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007936:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800793a:	e7f7      	b.n	800792c <memmove+0x22>

0800793c <__malloc_lock>:
 800793c:	4770      	bx	lr

0800793e <__malloc_unlock>:
 800793e:	4770      	bx	lr

08007940 <_realloc_r>:
 8007940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007942:	4607      	mov	r7, r0
 8007944:	4614      	mov	r4, r2
 8007946:	460e      	mov	r6, r1
 8007948:	b921      	cbnz	r1, 8007954 <_realloc_r+0x14>
 800794a:	4611      	mov	r1, r2
 800794c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007950:	f7ff be00 	b.w	8007554 <_malloc_r>
 8007954:	b922      	cbnz	r2, 8007960 <_realloc_r+0x20>
 8007956:	f7ff fdaf 	bl	80074b8 <_free_r>
 800795a:	4625      	mov	r5, r4
 800795c:	4628      	mov	r0, r5
 800795e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007960:	f000 f814 	bl	800798c <_malloc_usable_size_r>
 8007964:	42a0      	cmp	r0, r4
 8007966:	d20f      	bcs.n	8007988 <_realloc_r+0x48>
 8007968:	4621      	mov	r1, r4
 800796a:	4638      	mov	r0, r7
 800796c:	f7ff fdf2 	bl	8007554 <_malloc_r>
 8007970:	4605      	mov	r5, r0
 8007972:	2800      	cmp	r0, #0
 8007974:	d0f2      	beq.n	800795c <_realloc_r+0x1c>
 8007976:	4631      	mov	r1, r6
 8007978:	4622      	mov	r2, r4
 800797a:	f7ff f985 	bl	8006c88 <memcpy>
 800797e:	4631      	mov	r1, r6
 8007980:	4638      	mov	r0, r7
 8007982:	f7ff fd99 	bl	80074b8 <_free_r>
 8007986:	e7e9      	b.n	800795c <_realloc_r+0x1c>
 8007988:	4635      	mov	r5, r6
 800798a:	e7e7      	b.n	800795c <_realloc_r+0x1c>

0800798c <_malloc_usable_size_r>:
 800798c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007990:	1f18      	subs	r0, r3, #4
 8007992:	2b00      	cmp	r3, #0
 8007994:	bfbc      	itt	lt
 8007996:	580b      	ldrlt	r3, [r1, r0]
 8007998:	18c0      	addlt	r0, r0, r3
 800799a:	4770      	bx	lr

0800799c <_init>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	bf00      	nop
 80079a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a2:	bc08      	pop	{r3}
 80079a4:	469e      	mov	lr, r3
 80079a6:	4770      	bx	lr

080079a8 <_fini>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	bf00      	nop
 80079ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ae:	bc08      	pop	{r3}
 80079b0:	469e      	mov	lr, r3
 80079b2:	4770      	bx	lr
