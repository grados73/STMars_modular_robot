
STMars_modular_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08007fc0  08007fc0  00017fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008400  08008400  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008400  08008400  00018400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008408  08008408  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008408  08008408  00018408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800840c  0800840c  0001840c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08008410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  200001fc  0800860c  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  0800860c  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e083  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000230a  00000000  00000000  0002e2af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab8  00000000  00000000  000305c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000990  00000000  00000000  00031078  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020df1  00000000  00000000  00031a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d1f3  00000000  00000000  000527f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c14f2  00000000  00000000  0005f9ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120ede  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003704  00000000  00000000  00120f5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007fa4 	.word	0x08007fa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	08007fa4 	.word	0x08007fa4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_DMA_Init+0x2c>)
 8000fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fb2:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <MX_DMA_Init+0x2c>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6493      	str	r3, [r2, #72]	; 0x48
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_DMA_Init+0x2c>)
 8000fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_GPIO_Init+0x8c>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <MX_GPIO_Init+0x8c>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_GPIO_Init+0x8c>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_GPIO_Init+0x8c>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a16      	ldr	r2, [pc, #88]	; (8001064 <MX_GPIO_Init+0x8c>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_GPIO_Init+0x8c>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_GPIO_Init+0x8c>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <MX_GPIO_Init+0x8c>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_GPIO_Init+0x8c>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2108      	movs	r1, #8
 800103a:	480b      	ldr	r0, [pc, #44]	; (8001068 <MX_GPIO_Init+0x90>)
 800103c:	f001 fb08 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001040:	2308      	movs	r3, #8
 8001042:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	4619      	mov	r1, r3
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_GPIO_Init+0x90>)
 8001058:	f001 f990 	bl	800237c <HAL_GPIO_Init>

}
 800105c:	bf00      	nop
 800105e:	3720      	adds	r7, #32
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40021000 	.word	0x40021000
 8001068:	48000400 	.word	0x48000400

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001070:	f000 fe31 	bl	8001cd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001074:	f000 f81a 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001078:	f7ff ffae 	bl	8000fd8 <MX_GPIO_Init>
  MX_DMA_Init();
 800107c:	f7ff ff94 	bl	8000fa8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001080:	f000 fcf0 	bl	8001a64 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001084:	f000 fcbe 	bl	8001a04 <MX_USART1_UART_Init>

  /* Initialize interrupts */
 // MX_NVIC_Init();
  /* USER CODE BEGIN 2 */
  UARTDMA_Init(&huartdma1, &huart1);
 8001088:	4906      	ldr	r1, [pc, #24]	; (80010a4 <main+0x38>)
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <main+0x3c>)
 800108c:	f000 fc6b 	bl	8001966 <UARTDMA_Init>
  while (1)
  {
	  //
	  	  // RECEIVE
	  	  //
	  	  if(UARTDMA_IsDataReceivedReady(&huartdma1))
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <main+0x3c>)
 8001092:	f000 fc5d 	bl	8001950 <UARTDMA_IsDataReceivedReady>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f9      	beq.n	8001090 <main+0x24>
	  	  {
	  		  UART_ParseLine(&huartdma1); // Parsing function
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <main+0x3c>)
 800109e:	f000 f9e9 	bl	8001474 <UART_ParseLine>
	  	  if(UARTDMA_IsDataReceivedReady(&huartdma1))
 80010a2:	e7f5      	b.n	8001090 <main+0x24>
 80010a4:	20000440 	.word	0x20000440
 80010a8:	20000264 	.word	0x20000264

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0ac      	sub	sp, #176	; 0xb0
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010b6:	2244      	movs	r2, #68	; 0x44
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 f9b0 	bl	8004420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2254      	movs	r2, #84	; 0x54
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 f9a2 	bl	8004420 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010dc:	f001 fad0 	bl	8002680 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010e0:	4b33      	ldr	r3, [pc, #204]	; (80011b0 <SystemClock_Config+0x104>)
 80010e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010e6:	4a32      	ldr	r2, [pc, #200]	; (80011b0 <SystemClock_Config+0x104>)
 80010e8:	f023 0318 	bic.w	r3, r3, #24
 80010ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010f0:	2314      	movs	r3, #20
 80010f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010f4:	2301      	movs	r3, #1
 80010f6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001104:	2360      	movs	r3, #96	; 0x60
 8001106:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001110:	2301      	movs	r3, #1
 8001112:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001116:	2301      	movs	r3, #1
 8001118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800111c:	2328      	movs	r3, #40	; 0x28
 800111e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001122:	2307      	movs	r3, #7
 8001124:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001128:	2302      	movs	r3, #2
 800112a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fb15 	bl	8002768 <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001144:	f000 f836 	bl	80011b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001148:	230f      	movs	r3, #15
 800114a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114c:	2303      	movs	r3, #3
 800114e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800115c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001160:	2104      	movs	r1, #4
 8001162:	4618      	mov	r0, r3
 8001164:	f001 ff20 	bl	8002fa8 <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800116e:	f000 f821 	bl	80011b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8001172:	2303      	movs	r3, #3
 8001174:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800117a:	2300      	movs	r3, #0
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4618      	mov	r0, r3
 8001182:	f002 f915 	bl	80033b0 <HAL_RCCEx_PeriphCLKConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800118c:	f000 f812 	bl	80011b4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001190:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001194:	f001 fa92 	bl	80026bc <HAL_PWREx_ControlVoltageScaling>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800119e:	f000 f809 	bl	80011b4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011a2:	f002 faf7 	bl	8003794 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011a6:	bf00      	nop
 80011a8:	37b0      	adds	r7, #176	; 0xb0
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ba:	e7fe      	b.n	80011ba <Error_Handler+0x6>

080011bc <UART_ParseLED>:
/*
 * 		LED=1\n 	// LED On
 * 		LED=0\n 	// LED Off
 */
void UART_ParseLED()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80011c2:	491e      	ldr	r1, [pc, #120]	; (800123c <UART_ParseLED+0x80>)
 80011c4:	2000      	movs	r0, #0
 80011c6:	f004 fdd3 	bl	8005d70 <strtok>
 80011ca:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d02f      	beq.n	8001234 <UART_ParseLED+0x78>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b2f      	cmp	r3, #47	; 0x2f
 80011da:	d903      	bls.n	80011e4 <UART_ParseLED+0x28>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b39      	cmp	r3, #57	; 0x39
 80011e2:	d904      	bls.n	80011ee <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma1, "LED wrong value. Don't use letters dude!\r\n"); // Print message
 80011e4:	4916      	ldr	r1, [pc, #88]	; (8001240 <UART_ParseLED+0x84>)
 80011e6:	4817      	ldr	r0, [pc, #92]	; (8001244 <UART_ParseLED+0x88>)
 80011e8:	f000 fb8d 	bl	8001906 <UARTDMA_Print>
			return;	// And exit parsing
 80011ec:	e022      	b.n	8001234 <UART_ParseLED+0x78>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f003 f8e8 	bl	80043c4 <atoi>
 80011f4:	4603      	mov	r3, r0
 80011f6:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d109      	bne.n	8001212 <UART_ParseLED+0x56>
		{
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80011fe:	2201      	movs	r2, #1
 8001200:	2108      	movs	r1, #8
 8001202:	4811      	ldr	r0, [pc, #68]	; (8001248 <UART_ParseLED+0x8c>)
 8001204:	f001 fa24 	bl	8002650 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma1, "LED On\r\n");
 8001208:	4910      	ldr	r1, [pc, #64]	; (800124c <UART_ParseLED+0x90>)
 800120a:	480e      	ldr	r0, [pc, #56]	; (8001244 <UART_ParseLED+0x88>)
 800120c:	f000 fb7b 	bl	8001906 <UARTDMA_Print>
 8001210:	e010      	b.n	8001234 <UART_ParseLED+0x78>
		}
		else if(LedState == 0) // LED OFF
 8001212:	78fb      	ldrb	r3, [r7, #3]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d109      	bne.n	800122c <UART_ParseLED+0x70>
		{
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2108      	movs	r1, #8
 800121c:	480a      	ldr	r0, [pc, #40]	; (8001248 <UART_ParseLED+0x8c>)
 800121e:	f001 fa17 	bl	8002650 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma1, "LED Off\r\n");
 8001222:	490b      	ldr	r1, [pc, #44]	; (8001250 <UART_ParseLED+0x94>)
 8001224:	4807      	ldr	r0, [pc, #28]	; (8001244 <UART_ParseLED+0x88>)
 8001226:	f000 fb6e 	bl	8001906 <UARTDMA_Print>
 800122a:	e003      	b.n	8001234 <UART_ParseLED+0x78>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma1, "LED wrong value. Use 0 or 1.\r\n");
 800122c:	4909      	ldr	r1, [pc, #36]	; (8001254 <UART_ParseLED+0x98>)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <UART_ParseLED+0x88>)
 8001230:	f000 fb69 	bl	8001906 <UARTDMA_Print>
		}
	}
}
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	08007fc0 	.word	0x08007fc0
 8001240:	08007fc4 	.word	0x08007fc4
 8001244:	20000264 	.word	0x20000264
 8001248:	48000400 	.word	0x48000400
 800124c:	08007ff0 	.word	0x08007ff0
 8001250:	08007ffc 	.word	0x08007ffc
 8001254:	08008008 	.word	0x08008008

08001258 <UART_ParseENV>:

/*
 * ENV=X,Y,Z\0 // X - temperature, Y - humidity, Z - pressure
 */
void UART_ParseENV()
{
 8001258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125a:	b087      	sub	sp, #28
 800125c:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators
	float EnvParameters[3]; // Temperature, humidity, pressure

	for(i = 0; i<3; i++) // 3 parameters are expected
 800125e:	2300      	movs	r3, #0
 8001260:	75fb      	strb	r3, [r7, #23]
 8001262:	e078      	b.n	8001356 <UART_ParseENV+0xfe>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8001264:	4957      	ldr	r1, [pc, #348]	; (80013c4 <UART_ParseENV+0x16c>)
 8001266:	2000      	movs	r0, #0
 8001268:	f004 fd82 	bl	8005d70 <strtok>
 800126c:	6138      	str	r0, [r7, #16]

		if(strlen(ParsePointer) > 0) // If string exists
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d04f      	beq.n	8001316 <UART_ParseENV+0xbe>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8001276:	2300      	movs	r3, #0
 8001278:	75bb      	strb	r3, [r7, #22]
 800127a:	e045      	b.n	8001308 <UART_ParseENV+0xb0>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 800127c:	7dbb      	ldrb	r3, [r7, #22]
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b2f      	cmp	r3, #47	; 0x2f
 8001286:	d905      	bls.n	8001294 <UART_ParseENV+0x3c>
 8001288:	7dbb      	ldrb	r3, [r7, #22]
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b39      	cmp	r3, #57	; 0x39
 8001292:	d925      	bls.n	80012e0 <UART_ParseENV+0x88>
 8001294:	7dbb      	ldrb	r3, [r7, #22]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4413      	add	r3, r2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b2e      	cmp	r3, #46	; 0x2e
 800129e:	d01f      	beq.n	80012e0 <UART_ParseENV+0x88>
				{
					sprintf(Message, "ENV wrong value. Don't use letters dude!\r\n"); // If not, Error message
 80012a0:	4b49      	ldr	r3, [pc, #292]	; (80013c8 <UART_ParseENV+0x170>)
 80012a2:	4a4a      	ldr	r2, [pc, #296]	; (80013cc <UART_ParseENV+0x174>)
 80012a4:	4614      	mov	r4, r2
 80012a6:	469c      	mov	ip, r3
 80012a8:	f104 0e20 	add.w	lr, r4, #32
 80012ac:	4665      	mov	r5, ip
 80012ae:	4626      	mov	r6, r4
 80012b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012b2:	6028      	str	r0, [r5, #0]
 80012b4:	6069      	str	r1, [r5, #4]
 80012b6:	60aa      	str	r2, [r5, #8]
 80012b8:	60eb      	str	r3, [r5, #12]
 80012ba:	3410      	adds	r4, #16
 80012bc:	f10c 0c10 	add.w	ip, ip, #16
 80012c0:	4574      	cmp	r4, lr
 80012c2:	d1f3      	bne.n	80012ac <UART_ParseENV+0x54>
 80012c4:	4662      	mov	r2, ip
 80012c6:	4623      	mov	r3, r4
 80012c8:	cb03      	ldmia	r3!, {r0, r1}
 80012ca:	6010      	str	r0, [r2, #0]
 80012cc:	6051      	str	r1, [r2, #4]
 80012ce:	8819      	ldrh	r1, [r3, #0]
 80012d0:	789b      	ldrb	r3, [r3, #2]
 80012d2:	8111      	strh	r1, [r2, #8]
 80012d4:	7293      	strb	r3, [r2, #10]
					UARTDMA_Print(&huartdma1, Message); // Print message
 80012d6:	493c      	ldr	r1, [pc, #240]	; (80013c8 <UART_ParseENV+0x170>)
 80012d8:	483d      	ldr	r0, [pc, #244]	; (80013d0 <UART_ParseENV+0x178>)
 80012da:	f000 fb14 	bl	8001906 <UARTDMA_Print>
					return;	// And exit parsing
 80012de:	e06d      	b.n	80013bc <UART_ParseENV+0x164>
				}

				EnvParameters[i] = atof(ParsePointer); // If there are no chars, change string to integer
 80012e0:	6938      	ldr	r0, [r7, #16]
 80012e2:	f003 f86c 	bl	80043be <atof>
 80012e6:	ec53 2b10 	vmov	r2, r3, d0
 80012ea:	7dfc      	ldrb	r4, [r7, #23]
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff fc8a 	bl	8000c08 <__aeabi_d2f>
 80012f4:	4602      	mov	r2, r0
 80012f6:	00a3      	lsls	r3, r4, #2
 80012f8:	f107 0118 	add.w	r1, r7, #24
 80012fc:	440b      	add	r3, r1
 80012fe:	3b14      	subs	r3, #20
 8001300:	601a      	str	r2, [r3, #0]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8001302:	7dbb      	ldrb	r3, [r7, #22]
 8001304:	3301      	adds	r3, #1
 8001306:	75bb      	strb	r3, [r7, #22]
 8001308:	7dbb      	ldrb	r3, [r7, #22]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1b3      	bne.n	800127c <UART_ParseENV+0x24>
 8001314:	e01c      	b.n	8001350 <UART_ParseENV+0xf8>
			}
		}
		else
		{
			sprintf(Message, "ENV too less values. ENV=X,Y,Z\\n\r\n"); // If not, Error message
 8001316:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <UART_ParseENV+0x170>)
 8001318:	4a2e      	ldr	r2, [pc, #184]	; (80013d4 <UART_ParseENV+0x17c>)
 800131a:	4614      	mov	r4, r2
 800131c:	469c      	mov	ip, r3
 800131e:	f104 0e20 	add.w	lr, r4, #32
 8001322:	4665      	mov	r5, ip
 8001324:	4626      	mov	r6, r4
 8001326:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001328:	6028      	str	r0, [r5, #0]
 800132a:	6069      	str	r1, [r5, #4]
 800132c:	60aa      	str	r2, [r5, #8]
 800132e:	60eb      	str	r3, [r5, #12]
 8001330:	3410      	adds	r4, #16
 8001332:	f10c 0c10 	add.w	ip, ip, #16
 8001336:	4574      	cmp	r4, lr
 8001338:	d1f3      	bne.n	8001322 <UART_ParseENV+0xca>
 800133a:	4663      	mov	r3, ip
 800133c:	4622      	mov	r2, r4
 800133e:	8811      	ldrh	r1, [r2, #0]
 8001340:	7892      	ldrb	r2, [r2, #2]
 8001342:	8019      	strh	r1, [r3, #0]
 8001344:	709a      	strb	r2, [r3, #2]
			UARTDMA_Print(&huartdma1, Message); // Print message
 8001346:	4920      	ldr	r1, [pc, #128]	; (80013c8 <UART_ParseENV+0x170>)
 8001348:	4821      	ldr	r0, [pc, #132]	; (80013d0 <UART_ParseENV+0x178>)
 800134a:	f000 fadc 	bl	8001906 <UARTDMA_Print>
			return;	// And exit parsing
 800134e:	e035      	b.n	80013bc <UART_ParseENV+0x164>
	for(i = 0; i<3; i++) // 3 parameters are expected
 8001350:	7dfb      	ldrb	r3, [r7, #23]
 8001352:	3301      	adds	r3, #1
 8001354:	75fb      	strb	r3, [r7, #23]
 8001356:	7dfb      	ldrb	r3, [r7, #23]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d983      	bls.n	8001264 <UART_ParseENV+0xc>
		}
	}

	// Print back received data
	sprintf(Message, "Temperature: %f\r\n", EnvParameters[0]);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f902 	bl	8000568 <__aeabi_f2d>
 8001364:	4603      	mov	r3, r0
 8001366:	460c      	mov	r4, r1
 8001368:	461a      	mov	r2, r3
 800136a:	4623      	mov	r3, r4
 800136c:	491a      	ldr	r1, [pc, #104]	; (80013d8 <UART_ParseENV+0x180>)
 800136e:	4816      	ldr	r0, [pc, #88]	; (80013c8 <UART_ParseENV+0x170>)
 8001370:	f003 fea2 	bl	80050b8 <siprintf>
	UARTDMA_Print(&huartdma1, Message);
 8001374:	4914      	ldr	r1, [pc, #80]	; (80013c8 <UART_ParseENV+0x170>)
 8001376:	4816      	ldr	r0, [pc, #88]	; (80013d0 <UART_ParseENV+0x178>)
 8001378:	f000 fac5 	bl	8001906 <UARTDMA_Print>

	sprintf(Message, "Humidity: %f\r\n", EnvParameters[1]);
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f8f2 	bl	8000568 <__aeabi_f2d>
 8001384:	4603      	mov	r3, r0
 8001386:	460c      	mov	r4, r1
 8001388:	461a      	mov	r2, r3
 800138a:	4623      	mov	r3, r4
 800138c:	4913      	ldr	r1, [pc, #76]	; (80013dc <UART_ParseENV+0x184>)
 800138e:	480e      	ldr	r0, [pc, #56]	; (80013c8 <UART_ParseENV+0x170>)
 8001390:	f003 fe92 	bl	80050b8 <siprintf>
	UARTDMA_Print(&huartdma1, Message);
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <UART_ParseENV+0x170>)
 8001396:	480e      	ldr	r0, [pc, #56]	; (80013d0 <UART_ParseENV+0x178>)
 8001398:	f000 fab5 	bl	8001906 <UARTDMA_Print>

	sprintf(Message, "Pressure: %f\r\n", EnvParameters[2]);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f8e2 	bl	8000568 <__aeabi_f2d>
 80013a4:	4603      	mov	r3, r0
 80013a6:	460c      	mov	r4, r1
 80013a8:	461a      	mov	r2, r3
 80013aa:	4623      	mov	r3, r4
 80013ac:	490c      	ldr	r1, [pc, #48]	; (80013e0 <UART_ParseENV+0x188>)
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <UART_ParseENV+0x170>)
 80013b0:	f003 fe82 	bl	80050b8 <siprintf>
	UARTDMA_Print(&huartdma1, Message);
 80013b4:	4904      	ldr	r1, [pc, #16]	; (80013c8 <UART_ParseENV+0x170>)
 80013b6:	4806      	ldr	r0, [pc, #24]	; (80013d0 <UART_ParseENV+0x178>)
 80013b8:	f000 faa5 	bl	8001906 <UARTDMA_Print>
}
 80013bc:	371c      	adds	r7, #28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c2:	bf00      	nop
 80013c4:	08007fc0 	.word	0x08007fc0
 80013c8:	20000370 	.word	0x20000370
 80013cc:	08008028 	.word	0x08008028
 80013d0:	20000264 	.word	0x20000264
 80013d4:	08008054 	.word	0x08008054
 80013d8:	08008078 	.word	0x08008078
 80013dc:	0800808c 	.word	0x0800808c
 80013e0:	0800809c 	.word	0x0800809c

080013e4 <UART_ParseNAME>:
/*
 * 		NAME=X\n	// Change name for X
 * 		NAME=?\n	// introduce yourself
 */
void UART_ParseNAME()
{
 80013e4:	b5b0      	push	{r4, r5, r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
	char* ParsePointer = strtok(NULL, ","); // Get next string till token ',' or \0
 80013ea:	491a      	ldr	r1, [pc, #104]	; (8001454 <UART_ParseNAME+0x70>)
 80013ec:	2000      	movs	r0, #0
 80013ee:	f004 fcbf 	bl	8005d70 <strtok>
 80013f2:	6078      	str	r0, [r7, #4]

	if(strlen(ParsePointer) > 0) // If string exists
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d016      	beq.n	800142a <UART_ParseNAME+0x46>
	{
		if(strcmp(ParsePointer, "?") == 0) // If '?' is behind '='
 80013fc:	4916      	ldr	r1, [pc, #88]	; (8001458 <UART_ParseNAME+0x74>)
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7fe fee6 	bl	80001d0 <strcmp>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d105      	bne.n	8001416 <UART_ParseNAME+0x32>
		{
			sprintf(Message, "My name is %s\r\n", MyName); // Introduce yourself
 800140a:	4a14      	ldr	r2, [pc, #80]	; (800145c <UART_ParseNAME+0x78>)
 800140c:	4914      	ldr	r1, [pc, #80]	; (8001460 <UART_ParseNAME+0x7c>)
 800140e:	4815      	ldr	r0, [pc, #84]	; (8001464 <UART_ParseNAME+0x80>)
 8001410:	f003 fe52 	bl	80050b8 <siprintf>
 8001414:	e015      	b.n	8001442 <UART_ParseNAME+0x5e>
		}
		else
		{
			strcpy(MyName, ParsePointer); // Change name for string passed in received message
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4810      	ldr	r0, [pc, #64]	; (800145c <UART_ParseNAME+0x78>)
 800141a:	f003 fe6d 	bl	80050f8 <strcpy>
			sprintf(Message, "Name changed to %s\r\n", MyName);
 800141e:	4a0f      	ldr	r2, [pc, #60]	; (800145c <UART_ParseNAME+0x78>)
 8001420:	4911      	ldr	r1, [pc, #68]	; (8001468 <UART_ParseNAME+0x84>)
 8001422:	4810      	ldr	r0, [pc, #64]	; (8001464 <UART_ParseNAME+0x80>)
 8001424:	f003 fe48 	bl	80050b8 <siprintf>
 8001428:	e00b      	b.n	8001442 <UART_ParseNAME+0x5e>
		}
	}
	else
	{
		// Error
		sprintf(Message, "Name cannot be empty!\r\n");
 800142a:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <UART_ParseNAME+0x80>)
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <UART_ParseNAME+0x88>)
 800142e:	4615      	mov	r5, r2
 8001430:	461c      	mov	r4, r3
 8001432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001434:	6028      	str	r0, [r5, #0]
 8001436:	6069      	str	r1, [r5, #4]
 8001438:	60aa      	str	r2, [r5, #8]
 800143a:	60eb      	str	r3, [r5, #12]
 800143c:	cc03      	ldmia	r4!, {r0, r1}
 800143e:	6128      	str	r0, [r5, #16]
 8001440:	6169      	str	r1, [r5, #20]
	}

	// Send back a message
	UARTDMA_Print(&huartdma1, Message);
 8001442:	4908      	ldr	r1, [pc, #32]	; (8001464 <UART_ParseNAME+0x80>)
 8001444:	480a      	ldr	r0, [pc, #40]	; (8001470 <UART_ParseNAME+0x8c>)
 8001446:	f000 fa5e 	bl	8001906 <UARTDMA_Print>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bdb0      	pop	{r4, r5, r7, pc}
 8001452:	bf00      	nop
 8001454:	08007fc0 	.word	0x08007fc0
 8001458:	080080ac 	.word	0x080080ac
 800145c:	20000000 	.word	0x20000000
 8001460:	080080b0 	.word	0x080080b0
 8001464:	20000370 	.word	0x20000370
 8001468:	080080c0 	.word	0x080080c0
 800146c:	080080d8 	.word	0x080080d8
 8001470:	20000264 	.word	0x20000264

08001474 <UART_ParseLine>:
 * 		ENV=X,Y,Z\n // X - temperature, Y - humidity, Z - pressure
 * 		NAME=X\n	// Change name for X
 * 		NAME=?\n	// introduce yourself
 */
void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b094      	sub	sp, #80	; 0x50
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	char BufferReceive[64];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 fa0e 	bl	80018a4 <UARTDMA_GetLineFromReceiveBuffer>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d123      	bne.n	80014d6 <UART_ParseLine+0x62>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	4913      	ldr	r1, [pc, #76]	; (80014e0 <UART_ParseLine+0x6c>)
 8001494:	4618      	mov	r0, r3
 8001496:	f004 fc6b 	bl	8005d70 <strtok>
 800149a:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 800149c:	4911      	ldr	r1, [pc, #68]	; (80014e4 <UART_ParseLine+0x70>)
 800149e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80014a0:	f7fe fe96 	bl	80001d0 <strcmp>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 80014aa:	f7ff fe87 	bl	80011bc <UART_ParseLED>
	  {
		  UART_ParseNAME();
	  }

	}
}
 80014ae:	e012      	b.n	80014d6 <UART_ParseLine+0x62>
	  else if(strcmp(ParsePointer, "ENV") == 0)
 80014b0:	490d      	ldr	r1, [pc, #52]	; (80014e8 <UART_ParseLine+0x74>)
 80014b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80014b4:	f7fe fe8c 	bl	80001d0 <strcmp>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <UART_ParseLine+0x50>
		  UART_ParseENV();
 80014be:	f7ff fecb 	bl	8001258 <UART_ParseENV>
}
 80014c2:	e008      	b.n	80014d6 <UART_ParseLine+0x62>
	  else if(strcmp(ParsePointer, "NAME") == 0)
 80014c4:	4909      	ldr	r1, [pc, #36]	; (80014ec <UART_ParseLine+0x78>)
 80014c6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80014c8:	f7fe fe82 	bl	80001d0 <strcmp>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <UART_ParseLine+0x62>
		  UART_ParseNAME();
 80014d2:	f7ff ff87 	bl	80013e4 <UART_ParseNAME>
}
 80014d6:	bf00      	nop
 80014d8:	3750      	adds	r7, #80	; 0x50
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	080080f0 	.word	0x080080f0
 80014e4:	080080f4 	.word	0x080080f4
 80014e8:	080080f8 	.word	0x080080f8
 80014ec:	080080fc 	.word	0x080080fc

080014f0 <RB_Read>:
**/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	781a      	ldrb	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	785b      	ldrb	r3, [r3, #1]
 8001502:	429a      	cmp	r2, r3
 8001504:	d101      	bne.n	800150a <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8001506:	2301      	movs	r3, #1
 8001508:	e015      	b.n	8001536 <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	785b      	ldrb	r3, [r3, #1]
 800150e:	461a      	mov	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	789a      	ldrb	r2, [r3, #2]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	785b      	ldrb	r3, [r3, #1]
 800151e:	3301      	adds	r3, #1
 8001520:	425a      	negs	r2, r3
 8001522:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001526:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800152a:	bf58      	it	pl
 800152c:	4253      	negpl	r3, r2
 800152e:	b2da      	uxtb	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8001542:	b480      	push	{r7}
 8001544:	b085      	sub	sp, #20
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	460b      	mov	r3, r1
 800154c:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	425a      	negs	r2, r3
 8001556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800155a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800155e:	bf58      	it	pl
 8001560:	4253      	negpl	r3, r2
 8001562:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	785b      	ldrb	r3, [r3, #1]
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	429a      	cmp	r2, r3
 800156c:	d101      	bne.n	8001572 <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 800156e:	2301      	movs	r3, #1
 8001570:	e00a      	b.n	8001588 <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4413      	add	r3, r2
 800157c:	78fa      	ldrb	r2, [r7, #3]
 800157e:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_MspInit+0x44>)
 800159c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_MspInit+0x44>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6613      	str	r3, [r2, #96]	; 0x60
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_MspInit+0x44>)
 80015a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_MspInit+0x44>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_MspInit+0x44>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6593      	str	r3, [r2, #88]	; 0x58
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_MspInit+0x44>)
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <NMI_Handler+0x4>

080015e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MemManage_Handler+0x4>

080015ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001628:	f000 fbaa 	bl	8001d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <DMA1_Channel4_IRQHandler+0x10>)
 8001636:	f000 fdc1 	bl	80021bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200003b0 	.word	0x200003b0

08001644 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma1);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <DMA1_Channel5_IRQHandler+0x10>)
 800164a:	f000 f8a6 	bl	800179a <UARTDMA_DmaReceiveIrqHandler>
	return;
 800164e:	bf00      	nop
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000264 	.word	0x20000264

08001658 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma1); // WERSJA NA DMA!!!
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <USART1_IRQHandler+0x10>)
 800165e:	f000 f871 	bl	8001744 <UARTDMA_UartIrqHandler>
	return;
 8001662:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000264 	.word	0x20000264

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d207      	bcs.n	80016ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800169c:	f002 fe96 	bl	80043cc <__errno>
 80016a0:	4602      	mov	r2, r0
 80016a2:	230c      	movs	r3, #12
 80016a4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e009      	b.n	80016c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <_sbrk+0x64>)
 80016bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20010000 	.word	0x20010000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	20000218 	.word	0x20000218
 80016d4:	20000548 	.word	0x20000548

080016d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <SystemInit+0x64>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e2:	4a16      	ldr	r2, [pc, #88]	; (800173c <SystemInit+0x64>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <SystemInit+0x68>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a13      	ldr	r2, [pc, #76]	; (8001740 <SystemInit+0x68>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <SystemInit+0x68>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <SystemInit+0x68>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <SystemInit+0x68>)
 8001704:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001708:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800170c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <SystemInit+0x68>)
 8001710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001714:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <SystemInit+0x68>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a09      	ldr	r2, [pc, #36]	; (8001740 <SystemInit+0x68>)
 800171c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <SystemInit+0x68>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <SystemInit+0x64>)
 800172a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800172e:	609a      	str	r2, [r3, #8]
#endif
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00
 8001740:	40021000 	.word	0x40021000

08001744 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->ISR & UART_FLAG_IDLE)       // Check if Idle flag is set
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	2b00      	cmp	r3, #0
 800175a:	d018      	beq.n	800178e <UARTDMA_UartIrqHandler+0x4a>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->ICR &= USART_ICR_IDLECF;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	f003 0310 	and.w	r3, r3, #16
 800176e:	6213      	str	r3, [r2, #32]
 8001770:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0201 	bic.w	r2, r2, #1
 8001788:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	60fb      	str	r3, [r7, #12]
	}
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->DmaBaseAddress; // Take registers base address
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	613b      	str	r3, [r7, #16]

 	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, (DMA_IT_TC || DMA_IT_TE)) != RESET) // Check if interrupt source is Transfer Complete
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d057      	beq.n	800186e <UARTDMA_DmaReceiveIrqHandler+0xd4>
	{
		DmaRegisters->IFCR = DMA_FLAG_TC5 << huartdma->huart->hdmarx->ChannelIndex;	// Clear Transfer Complete flag
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017ca:	409a      	lsls	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	609a      	str	r2, [r3, #8]
		//DmaRegisters->IFCR = DMA_FLAG_TC4 << huartdma->huart->hdmarx->ChannelIndex;	// Clear Transfer Complete flag

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->CNDTR; // Get the Length of transfered data
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80017e0:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3304      	adds	r3, #4
 80017e6:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 80017e8:	2300      	movs	r3, #0
 80017ea:	82fb      	strh	r3, [r7, #22]
 80017ec:	e01a      	b.n	8001824 <UARTDMA_DmaReceiveIrqHandler+0x8a>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80017f4:	8afb      	ldrh	r3, [r7, #22]
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	4413      	add	r3, r2
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f7ff fea0 	bl	8001542 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 8001802:	8afb      	ldrh	r3, [r7, #22]
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b0a      	cmp	r3, #10
 800180c:	d107      	bne.n	800181e <UARTDMA_DmaReceiveIrqHandler+0x84>
			{
				huartdma->UartRxBufferLines++;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001814:	3301      	adds	r3, #1
 8001816:	b2da      	uxtb	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800181e:	8afb      	ldrh	r3, [r7, #22]
 8001820:	3301      	adds	r3, #1
 8001822:	82fb      	strh	r3, [r7, #22]
 8001824:	8afa      	ldrh	r2, [r7, #22]
 8001826:	89fb      	ldrh	r3, [r7, #14]
 8001828:	429a      	cmp	r2, r3
 800182a:	d3e0      	bcc.n	80017ee <UARTDMA_DmaReceiveIrqHandler+0x54>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->ChannelIndex; 		// Clear all interrupts
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001834:	223f      	movs	r2, #63	; 0x3f
 8001836:	409a      	lsls	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->CMAR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	1d1a      	adds	r2, r3, #4
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->CNDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2240      	movs	r2, #64	; 0x40
 8001854:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CCR |= DMA_CCR_EN;            	// Start DMA transfer
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0201 	orr.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]
	}
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	33c7      	adds	r3, #199	; 0xc7
 8001886:	78fa      	ldrb	r2, [r7, #3]
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fe59 	bl	8001542 <RB_Write>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <UARTDMA_PutCharToTxBuffer+0x24>
	{
		return 1; // Error code
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <UARTDMA_PutCharToTxBuffer+0x26>
	}
	return 0; // Success code
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d01f      	beq.n	80018fc <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 80018bc:	e013      	b.n	80018e6 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b0a      	cmp	r3, #10
 80018c4:	d10c      	bne.n	80018e0 <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
				return 0; // Exit if end line
 80018dc:	2300      	movs	r3, #0
 80018de:	e00e      	b.n	80018fe <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3301      	adds	r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3344      	adds	r3, #68	; 0x44
 80018ea:	68f9      	ldr	r1, [r7, #12]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fdff 	bl	80014f0 <RB_Read>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0e2      	beq.n	80018be <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 80018f8:	2300      	movs	r3, #0
 80018fa:	e000      	b.n	80018fe <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 80018fc:	2301      	movs	r3, #1
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b084      	sub	sp, #16
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8001914:	e012      	b.n	800193c <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	4619      	mov	r1, r3
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ffab 	bl	8001876 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	3301      	adds	r3, #1
 8001924:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 8001926:	7afb      	ldrb	r3, [r7, #11]
 8001928:	2b0a      	cmp	r3, #10
 800192a:	d107      	bne.n	800193c <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8001932:	3301      	adds	r3, #1
 8001934:	b2da      	uxtb	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	72fb      	strb	r3, [r7, #11]
 8001942:	7afb      	ldrb	r3, [r7, #11]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1e6      	bne.n	8001916 <UARTDMA_Print+0x10>
		}
	}
}
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	return 1;
 8001958:	2301      	movs	r3, #1
	if(huartdma->UartRxBufferLines)
		return 1; // At least one line is available
	else
		return 0; // No lines are available
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 0210 	orr.w	r2, r2, #16
 8001988:	601a      	str	r2, [r3, #0]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0202 	orr.w	r2, r2, #2
 80019a0:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 0202 	orr.w	r2, r2, #2
 80019b8:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2240      	movs	r2, #64	; 0x40
 80019c4:	4619      	mov	r1, r3
 80019c6:	f002 f833 	bl	8003a30 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0204 	bic.w	r2, r2, #4
 80019e0:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0204 	bic.w	r2, r2, #4
 80019f8:	601a      	str	r2, [r3, #0]
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a0a:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <MX_USART1_UART_Init+0x5c>)
 8001a0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a10:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001a14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a48:	f001 ffa4 	bl	8003994 <HAL_UART_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a52:	f7ff fbaf 	bl	80011b4 <Error_Handler>
  }

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000440 	.word	0x20000440
 8001a60:	40013800 	.word	0x40013800

08001a64 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_USART2_UART_Init+0x58>)
 8001a6a:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <MX_USART2_UART_Init+0x5c>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_USART2_UART_Init+0x58>)
 8001a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <MX_USART2_UART_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <MX_USART2_UART_Init+0x58>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MX_USART2_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <MX_USART2_UART_Init+0x58>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <MX_USART2_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <MX_USART2_UART_Init+0x58>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <MX_USART2_UART_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <MX_USART2_UART_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_USART2_UART_Init+0x58>)
 8001aa8:	f001 ff74 	bl	8003994 <HAL_UART_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ab2:	f7ff fb7f 	bl	80011b4 <Error_Handler>
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200004c0 	.word	0x200004c0
 8001ac0:	40004400 	.word	0x40004400

08001ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08c      	sub	sp, #48	; 0x30
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a61      	ldr	r2, [pc, #388]	; (8001c68 <HAL_UART_MspInit+0x1a4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d17c      	bne.n	8001be0 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ae6:	4b61      	ldr	r3, [pc, #388]	; (8001c6c <HAL_UART_MspInit+0x1a8>)
 8001ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aea:	4a60      	ldr	r2, [pc, #384]	; (8001c6c <HAL_UART_MspInit+0x1a8>)
 8001aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af0:	6613      	str	r3, [r2, #96]	; 0x60
 8001af2:	4b5e      	ldr	r3, [pc, #376]	; (8001c6c <HAL_UART_MspInit+0x1a8>)
 8001af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	4b5b      	ldr	r3, [pc, #364]	; (8001c6c <HAL_UART_MspInit+0x1a8>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b02:	4a5a      	ldr	r2, [pc, #360]	; (8001c6c <HAL_UART_MspInit+0x1a8>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0a:	4b58      	ldr	r3, [pc, #352]	; (8001c6c <HAL_UART_MspInit+0x1a8>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b28:	2307      	movs	r3, #7
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	4619      	mov	r1, r3
 8001b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b36:	f000 fc21 	bl	800237c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001b3a:	4b4d      	ldr	r3, [pc, #308]	; (8001c70 <HAL_UART_MspInit+0x1ac>)
 8001b3c:	4a4d      	ldr	r2, [pc, #308]	; (8001c74 <HAL_UART_MspInit+0x1b0>)
 8001b3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001b40:	4b4b      	ldr	r3, [pc, #300]	; (8001c70 <HAL_UART_MspInit+0x1ac>)
 8001b42:	2202      	movs	r2, #2
 8001b44:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b46:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <HAL_UART_MspInit+0x1ac>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b4c:	4b48      	ldr	r3, [pc, #288]	; (8001c70 <HAL_UART_MspInit+0x1ac>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b52:	4b47      	ldr	r3, [pc, #284]	; (8001c70 <HAL_UART_MspInit+0x1ac>)
 8001b54:	2280      	movs	r2, #128	; 0x80
 8001b56:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b58:	4b45      	ldr	r3, [pc, #276]	; (8001c70 <HAL_UART_MspInit+0x1ac>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b5e:	4b44      	ldr	r3, [pc, #272]	; (8001c70 <HAL_UART_MspInit+0x1ac>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b64:	4b42      	ldr	r3, [pc, #264]	; (8001c70 <HAL_UART_MspInit+0x1ac>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b6a:	4b41      	ldr	r3, [pc, #260]	; (8001c70 <HAL_UART_MspInit+0x1ac>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b70:	483f      	ldr	r0, [pc, #252]	; (8001c70 <HAL_UART_MspInit+0x1ac>)
 8001b72:	f000 fa0b 	bl	8001f8c <HAL_DMA_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8001b7c:	f7ff fb1a 	bl	80011b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a3b      	ldr	r2, [pc, #236]	; (8001c70 <HAL_UART_MspInit+0x1ac>)
 8001b84:	66da      	str	r2, [r3, #108]	; 0x6c
 8001b86:	4a3a      	ldr	r2, [pc, #232]	; (8001c70 <HAL_UART_MspInit+0x1ac>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001b8c:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <HAL_UART_MspInit+0x1b4>)
 8001b8e:	4a3b      	ldr	r2, [pc, #236]	; (8001c7c <HAL_UART_MspInit+0x1b8>)
 8001b90:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001b92:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <HAL_UART_MspInit+0x1b4>)
 8001b94:	2202      	movs	r2, #2
 8001b96:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b98:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <HAL_UART_MspInit+0x1b4>)
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b9e:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <HAL_UART_MspInit+0x1b4>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ba4:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <HAL_UART_MspInit+0x1b4>)
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001baa:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <HAL_UART_MspInit+0x1b4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb0:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <HAL_UART_MspInit+0x1b4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001bb6:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <HAL_UART_MspInit+0x1b4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bbc:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <HAL_UART_MspInit+0x1b4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001bc2:	482d      	ldr	r0, [pc, #180]	; (8001c78 <HAL_UART_MspInit+0x1b4>)
 8001bc4:	f000 f9e2 	bl	8001f8c <HAL_DMA_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001bce:	f7ff faf1 	bl	80011b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a28      	ldr	r2, [pc, #160]	; (8001c78 <HAL_UART_MspInit+0x1b4>)
 8001bd6:	669a      	str	r2, [r3, #104]	; 0x68
 8001bd8:	4a27      	ldr	r2, [pc, #156]	; (8001c78 <HAL_UART_MspInit+0x1b4>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bde:	e03f      	b.n	8001c60 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a26      	ldr	r2, [pc, #152]	; (8001c80 <HAL_UART_MspInit+0x1bc>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d13a      	bne.n	8001c60 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bea:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <HAL_UART_MspInit+0x1a8>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	4a1f      	ldr	r2, [pc, #124]	; (8001c6c <HAL_UART_MspInit+0x1a8>)
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <HAL_UART_MspInit+0x1a8>)
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_UART_MspInit+0x1a8>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <HAL_UART_MspInit+0x1a8>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_UART_MspInit+0x1a8>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	4619      	mov	r1, r3
 8001c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c38:	f000 fba0 	bl	800237c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001c52:	f107 031c 	add.w	r3, r7, #28
 8001c56:	4619      	mov	r1, r3
 8001c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5c:	f000 fb8e 	bl	800237c <HAL_GPIO_Init>
}
 8001c60:	bf00      	nop
 8001c62:	3730      	adds	r7, #48	; 0x30
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40013800 	.word	0x40013800
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	200003f8 	.word	0x200003f8
 8001c74:	40020058 	.word	0x40020058
 8001c78:	200003b0 	.word	0x200003b0
 8001c7c:	40020044 	.word	0x40020044
 8001c80:	40004400 	.word	0x40004400

08001c84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c88:	f7ff fd26 	bl	80016d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c8e:	e003      	b.n	8001c98 <LoopCopyDataInit>

08001c90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c96:	3104      	adds	r1, #4

08001c98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c98:	480a      	ldr	r0, [pc, #40]	; (8001cc4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ca0:	d3f6      	bcc.n	8001c90 <CopyDataInit>
	ldr	r2, =_sbss
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ca4:	e002      	b.n	8001cac <LoopFillZerobss>

08001ca6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ca6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ca8:	f842 3b04 	str.w	r3, [r2], #4

08001cac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <LoopForever+0x16>)
	cmp	r2, r3
 8001cae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001cb0:	d3f9      	bcc.n	8001ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cb2:	f002 fb91 	bl	80043d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cb6:	f7ff f9d9 	bl	800106c <main>

08001cba <LoopForever>:

LoopForever:
    b LoopForever
 8001cba:	e7fe      	b.n	8001cba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cbc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001cc0:	08008410 	.word	0x08008410
	ldr	r0, =_sdata
 8001cc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001cc8:	200001fc 	.word	0x200001fc
	ldr	r2, =_sbss
 8001ccc:	200001fc 	.word	0x200001fc
	ldr	r3, = _ebss
 8001cd0:	20000548 	.word	0x20000548

08001cd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <ADC1_IRQHandler>

08001cd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	f000 f91f 	bl	8001f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f000 f80e 	bl	8001d08 <HAL_InitTick>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	71fb      	strb	r3, [r7, #7]
 8001cf6:	e001      	b.n	8001cfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cf8:	f7ff fc4c 	bl	8001594 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d14:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <HAL_InitTick+0x6c>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d023      	beq.n	8001d64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <HAL_InitTick+0x70>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <HAL_InitTick+0x6c>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f91d 	bl	8001f72 <HAL_SYSTICK_Config>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10f      	bne.n	8001d5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b0f      	cmp	r3, #15
 8001d42:	d809      	bhi.n	8001d58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d44:	2200      	movs	r2, #0
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4c:	f000 f8f5 	bl	8001f3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d50:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_InitTick+0x74>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e007      	b.n	8001d68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	e004      	b.n	8001d68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
 8001d62:	e001      	b.n	8001d68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000028 	.word	0x20000028
 8001d78:	20000020 	.word	0x20000020
 8001d7c:	20000024 	.word	0x20000024

08001d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_IncTick+0x20>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_IncTick+0x24>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <HAL_IncTick+0x24>)
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000028 	.word	0x20000028
 8001da4:	20000540 	.word	0x20000540

08001da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <HAL_GetTick+0x14>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000540 	.word	0x20000540

08001dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df2:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	60d3      	str	r3, [r2, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e0c:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <__NVIC_GetPriorityGrouping+0x18>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	f003 0307 	and.w	r3, r3, #7
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	db0a      	blt.n	8001e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	490c      	ldr	r1, [pc, #48]	; (8001e70 <__NVIC_SetPriority+0x4c>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	440b      	add	r3, r1
 8001e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e4c:	e00a      	b.n	8001e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4908      	ldr	r1, [pc, #32]	; (8001e74 <__NVIC_SetPriority+0x50>)
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	3b04      	subs	r3, #4
 8001e5c:	0112      	lsls	r2, r2, #4
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	440b      	add	r3, r1
 8001e62:	761a      	strb	r2, [r3, #24]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000e100 	.word	0xe000e100
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f1c3 0307 	rsb	r3, r3, #7
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	bf28      	it	cs
 8001e96:	2304      	movcs	r3, #4
 8001e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d902      	bls.n	8001ea8 <NVIC_EncodePriority+0x30>
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3b03      	subs	r3, #3
 8001ea6:	e000      	b.n	8001eaa <NVIC_EncodePriority+0x32>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	401a      	ands	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43d9      	mvns	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	4313      	orrs	r3, r2
         );
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef0:	d301      	bcc.n	8001ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00f      	b.n	8001f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <SysTick_Config+0x40>)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efe:	210f      	movs	r1, #15
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f7ff ff8e 	bl	8001e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <SysTick_Config+0x40>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0e:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <SysTick_Config+0x40>)
 8001f10:	2207      	movs	r2, #7
 8001f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	e000e010 	.word	0xe000e010

08001f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ff47 	bl	8001dc0 <__NVIC_SetPriorityGrouping>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f4c:	f7ff ff5c 	bl	8001e08 <__NVIC_GetPriorityGrouping>
 8001f50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	6978      	ldr	r0, [r7, #20]
 8001f58:	f7ff ff8e 	bl	8001e78 <NVIC_EncodePriority>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff5d 	bl	8001e24 <__NVIC_SetPriority>
}
 8001f6a:	bf00      	nop
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffb0 	bl	8001ee0 <SysTick_Config>
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e098      	b.n	80020d0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b4d      	ldr	r3, [pc, #308]	; (80020dc <HAL_DMA_Init+0x150>)
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d80f      	bhi.n	8001fca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <HAL_DMA_Init+0x154>)
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a4b      	ldr	r2, [pc, #300]	; (80020e4 <HAL_DMA_Init+0x158>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	009a      	lsls	r2, r3, #2
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a48      	ldr	r2, [pc, #288]	; (80020e8 <HAL_DMA_Init+0x15c>)
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40
 8001fc8:	e00e      	b.n	8001fe8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b46      	ldr	r3, [pc, #280]	; (80020ec <HAL_DMA_Init+0x160>)
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a43      	ldr	r2, [pc, #268]	; (80020e4 <HAL_DMA_Init+0x158>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	091b      	lsrs	r3, r3, #4
 8001fdc:	009a      	lsls	r2, r3, #2
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a42      	ldr	r2, [pc, #264]	; (80020f0 <HAL_DMA_Init+0x164>)
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002002:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800200c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002018:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002024:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002042:	d039      	beq.n	80020b8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <HAL_DMA_Init+0x15c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d11a      	bne.n	8002084 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800204e:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <HAL_DMA_Init+0x168>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f003 031c 	and.w	r3, r3, #28
 800205a:	210f      	movs	r1, #15
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	4924      	ldr	r1, [pc, #144]	; (80020f4 <HAL_DMA_Init+0x168>)
 8002064:	4013      	ands	r3, r2
 8002066:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_DMA_Init+0x168>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	f003 031c 	and.w	r3, r3, #28
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	491d      	ldr	r1, [pc, #116]	; (80020f4 <HAL_DMA_Init+0x168>)
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
 8002082:	e019      	b.n	80020b8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002084:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <HAL_DMA_Init+0x16c>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208c:	f003 031c 	and.w	r3, r3, #28
 8002090:	210f      	movs	r1, #15
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	4917      	ldr	r1, [pc, #92]	; (80020f8 <HAL_DMA_Init+0x16c>)
 800209a:	4013      	ands	r3, r2
 800209c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_DMA_Init+0x16c>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6859      	ldr	r1, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f003 031c 	and.w	r3, r3, #28
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	4911      	ldr	r1, [pc, #68]	; (80020f8 <HAL_DMA_Init+0x16c>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	40020407 	.word	0x40020407
 80020e0:	bffdfff8 	.word	0xbffdfff8
 80020e4:	cccccccd 	.word	0xcccccccd
 80020e8:	40020000 	.word	0x40020000
 80020ec:	bffdfbf8 	.word	0xbffdfbf8
 80020f0:	40020400 	.word	0x40020400
 80020f4:	400200a8 	.word	0x400200a8
 80020f8:	400204a8 	.word	0x400204a8

080020fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_DMA_Start_IT+0x20>
 8002118:	2302      	movs	r3, #2
 800211a:	e04b      	b.n	80021b4 <HAL_DMA_Start_IT+0xb8>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d13a      	bne.n	80021a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	68b9      	ldr	r1, [r7, #8]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 f8e0 	bl	800231a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	2b00      	cmp	r3, #0
 8002160:	d008      	beq.n	8002174 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 020e 	orr.w	r2, r2, #14
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	e00f      	b.n	8002194 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0204 	bic.w	r2, r2, #4
 8002182:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 020a 	orr.w	r2, r2, #10
 8002192:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	e005      	b.n	80021b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80021ae:	2302      	movs	r3, #2
 80021b0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d8:	f003 031c 	and.w	r3, r3, #28
 80021dc:	2204      	movs	r2, #4
 80021de:	409a      	lsls	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d026      	beq.n	8002236 <HAL_DMA_IRQHandler+0x7a>
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d021      	beq.n	8002236 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d107      	bne.n	8002210 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0204 	bic.w	r2, r2, #4
 800220e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002214:	f003 021c 	and.w	r2, r3, #28
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	2104      	movs	r1, #4
 800221e:	fa01 f202 	lsl.w	r2, r1, r2
 8002222:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	2b00      	cmp	r3, #0
 800222a:	d071      	beq.n	8002310 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002234:	e06c      	b.n	8002310 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f003 031c 	and.w	r3, r3, #28
 800223e:	2202      	movs	r2, #2
 8002240:	409a      	lsls	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4013      	ands	r3, r2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d02e      	beq.n	80022a8 <HAL_DMA_IRQHandler+0xec>
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d029      	beq.n	80022a8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10b      	bne.n	800227a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 020a 	bic.w	r2, r2, #10
 8002270:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f003 021c 	and.w	r2, r3, #28
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	2102      	movs	r1, #2
 8002288:	fa01 f202 	lsl.w	r2, r1, r2
 800228c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	2b00      	cmp	r3, #0
 800229c:	d038      	beq.n	8002310 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022a6:	e033      	b.n	8002310 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	f003 031c 	and.w	r3, r3, #28
 80022b0:	2208      	movs	r2, #8
 80022b2:	409a      	lsls	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d02a      	beq.n	8002312 <HAL_DMA_IRQHandler+0x156>
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d025      	beq.n	8002312 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 020e 	bic.w	r2, r2, #14
 80022d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	f003 021c 	and.w	r2, r3, #28
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	2101      	movs	r1, #1
 80022e4:	fa01 f202 	lsl.w	r2, r1, r2
 80022e8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002304:	2b00      	cmp	r3, #0
 8002306:	d004      	beq.n	8002312 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002310:	bf00      	nop
 8002312:	bf00      	nop
}
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800231a:	b480      	push	{r7}
 800231c:	b085      	sub	sp, #20
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232c:	f003 021c 	and.w	r2, r3, #28
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	2101      	movs	r1, #1
 8002336:	fa01 f202 	lsl.w	r2, r1, r2
 800233a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b10      	cmp	r3, #16
 800234a:	d108      	bne.n	800235e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800235c:	e007      	b.n	800236e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	60da      	str	r2, [r3, #12]
}
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800238a:	e148      	b.n	800261e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2101      	movs	r1, #1
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	4013      	ands	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 813a 	beq.w	8002618 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d00b      	beq.n	80023c4 <HAL_GPIO_Init+0x48>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d007      	beq.n	80023c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023b8:	2b11      	cmp	r3, #17
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b12      	cmp	r3, #18
 80023c2:	d130      	bne.n	8002426 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023fa:	2201      	movs	r2, #1
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	091b      	lsrs	r3, r3, #4
 8002410:	f003 0201 	and.w	r2, r3, #1
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	2203      	movs	r2, #3
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0xea>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b12      	cmp	r3, #18
 8002464:	d123      	bne.n	80024ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	08da      	lsrs	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3208      	adds	r2, #8
 800246e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002472:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	220f      	movs	r2, #15
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3208      	adds	r2, #8
 80024a8:	6939      	ldr	r1, [r7, #16]
 80024aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2203      	movs	r2, #3
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0203 	and.w	r2, r3, #3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8094 	beq.w	8002618 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f0:	4b52      	ldr	r3, [pc, #328]	; (800263c <HAL_GPIO_Init+0x2c0>)
 80024f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f4:	4a51      	ldr	r2, [pc, #324]	; (800263c <HAL_GPIO_Init+0x2c0>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6613      	str	r3, [r2, #96]	; 0x60
 80024fc:	4b4f      	ldr	r3, [pc, #316]	; (800263c <HAL_GPIO_Init+0x2c0>)
 80024fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002508:	4a4d      	ldr	r2, [pc, #308]	; (8002640 <HAL_GPIO_Init+0x2c4>)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	3302      	adds	r3, #2
 8002510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	220f      	movs	r2, #15
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002532:	d00d      	beq.n	8002550 <HAL_GPIO_Init+0x1d4>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a43      	ldr	r2, [pc, #268]	; (8002644 <HAL_GPIO_Init+0x2c8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d007      	beq.n	800254c <HAL_GPIO_Init+0x1d0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a42      	ldr	r2, [pc, #264]	; (8002648 <HAL_GPIO_Init+0x2cc>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d101      	bne.n	8002548 <HAL_GPIO_Init+0x1cc>
 8002544:	2302      	movs	r3, #2
 8002546:	e004      	b.n	8002552 <HAL_GPIO_Init+0x1d6>
 8002548:	2307      	movs	r3, #7
 800254a:	e002      	b.n	8002552 <HAL_GPIO_Init+0x1d6>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_GPIO_Init+0x1d6>
 8002550:	2300      	movs	r3, #0
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	f002 0203 	and.w	r2, r2, #3
 8002558:	0092      	lsls	r2, r2, #2
 800255a:	4093      	lsls	r3, r2
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002562:	4937      	ldr	r1, [pc, #220]	; (8002640 <HAL_GPIO_Init+0x2c4>)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002570:	4b36      	ldr	r3, [pc, #216]	; (800264c <HAL_GPIO_Init+0x2d0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	43db      	mvns	r3, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002594:	4a2d      	ldr	r2, [pc, #180]	; (800264c <HAL_GPIO_Init+0x2d0>)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800259a:	4b2c      	ldr	r3, [pc, #176]	; (800264c <HAL_GPIO_Init+0x2d0>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025be:	4a23      	ldr	r2, [pc, #140]	; (800264c <HAL_GPIO_Init+0x2d0>)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025c4:	4b21      	ldr	r3, [pc, #132]	; (800264c <HAL_GPIO_Init+0x2d0>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025e8:	4a18      	ldr	r2, [pc, #96]	; (800264c <HAL_GPIO_Init+0x2d0>)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025ee:	4b17      	ldr	r3, [pc, #92]	; (800264c <HAL_GPIO_Init+0x2d0>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002612:	4a0e      	ldr	r2, [pc, #56]	; (800264c <HAL_GPIO_Init+0x2d0>)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	3301      	adds	r3, #1
 800261c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	f47f aeaf 	bne.w	800238c <HAL_GPIO_Init+0x10>
  }
}
 800262e:	bf00      	nop
 8002630:	371c      	adds	r7, #28
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	40010000 	.word	0x40010000
 8002644:	48000400 	.word	0x48000400
 8002648:	48000800 	.word	0x48000800
 800264c:	40010400 	.word	0x40010400

08002650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
 800265c:	4613      	mov	r3, r2
 800265e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002660:	787b      	ldrb	r3, [r7, #1]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800266c:	e002      	b.n	8002674 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a04      	ldr	r2, [pc, #16]	; (800269c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800268a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268e:	6013      	str	r3, [r2, #0]
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40007000 	.word	0x40007000

080026a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40007000 	.word	0x40007000

080026bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ca:	d130      	bne.n	800272e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026cc:	4b23      	ldr	r3, [pc, #140]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026d8:	d038      	beq.n	800274c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026da:	4b20      	ldr	r3, [pc, #128]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026e2:	4a1e      	ldr	r2, [pc, #120]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2232      	movs	r2, #50	; 0x32
 80026f0:	fb02 f303 	mul.w	r3, r2, r3
 80026f4:	4a1b      	ldr	r2, [pc, #108]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	0c9b      	lsrs	r3, r3, #18
 80026fc:	3301      	adds	r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002700:	e002      	b.n	8002708 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3b01      	subs	r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002714:	d102      	bne.n	800271c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f2      	bne.n	8002702 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002728:	d110      	bne.n	800274c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e00f      	b.n	800274e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273a:	d007      	beq.n	800274c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800273c:	4b07      	ldr	r3, [pc, #28]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002744:	4a05      	ldr	r2, [pc, #20]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800274a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40007000 	.word	0x40007000
 8002760:	20000020 	.word	0x20000020
 8002764:	431bde83 	.word	0x431bde83

08002768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	f000 bc11 	b.w	8002f9e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277c:	4ba0      	ldr	r3, [pc, #640]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 030c 	and.w	r3, r3, #12
 8002784:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002786:	4b9e      	ldr	r3, [pc, #632]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80e4 	beq.w	8002966 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d007      	beq.n	80027b4 <HAL_RCC_OscConfig+0x4c>
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	f040 808b 	bne.w	80028c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	f040 8087 	bne.w	80028c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027b4:	4b92      	ldr	r3, [pc, #584]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_OscConfig+0x64>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e3e8      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1a      	ldr	r2, [r3, #32]
 80027d0:	4b8b      	ldr	r3, [pc, #556]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d004      	beq.n	80027e6 <HAL_RCC_OscConfig+0x7e>
 80027dc:	4b88      	ldr	r3, [pc, #544]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027e4:	e005      	b.n	80027f2 <HAL_RCC_OscConfig+0x8a>
 80027e6:	4b86      	ldr	r3, [pc, #536]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80027e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d223      	bcs.n	800283e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fd78 	bl	80032f0 <RCC_SetFlashLatencyFromMSIRange>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e3c9      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800280a:	4b7d      	ldr	r3, [pc, #500]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a7c      	ldr	r2, [pc, #496]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002810:	f043 0308 	orr.w	r3, r3, #8
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b7a      	ldr	r3, [pc, #488]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	4977      	ldr	r1, [pc, #476]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002824:	4313      	orrs	r3, r2
 8002826:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002828:	4b75      	ldr	r3, [pc, #468]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	4972      	ldr	r1, [pc, #456]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
 800283c:	e025      	b.n	800288a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800283e:	4b70      	ldr	r3, [pc, #448]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6f      	ldr	r2, [pc, #444]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002844:	f043 0308 	orr.w	r3, r3, #8
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b6d      	ldr	r3, [pc, #436]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	496a      	ldr	r1, [pc, #424]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002858:	4313      	orrs	r3, r2
 800285a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800285c:	4b68      	ldr	r3, [pc, #416]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	4965      	ldr	r1, [pc, #404]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fd38 	bl	80032f0 <RCC_SetFlashLatencyFromMSIRange>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e389      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800288a:	f000 fc6f 	bl	800316c <HAL_RCC_GetSysClockFreq>
 800288e:	4601      	mov	r1, r0
 8002890:	4b5b      	ldr	r3, [pc, #364]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	4a5a      	ldr	r2, [pc, #360]	; (8002a04 <HAL_RCC_OscConfig+0x29c>)
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	fa21 f303 	lsr.w	r3, r1, r3
 80028a6:	4a58      	ldr	r2, [pc, #352]	; (8002a08 <HAL_RCC_OscConfig+0x2a0>)
 80028a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028aa:	4b58      	ldr	r3, [pc, #352]	; (8002a0c <HAL_RCC_OscConfig+0x2a4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fa2a 	bl	8001d08 <HAL_InitTick>
 80028b4:	4603      	mov	r3, r0
 80028b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d052      	beq.n	8002964 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	e36d      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d032      	beq.n	8002930 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028ca:	4b4d      	ldr	r3, [pc, #308]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a4c      	ldr	r2, [pc, #304]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028d6:	f7ff fa67 	bl	8001da8 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028de:	f7ff fa63 	bl	8001da8 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e356      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028f0:	4b43      	ldr	r3, [pc, #268]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028fc:	4b40      	ldr	r3, [pc, #256]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a3f      	ldr	r2, [pc, #252]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002902:	f043 0308 	orr.w	r3, r3, #8
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	4b3d      	ldr	r3, [pc, #244]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	493a      	ldr	r1, [pc, #232]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800291a:	4b39      	ldr	r3, [pc, #228]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	4935      	ldr	r1, [pc, #212]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
 800292e:	e01a      	b.n	8002966 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002930:	4b33      	ldr	r3, [pc, #204]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a32      	ldr	r2, [pc, #200]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800293c:	f7ff fa34 	bl	8001da8 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002944:	f7ff fa30 	bl	8001da8 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e323      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002956:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x1dc>
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002964:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d073      	beq.n	8002a5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d005      	beq.n	8002984 <HAL_RCC_OscConfig+0x21c>
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2b0c      	cmp	r3, #12
 800297c:	d10e      	bne.n	800299c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d10b      	bne.n	800299c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d063      	beq.n	8002a58 <HAL_RCC_OscConfig+0x2f0>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d15f      	bne.n	8002a58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e300      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a4:	d106      	bne.n	80029b4 <HAL_RCC_OscConfig+0x24c>
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a15      	ldr	r2, [pc, #84]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e01d      	b.n	80029f0 <HAL_RCC_OscConfig+0x288>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x270>
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a0f      	ldr	r2, [pc, #60]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a0c      	ldr	r2, [pc, #48]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0x288>
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a08      	ldr	r2, [pc, #32]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a05      	ldr	r2, [pc, #20]	; (8002a00 <HAL_RCC_OscConfig+0x298>)
 80029ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01b      	beq.n	8002a30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7ff f9d6 	bl	8001da8 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029fe:	e010      	b.n	8002a22 <HAL_RCC_OscConfig+0x2ba>
 8002a00:	40021000 	.word	0x40021000
 8002a04:	08008104 	.word	0x08008104
 8002a08:	20000020 	.word	0x20000020
 8002a0c:	20000024 	.word	0x20000024
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a10:	f7ff f9ca 	bl	8001da8 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e2bd      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a22:	4baf      	ldr	r3, [pc, #700]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x2a8>
 8002a2e:	e014      	b.n	8002a5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7ff f9ba 	bl	8001da8 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a38:	f7ff f9b6 	bl	8001da8 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e2a9      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a4a:	4ba5      	ldr	r3, [pc, #660]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x2d0>
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d060      	beq.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_OscConfig+0x310>
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d119      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d116      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a78:	4b99      	ldr	r3, [pc, #612]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_OscConfig+0x328>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e286      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a90:	4b93      	ldr	r3, [pc, #588]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	061b      	lsls	r3, r3, #24
 8002a9e:	4990      	ldr	r1, [pc, #576]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aa4:	e040      	b.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d023      	beq.n	8002af6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aae:	4b8c      	ldr	r3, [pc, #560]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a8b      	ldr	r2, [pc, #556]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7ff f975 	bl	8001da8 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac2:	f7ff f971 	bl	8001da8 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e264      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad4:	4b82      	ldr	r3, [pc, #520]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae0:	4b7f      	ldr	r3, [pc, #508]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	497c      	ldr	r1, [pc, #496]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
 8002af4:	e018      	b.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af6:	4b7a      	ldr	r3, [pc, #488]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a79      	ldr	r2, [pc, #484]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7ff f951 	bl	8001da8 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0a:	f7ff f94d 	bl	8001da8 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e240      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b1c:	4b70      	ldr	r3, [pc, #448]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f0      	bne.n	8002b0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d03c      	beq.n	8002bae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01c      	beq.n	8002b76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3c:	4b68      	ldr	r3, [pc, #416]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b42:	4a67      	ldr	r2, [pc, #412]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4c:	f7ff f92c 	bl	8001da8 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b54:	f7ff f928 	bl	8001da8 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e21b      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b66:	4b5e      	ldr	r3, [pc, #376]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ef      	beq.n	8002b54 <HAL_RCC_OscConfig+0x3ec>
 8002b74:	e01b      	b.n	8002bae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b76:	4b5a      	ldr	r3, [pc, #360]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7c:	4a58      	ldr	r2, [pc, #352]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002b7e:	f023 0301 	bic.w	r3, r3, #1
 8002b82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7ff f90f 	bl	8001da8 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8e:	f7ff f90b 	bl	8001da8 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e1fe      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba0:	4b4f      	ldr	r3, [pc, #316]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1ef      	bne.n	8002b8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80a6 	beq.w	8002d08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bc0:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10d      	bne.n	8002be8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bcc:	4b44      	ldr	r3, [pc, #272]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd0:	4a43      	ldr	r2, [pc, #268]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8002bd8:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be4:	2301      	movs	r3, #1
 8002be6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be8:	4b3e      	ldr	r3, [pc, #248]	; (8002ce4 <HAL_RCC_OscConfig+0x57c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d118      	bne.n	8002c26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bf4:	4b3b      	ldr	r3, [pc, #236]	; (8002ce4 <HAL_RCC_OscConfig+0x57c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a3a      	ldr	r2, [pc, #232]	; (8002ce4 <HAL_RCC_OscConfig+0x57c>)
 8002bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c00:	f7ff f8d2 	bl	8001da8 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c08:	f7ff f8ce 	bl	8001da8 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e1c1      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1a:	4b32      	ldr	r3, [pc, #200]	; (8002ce4 <HAL_RCC_OscConfig+0x57c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d108      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4d8>
 8002c2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c34:	4a2a      	ldr	r2, [pc, #168]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c3e:	e024      	b.n	8002c8a <HAL_RCC_OscConfig+0x522>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d110      	bne.n	8002c6a <HAL_RCC_OscConfig+0x502>
 8002c48:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	4a24      	ldr	r2, [pc, #144]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c50:	f043 0304 	orr.w	r3, r3, #4
 8002c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c58:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5e:	4a20      	ldr	r2, [pc, #128]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c68:	e00f      	b.n	8002c8a <HAL_RCC_OscConfig+0x522>
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	4a1b      	ldr	r2, [pc, #108]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c7a:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	4a17      	ldr	r2, [pc, #92]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002c82:	f023 0304 	bic.w	r3, r3, #4
 8002c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d016      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c92:	f7ff f889 	bl	8001da8 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7ff f885 	bl	8001da8 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e176      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_OscConfig+0x578>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0ed      	beq.n	8002c9a <HAL_RCC_OscConfig+0x532>
 8002cbe:	e01a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc0:	f7ff f872 	bl	8001da8 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cc6:	e00f      	b.n	8002ce8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc8:	f7ff f86e 	bl	8001da8 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d906      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e15f      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ce8:	4baa      	ldr	r3, [pc, #680]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1e8      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf6:	7ffb      	ldrb	r3, [r7, #31]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfc:	4ba5      	ldr	r3, [pc, #660]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	4aa4      	ldr	r2, [pc, #656]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d03c      	beq.n	8002d8e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d01c      	beq.n	8002d56 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d1c:	4b9d      	ldr	r3, [pc, #628]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d22:	4a9c      	ldr	r2, [pc, #624]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7ff f83c 	bl	8001da8 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d34:	f7ff f838 	bl	8001da8 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e12b      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d46:	4b93      	ldr	r3, [pc, #588]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0ef      	beq.n	8002d34 <HAL_RCC_OscConfig+0x5cc>
 8002d54:	e01b      	b.n	8002d8e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d56:	4b8f      	ldr	r3, [pc, #572]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d5c:	4a8d      	ldr	r2, [pc, #564]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d66:	f7ff f81f 	bl	8001da8 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d6e:	f7ff f81b 	bl	8001da8 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e10e      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d80:	4b84      	ldr	r3, [pc, #528]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002d82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1ef      	bne.n	8002d6e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 8102 	beq.w	8002f9c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	f040 80c5 	bne.w	8002f2c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002da2:	4b7c      	ldr	r3, [pc, #496]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 0203 	and.w	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d12c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d123      	bne.n	8002e10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d11b      	bne.n	8002e10 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d113      	bne.n	8002e10 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	085b      	lsrs	r3, r3, #1
 8002df4:	3b01      	subs	r3, #1
 8002df6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d109      	bne.n	8002e10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	085b      	lsrs	r3, r3, #1
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d067      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d062      	beq.n	8002edc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e16:	4b5f      	ldr	r3, [pc, #380]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e0bb      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e26:	4b5b      	ldr	r3, [pc, #364]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a5a      	ldr	r2, [pc, #360]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002e2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e30:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e32:	f7fe ffb9 	bl	8001da8 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3a:	f7fe ffb5 	bl	8001da8 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e0a8      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e4c:	4b51      	ldr	r3, [pc, #324]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e58:	4b4e      	ldr	r3, [pc, #312]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	4b4e      	ldr	r3, [pc, #312]	; (8002f98 <HAL_RCC_OscConfig+0x830>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e68:	3a01      	subs	r2, #1
 8002e6a:	0112      	lsls	r2, r2, #4
 8002e6c:	4311      	orrs	r1, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e72:	0212      	lsls	r2, r2, #8
 8002e74:	4311      	orrs	r1, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e7a:	0852      	lsrs	r2, r2, #1
 8002e7c:	3a01      	subs	r2, #1
 8002e7e:	0552      	lsls	r2, r2, #21
 8002e80:	4311      	orrs	r1, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e86:	0852      	lsrs	r2, r2, #1
 8002e88:	3a01      	subs	r2, #1
 8002e8a:	0652      	lsls	r2, r2, #25
 8002e8c:	4311      	orrs	r1, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e92:	06d2      	lsls	r2, r2, #27
 8002e94:	430a      	orrs	r2, r1
 8002e96:	493f      	ldr	r1, [pc, #252]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e9c:	4b3d      	ldr	r3, [pc, #244]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a3c      	ldr	r2, [pc, #240]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ea6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ea8:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4a39      	ldr	r2, [pc, #228]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002eb4:	f7fe ff78 	bl	8001da8 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7fe ff74 	bl	8001da8 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e067      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ece:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eda:	e05f      	b.n	8002f9c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e05e      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee0:	4b2c      	ldr	r3, [pc, #176]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d157      	bne.n	8002f9c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002eec:	4b29      	ldr	r3, [pc, #164]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a28      	ldr	r2, [pc, #160]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ef8:	4b26      	ldr	r3, [pc, #152]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4a25      	ldr	r2, [pc, #148]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f04:	f7fe ff50 	bl	8001da8 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fe ff4c 	bl	8001da8 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e03f      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x7a4>
 8002f2a:	e037      	b.n	8002f9c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	d02d      	beq.n	8002f8e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f32:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002f38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f3c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f3e:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f4a:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	4a11      	ldr	r2, [pc, #68]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002f50:	f023 0303 	bic.w	r3, r3, #3
 8002f54:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002f56:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002f5c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f64:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f66:	f7fe ff1f 	bl	8001da8 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6e:	f7fe ff1b 	bl	8001da8 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e00e      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <HAL_RCC_OscConfig+0x82c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f0      	bne.n	8002f6e <HAL_RCC_OscConfig+0x806>
 8002f8c:	e006      	b.n	8002f9c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e005      	b.n	8002f9e <HAL_RCC_OscConfig+0x836>
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop

08002fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0c8      	b.n	800314e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b66      	ldr	r3, [pc, #408]	; (8003158 <HAL_RCC_ClockConfig+0x1b0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d910      	bls.n	8002fec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b63      	ldr	r3, [pc, #396]	; (8003158 <HAL_RCC_ClockConfig+0x1b0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 0207 	bic.w	r2, r3, #7
 8002fd2:	4961      	ldr	r1, [pc, #388]	; (8003158 <HAL_RCC_ClockConfig+0x1b0>)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b5f      	ldr	r3, [pc, #380]	; (8003158 <HAL_RCC_ClockConfig+0x1b0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0b0      	b.n	800314e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d04c      	beq.n	8003092 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003000:	4b56      	ldr	r3, [pc, #344]	; (800315c <HAL_RCC_ClockConfig+0x1b4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d121      	bne.n	8003050 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e09e      	b.n	800314e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d107      	bne.n	8003028 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003018:	4b50      	ldr	r3, [pc, #320]	; (800315c <HAL_RCC_ClockConfig+0x1b4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d115      	bne.n	8003050 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e092      	b.n	800314e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d107      	bne.n	8003040 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003030:	4b4a      	ldr	r3, [pc, #296]	; (800315c <HAL_RCC_ClockConfig+0x1b4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d109      	bne.n	8003050 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e086      	b.n	800314e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003040:	4b46      	ldr	r3, [pc, #280]	; (800315c <HAL_RCC_ClockConfig+0x1b4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e07e      	b.n	800314e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003050:	4b42      	ldr	r3, [pc, #264]	; (800315c <HAL_RCC_ClockConfig+0x1b4>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f023 0203 	bic.w	r2, r3, #3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	493f      	ldr	r1, [pc, #252]	; (800315c <HAL_RCC_ClockConfig+0x1b4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003062:	f7fe fea1 	bl	8001da8 <HAL_GetTick>
 8003066:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003068:	e00a      	b.n	8003080 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306a:	f7fe fe9d 	bl	8001da8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e066      	b.n	800314e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003080:	4b36      	ldr	r3, [pc, #216]	; (800315c <HAL_RCC_ClockConfig+0x1b4>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 020c 	and.w	r2, r3, #12
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	429a      	cmp	r2, r3
 8003090:	d1eb      	bne.n	800306a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800309e:	4b2f      	ldr	r3, [pc, #188]	; (800315c <HAL_RCC_ClockConfig+0x1b4>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	492c      	ldr	r1, [pc, #176]	; (800315c <HAL_RCC_ClockConfig+0x1b4>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b0:	4b29      	ldr	r3, [pc, #164]	; (8003158 <HAL_RCC_ClockConfig+0x1b0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d210      	bcs.n	80030e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b26      	ldr	r3, [pc, #152]	; (8003158 <HAL_RCC_ClockConfig+0x1b0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 0207 	bic.w	r2, r3, #7
 80030c6:	4924      	ldr	r1, [pc, #144]	; (8003158 <HAL_RCC_ClockConfig+0x1b0>)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b22      	ldr	r3, [pc, #136]	; (8003158 <HAL_RCC_ClockConfig+0x1b0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e036      	b.n	800314e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ec:	4b1b      	ldr	r3, [pc, #108]	; (800315c <HAL_RCC_ClockConfig+0x1b4>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	4918      	ldr	r1, [pc, #96]	; (800315c <HAL_RCC_ClockConfig+0x1b4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800310a:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_RCC_ClockConfig+0x1b4>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4910      	ldr	r1, [pc, #64]	; (800315c <HAL_RCC_ClockConfig+0x1b4>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800311e:	f000 f825 	bl	800316c <HAL_RCC_GetSysClockFreq>
 8003122:	4601      	mov	r1, r0
 8003124:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_RCC_ClockConfig+0x1b4>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	4a0c      	ldr	r2, [pc, #48]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	5cd3      	ldrb	r3, [r2, r3]
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	fa21 f303 	lsr.w	r3, r1, r3
 800313a:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe fde0 	bl	8001d08 <HAL_InitTick>
 8003148:	4603      	mov	r3, r0
 800314a:	72fb      	strb	r3, [r7, #11]

  return status;
 800314c:	7afb      	ldrb	r3, [r7, #11]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40022000 	.word	0x40022000
 800315c:	40021000 	.word	0x40021000
 8003160:	08008104 	.word	0x08008104
 8003164:	20000020 	.word	0x20000020
 8003168:	20000024 	.word	0x20000024

0800316c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800316c:	b480      	push	{r7}
 800316e:	b089      	sub	sp, #36	; 0x24
 8003170:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800317a:	4b3d      	ldr	r3, [pc, #244]	; (8003270 <HAL_RCC_GetSysClockFreq+0x104>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003184:	4b3a      	ldr	r3, [pc, #232]	; (8003270 <HAL_RCC_GetSysClockFreq+0x104>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	2b0c      	cmp	r3, #12
 8003198:	d121      	bne.n	80031de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d11e      	bne.n	80031de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031a0:	4b33      	ldr	r3, [pc, #204]	; (8003270 <HAL_RCC_GetSysClockFreq+0x104>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031ac:	4b30      	ldr	r3, [pc, #192]	; (8003270 <HAL_RCC_GetSysClockFreq+0x104>)
 80031ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	e005      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031bc:	4b2c      	ldr	r3, [pc, #176]	; (8003270 <HAL_RCC_GetSysClockFreq+0x104>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031c8:	4a2a      	ldr	r2, [pc, #168]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10d      	bne.n	80031f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d102      	bne.n	80031ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031e4:	4b24      	ldr	r3, [pc, #144]	; (8003278 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031e6:	61bb      	str	r3, [r7, #24]
 80031e8:	e004      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031f0:	4b22      	ldr	r3, [pc, #136]	; (800327c <HAL_RCC_GetSysClockFreq+0x110>)
 80031f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d133      	bne.n	8003262 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_RCC_GetSysClockFreq+0x104>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d002      	beq.n	8003210 <HAL_RCC_GetSysClockFreq+0xa4>
 800320a:	2b03      	cmp	r3, #3
 800320c:	d003      	beq.n	8003216 <HAL_RCC_GetSysClockFreq+0xaa>
 800320e:	e005      	b.n	800321c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003210:	4b19      	ldr	r3, [pc, #100]	; (8003278 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003212:	617b      	str	r3, [r7, #20]
      break;
 8003214:	e005      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003216:	4b19      	ldr	r3, [pc, #100]	; (800327c <HAL_RCC_GetSysClockFreq+0x110>)
 8003218:	617b      	str	r3, [r7, #20]
      break;
 800321a:	e002      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	617b      	str	r3, [r7, #20]
      break;
 8003220:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003222:	4b13      	ldr	r3, [pc, #76]	; (8003270 <HAL_RCC_GetSysClockFreq+0x104>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	091b      	lsrs	r3, r3, #4
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	3301      	adds	r3, #1
 800322e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003230:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <HAL_RCC_GetSysClockFreq+0x104>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	fb02 f203 	mul.w	r2, r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	fbb2 f3f3 	udiv	r3, r2, r3
 8003246:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003248:	4b09      	ldr	r3, [pc, #36]	; (8003270 <HAL_RCC_GetSysClockFreq+0x104>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	0e5b      	lsrs	r3, r3, #25
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	3301      	adds	r3, #1
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003262:	69bb      	ldr	r3, [r7, #24]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3724      	adds	r7, #36	; 0x24
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	40021000 	.word	0x40021000
 8003274:	0800811c 	.word	0x0800811c
 8003278:	00f42400 	.word	0x00f42400
 800327c:	007a1200 	.word	0x007a1200

08003280 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <HAL_RCC_GetHCLKFreq+0x14>)
 8003286:	681b      	ldr	r3, [r3, #0]
}
 8003288:	4618      	mov	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	20000020 	.word	0x20000020

08003298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800329c:	f7ff fff0 	bl	8003280 <HAL_RCC_GetHCLKFreq>
 80032a0:	4601      	mov	r1, r0
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	0a1b      	lsrs	r3, r3, #8
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	4a04      	ldr	r2, [pc, #16]	; (80032c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032ae:	5cd3      	ldrb	r3, [r2, r3]
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40021000 	.word	0x40021000
 80032c0:	08008114 	.word	0x08008114

080032c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032c8:	f7ff ffda 	bl	8003280 <HAL_RCC_GetHCLKFreq>
 80032cc:	4601      	mov	r1, r0
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	0adb      	lsrs	r3, r3, #11
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4a04      	ldr	r2, [pc, #16]	; (80032ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80032da:	5cd3      	ldrb	r3, [r2, r3]
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000
 80032ec:	08008114 	.word	0x08008114

080032f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032fc:	4b2a      	ldr	r3, [pc, #168]	; (80033a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003308:	f7ff f9ca 	bl	80026a0 <HAL_PWREx_GetVoltageRange>
 800330c:	6178      	str	r0, [r7, #20]
 800330e:	e014      	b.n	800333a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003310:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	4a24      	ldr	r2, [pc, #144]	; (80033a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331a:	6593      	str	r3, [r2, #88]	; 0x58
 800331c:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800331e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003328:	f7ff f9ba 	bl	80026a0 <HAL_PWREx_GetVoltageRange>
 800332c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800332e:	4b1e      	ldr	r3, [pc, #120]	; (80033a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	4a1d      	ldr	r2, [pc, #116]	; (80033a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003338:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003340:	d10b      	bne.n	800335a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b80      	cmp	r3, #128	; 0x80
 8003346:	d919      	bls.n	800337c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2ba0      	cmp	r3, #160	; 0xa0
 800334c:	d902      	bls.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800334e:	2302      	movs	r3, #2
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	e013      	b.n	800337c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003354:	2301      	movs	r3, #1
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	e010      	b.n	800337c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b80      	cmp	r3, #128	; 0x80
 800335e:	d902      	bls.n	8003366 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003360:	2303      	movs	r3, #3
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	e00a      	b.n	800337c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b80      	cmp	r3, #128	; 0x80
 800336a:	d102      	bne.n	8003372 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800336c:	2302      	movs	r3, #2
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	e004      	b.n	800337c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b70      	cmp	r3, #112	; 0x70
 8003376:	d101      	bne.n	800337c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003378:	2301      	movs	r3, #1
 800337a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 0207 	bic.w	r2, r3, #7
 8003384:	4909      	ldr	r1, [pc, #36]	; (80033ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800338c:	4b07      	ldr	r3, [pc, #28]	; (80033ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	429a      	cmp	r2, r3
 8003398:	d001      	beq.n	800339e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40022000 	.word	0x40022000

080033b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033b8:	2300      	movs	r3, #0
 80033ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033bc:	2300      	movs	r3, #0
 80033be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d02f      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033d4:	d005      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80033d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033da:	d015      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80033e0:	e00f      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80033e2:	4bac      	ldr	r3, [pc, #688]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	4aab      	ldr	r2, [pc, #684]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033ee:	e00c      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 f9dc 	bl	80037b4 <RCCEx_PLLSAI1_Config>
 80033fc:	4603      	mov	r3, r0
 80033fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003400:	e003      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	74fb      	strb	r3, [r7, #19]
      break;
 8003406:	e000      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800340a:	7cfb      	ldrb	r3, [r7, #19]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10b      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003410:	4ba0      	ldr	r3, [pc, #640]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003416:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	499d      	ldr	r1, [pc, #628]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003426:	e001      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8099 	beq.w	800356c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343a:	2300      	movs	r3, #0
 800343c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800343e:	4b95      	ldr	r3, [pc, #596]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800344e:	2300      	movs	r3, #0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00d      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003454:	4b8f      	ldr	r3, [pc, #572]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003458:	4a8e      	ldr	r2, [pc, #568]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800345a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345e:	6593      	str	r3, [r2, #88]	; 0x58
 8003460:	4b8c      	ldr	r3, [pc, #560]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800346c:	2301      	movs	r3, #1
 800346e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003470:	4b89      	ldr	r3, [pc, #548]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a88      	ldr	r2, [pc, #544]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800347c:	f7fe fc94 	bl	8001da8 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003482:	e009      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003484:	f7fe fc90 	bl	8001da8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d902      	bls.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	74fb      	strb	r3, [r7, #19]
        break;
 8003496:	e005      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003498:	4b7f      	ldr	r3, [pc, #508]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0ef      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d155      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034aa:	4b7a      	ldr	r3, [pc, #488]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01e      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d019      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034c6:	4b73      	ldr	r3, [pc, #460]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034d2:	4b70      	ldr	r3, [pc, #448]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	4a6e      	ldr	r2, [pc, #440]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034e2:	4b6c      	ldr	r3, [pc, #432]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	4a6a      	ldr	r2, [pc, #424]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034f2:	4a68      	ldr	r2, [pc, #416]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d016      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fe fc50 	bl	8001da8 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800350a:	e00b      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350c:	f7fe fc4c 	bl	8001da8 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d902      	bls.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	74fb      	strb	r3, [r7, #19]
            break;
 8003522:	e006      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003524:	4b5b      	ldr	r3, [pc, #364]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0ec      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003532:	7cfb      	ldrb	r3, [r7, #19]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10b      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003538:	4b56      	ldr	r3, [pc, #344]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003546:	4953      	ldr	r1, [pc, #332]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800354e:	e004      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	74bb      	strb	r3, [r7, #18]
 8003554:	e001      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003556:	7cfb      	ldrb	r3, [r7, #19]
 8003558:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800355a:	7c7b      	ldrb	r3, [r7, #17]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d105      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003560:	4b4c      	ldr	r3, [pc, #304]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	4a4b      	ldr	r2, [pc, #300]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800356a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003578:	4b46      	ldr	r3, [pc, #280]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357e:	f023 0203 	bic.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	4943      	ldr	r1, [pc, #268]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800359a:	4b3e      	ldr	r3, [pc, #248]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a0:	f023 020c 	bic.w	r2, r3, #12
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	493a      	ldr	r1, [pc, #232]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035bc:	4b35      	ldr	r3, [pc, #212]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	4932      	ldr	r1, [pc, #200]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035de:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ec:	4929      	ldr	r1, [pc, #164]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003600:	4b24      	ldr	r3, [pc, #144]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	4921      	ldr	r1, [pc, #132]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003622:	4b1c      	ldr	r3, [pc, #112]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003628:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	4918      	ldr	r1, [pc, #96]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003644:	4b13      	ldr	r3, [pc, #76]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	4910      	ldr	r1, [pc, #64]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d02c      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	4907      	ldr	r1, [pc, #28]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003684:	d10a      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003686:	4b03      	ldr	r3, [pc, #12]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	4a02      	ldr	r2, [pc, #8]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800368c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003690:	60d3      	str	r3, [r2, #12]
 8003692:	e015      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003694:	40021000 	.word	0x40021000
 8003698:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3304      	adds	r3, #4
 80036aa:	2101      	movs	r1, #1
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 f881 	bl	80037b4 <RCCEx_PLLSAI1_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036b6:	7cfb      	ldrb	r3, [r7, #19]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80036bc:	7cfb      	ldrb	r3, [r7, #19]
 80036be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d028      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036cc:	4b30      	ldr	r3, [pc, #192]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	492d      	ldr	r1, [pc, #180]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ea:	d106      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ec:	4b28      	ldr	r3, [pc, #160]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4a27      	ldr	r2, [pc, #156]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036f6:	60d3      	str	r3, [r2, #12]
 80036f8:	e011      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003702:	d10c      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	2101      	movs	r1, #1
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f852 	bl	80037b4 <RCCEx_PLLSAI1_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003714:	7cfb      	ldrb	r3, [r7, #19]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800371a:	7cfb      	ldrb	r3, [r7, #19]
 800371c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d01c      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800372a:	4b19      	ldr	r3, [pc, #100]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003730:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003738:	4915      	ldr	r1, [pc, #84]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003744:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003748:	d10c      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	2102      	movs	r1, #2
 8003750:	4618      	mov	r0, r3
 8003752:	f000 f82f 	bl	80037b4 <RCCEx_PLLSAI1_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800375a:	7cfb      	ldrb	r3, [r7, #19]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377e:	4904      	ldr	r1, [pc, #16]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003786:	7cbb      	ldrb	r3, [r7, #18]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000

08003794 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800379e:	f043 0304 	orr.w	r3, r3, #4
 80037a2:	6013      	str	r3, [r2, #0]
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000

080037b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037c2:	4b73      	ldr	r3, [pc, #460]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d018      	beq.n	8003800 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037ce:	4b70      	ldr	r3, [pc, #448]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0203 	and.w	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d10d      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
       ||
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037e6:	4b6a      	ldr	r3, [pc, #424]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
       ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d044      	beq.n	8003884 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
 80037fe:	e041      	b.n	8003884 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d00c      	beq.n	8003822 <RCCEx_PLLSAI1_Config+0x6e>
 8003808:	2b03      	cmp	r3, #3
 800380a:	d013      	beq.n	8003834 <RCCEx_PLLSAI1_Config+0x80>
 800380c:	2b01      	cmp	r3, #1
 800380e:	d120      	bne.n	8003852 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003810:	4b5f      	ldr	r3, [pc, #380]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d11d      	bne.n	8003858 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003820:	e01a      	b.n	8003858 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003822:	4b5b      	ldr	r3, [pc, #364]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382a:	2b00      	cmp	r3, #0
 800382c:	d116      	bne.n	800385c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003832:	e013      	b.n	800385c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003834:	4b56      	ldr	r3, [pc, #344]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10f      	bne.n	8003860 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003840:	4b53      	ldr	r3, [pc, #332]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d109      	bne.n	8003860 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003850:	e006      	b.n	8003860 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
      break;
 8003856:	e004      	b.n	8003862 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003858:	bf00      	nop
 800385a:	e002      	b.n	8003862 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800385c:	bf00      	nop
 800385e:	e000      	b.n	8003862 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003860:	bf00      	nop
    }

    if(status == HAL_OK)
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10d      	bne.n	8003884 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003868:	4b49      	ldr	r3, [pc, #292]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6819      	ldr	r1, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	3b01      	subs	r3, #1
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	430b      	orrs	r3, r1
 800387e:	4944      	ldr	r1, [pc, #272]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003880:	4313      	orrs	r3, r2
 8003882:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d17c      	bne.n	8003984 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800388a:	4b41      	ldr	r3, [pc, #260]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a40      	ldr	r2, [pc, #256]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003890:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003896:	f7fe fa87 	bl	8001da8 <HAL_GetTick>
 800389a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800389c:	e009      	b.n	80038b2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800389e:	f7fe fa83 	bl	8001da8 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d902      	bls.n	80038b2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	73fb      	strb	r3, [r7, #15]
        break;
 80038b0:	e005      	b.n	80038be <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038b2:	4b37      	ldr	r3, [pc, #220]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1ef      	bne.n	800389e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d15f      	bne.n	8003984 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d110      	bne.n	80038ec <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038ca:	4b31      	ldr	r3, [pc, #196]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80038d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6892      	ldr	r2, [r2, #8]
 80038da:	0211      	lsls	r1, r2, #8
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	68d2      	ldr	r2, [r2, #12]
 80038e0:	06d2      	lsls	r2, r2, #27
 80038e2:	430a      	orrs	r2, r1
 80038e4:	492a      	ldr	r1, [pc, #168]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	610b      	str	r3, [r1, #16]
 80038ea:	e027      	b.n	800393c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d112      	bne.n	8003918 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038f2:	4b27      	ldr	r3, [pc, #156]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6892      	ldr	r2, [r2, #8]
 8003902:	0211      	lsls	r1, r2, #8
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6912      	ldr	r2, [r2, #16]
 8003908:	0852      	lsrs	r2, r2, #1
 800390a:	3a01      	subs	r2, #1
 800390c:	0552      	lsls	r2, r2, #21
 800390e:	430a      	orrs	r2, r1
 8003910:	491f      	ldr	r1, [pc, #124]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003912:	4313      	orrs	r3, r2
 8003914:	610b      	str	r3, [r1, #16]
 8003916:	e011      	b.n	800393c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003918:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003920:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6892      	ldr	r2, [r2, #8]
 8003928:	0211      	lsls	r1, r2, #8
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6952      	ldr	r2, [r2, #20]
 800392e:	0852      	lsrs	r2, r2, #1
 8003930:	3a01      	subs	r2, #1
 8003932:	0652      	lsls	r2, r2, #25
 8003934:	430a      	orrs	r2, r1
 8003936:	4916      	ldr	r1, [pc, #88]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003938:	4313      	orrs	r3, r2
 800393a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800393c:	4b14      	ldr	r3, [pc, #80]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a13      	ldr	r2, [pc, #76]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003942:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003946:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003948:	f7fe fa2e 	bl	8001da8 <HAL_GetTick>
 800394c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800394e:	e009      	b.n	8003964 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003950:	f7fe fa2a 	bl	8001da8 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d902      	bls.n	8003964 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	73fb      	strb	r3, [r7, #15]
          break;
 8003962:	e005      	b.n	8003970 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003964:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ef      	beq.n	8003950 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003976:	4b06      	ldr	r3, [pc, #24]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	4904      	ldr	r1, [pc, #16]	; (8003990 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003980:	4313      	orrs	r3, r2
 8003982:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003984:	7bfb      	ldrb	r3, [r7, #15]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000

08003994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e040      	b.n	8003a28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fe f884 	bl	8001ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2224      	movs	r2, #36	; 0x24
 80039c0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0201 	bic.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f8ce 	bl	8003b74 <UART_SetConfig>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e022      	b.n	8003a28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fad2 	bl	8003f94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fb59 	bl	80040d8 <UART_CheckIdleState>
 8003a26:	4603      	mov	r3, r0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d16c      	bne.n	8003b20 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_UART_Receive_DMA+0x22>
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e065      	b.n	8003b22 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_UART_Receive_DMA+0x34>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e05e      	b.n	8003b22 <HAL_UART_Receive_DMA+0xf2>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	88fa      	ldrh	r2, [r7, #6]
 8003a76:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2222      	movs	r2, #34	; 0x22
 8003a84:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d02a      	beq.n	8003ae4 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a92:	4a26      	ldr	r2, [pc, #152]	; (8003b2c <HAL_UART_Receive_DMA+0xfc>)
 8003a94:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a9a:	4a25      	ldr	r2, [pc, #148]	; (8003b30 <HAL_UART_Receive_DMA+0x100>)
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aa2:	4a24      	ldr	r2, [pc, #144]	; (8003b34 <HAL_UART_Receive_DMA+0x104>)
 8003aa4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aaa:	2200      	movs	r2, #0
 8003aac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3324      	adds	r3, #36	; 0x24
 8003ab8:	4619      	mov	r1, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abe:	461a      	mov	r2, r3
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	f7fe fb1b 	bl	80020fc <HAL_DMA_Start_IT>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00b      	beq.n	8003ae4 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2210      	movs	r2, #16
 8003ad0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2220      	movs	r2, #32
 8003ade:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e01e      	b.n	8003b22 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003afa:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b1a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e000      	b.n	8003b22 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
  }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	080042c3 	.word	0x080042c3
 8003b30:	0800432b 	.word	0x0800432b
 8003b34:	08004347 	.word	0x08004347

08003b38 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b74:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003b78:	b088      	sub	sp, #32
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	4bb0      	ldr	r3, [pc, #704]	; (8003e64 <UART_SetConfig+0x2f0>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	69f9      	ldr	r1, [r7, #28]
 8003baa:	430b      	orrs	r3, r1
 8003bac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4aa6      	ldr	r2, [pc, #664]	; (8003e68 <UART_SetConfig+0x2f4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a9d      	ldr	r2, [pc, #628]	; (8003e6c <UART_SetConfig+0x2f8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d121      	bne.n	8003c40 <UART_SetConfig+0xcc>
 8003bfc:	4b9c      	ldr	r3, [pc, #624]	; (8003e70 <UART_SetConfig+0x2fc>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d816      	bhi.n	8003c38 <UART_SetConfig+0xc4>
 8003c0a:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <UART_SetConfig+0x9c>)
 8003c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c10:	08003c21 	.word	0x08003c21
 8003c14:	08003c2d 	.word	0x08003c2d
 8003c18:	08003c27 	.word	0x08003c27
 8003c1c:	08003c33 	.word	0x08003c33
 8003c20:	2301      	movs	r3, #1
 8003c22:	76fb      	strb	r3, [r7, #27]
 8003c24:	e072      	b.n	8003d0c <UART_SetConfig+0x198>
 8003c26:	2302      	movs	r3, #2
 8003c28:	76fb      	strb	r3, [r7, #27]
 8003c2a:	e06f      	b.n	8003d0c <UART_SetConfig+0x198>
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	76fb      	strb	r3, [r7, #27]
 8003c30:	e06c      	b.n	8003d0c <UART_SetConfig+0x198>
 8003c32:	2308      	movs	r3, #8
 8003c34:	76fb      	strb	r3, [r7, #27]
 8003c36:	e069      	b.n	8003d0c <UART_SetConfig+0x198>
 8003c38:	2310      	movs	r3, #16
 8003c3a:	76fb      	strb	r3, [r7, #27]
 8003c3c:	bf00      	nop
 8003c3e:	e065      	b.n	8003d0c <UART_SetConfig+0x198>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a8b      	ldr	r2, [pc, #556]	; (8003e74 <UART_SetConfig+0x300>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d134      	bne.n	8003cb4 <UART_SetConfig+0x140>
 8003c4a:	4b89      	ldr	r3, [pc, #548]	; (8003e70 <UART_SetConfig+0x2fc>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c50:	f003 030c 	and.w	r3, r3, #12
 8003c54:	2b0c      	cmp	r3, #12
 8003c56:	d829      	bhi.n	8003cac <UART_SetConfig+0x138>
 8003c58:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <UART_SetConfig+0xec>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c95 	.word	0x08003c95
 8003c64:	08003cad 	.word	0x08003cad
 8003c68:	08003cad 	.word	0x08003cad
 8003c6c:	08003cad 	.word	0x08003cad
 8003c70:	08003ca1 	.word	0x08003ca1
 8003c74:	08003cad 	.word	0x08003cad
 8003c78:	08003cad 	.word	0x08003cad
 8003c7c:	08003cad 	.word	0x08003cad
 8003c80:	08003c9b 	.word	0x08003c9b
 8003c84:	08003cad 	.word	0x08003cad
 8003c88:	08003cad 	.word	0x08003cad
 8003c8c:	08003cad 	.word	0x08003cad
 8003c90:	08003ca7 	.word	0x08003ca7
 8003c94:	2300      	movs	r3, #0
 8003c96:	76fb      	strb	r3, [r7, #27]
 8003c98:	e038      	b.n	8003d0c <UART_SetConfig+0x198>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	76fb      	strb	r3, [r7, #27]
 8003c9e:	e035      	b.n	8003d0c <UART_SetConfig+0x198>
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	76fb      	strb	r3, [r7, #27]
 8003ca4:	e032      	b.n	8003d0c <UART_SetConfig+0x198>
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	76fb      	strb	r3, [r7, #27]
 8003caa:	e02f      	b.n	8003d0c <UART_SetConfig+0x198>
 8003cac:	2310      	movs	r3, #16
 8003cae:	76fb      	strb	r3, [r7, #27]
 8003cb0:	bf00      	nop
 8003cb2:	e02b      	b.n	8003d0c <UART_SetConfig+0x198>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a6b      	ldr	r2, [pc, #428]	; (8003e68 <UART_SetConfig+0x2f4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d124      	bne.n	8003d08 <UART_SetConfig+0x194>
 8003cbe:	4b6c      	ldr	r3, [pc, #432]	; (8003e70 <UART_SetConfig+0x2fc>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ccc:	d012      	beq.n	8003cf4 <UART_SetConfig+0x180>
 8003cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd2:	d802      	bhi.n	8003cda <UART_SetConfig+0x166>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d007      	beq.n	8003ce8 <UART_SetConfig+0x174>
 8003cd8:	e012      	b.n	8003d00 <UART_SetConfig+0x18c>
 8003cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cde:	d006      	beq.n	8003cee <UART_SetConfig+0x17a>
 8003ce0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ce4:	d009      	beq.n	8003cfa <UART_SetConfig+0x186>
 8003ce6:	e00b      	b.n	8003d00 <UART_SetConfig+0x18c>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	76fb      	strb	r3, [r7, #27]
 8003cec:	e00e      	b.n	8003d0c <UART_SetConfig+0x198>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	76fb      	strb	r3, [r7, #27]
 8003cf2:	e00b      	b.n	8003d0c <UART_SetConfig+0x198>
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	76fb      	strb	r3, [r7, #27]
 8003cf8:	e008      	b.n	8003d0c <UART_SetConfig+0x198>
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	76fb      	strb	r3, [r7, #27]
 8003cfe:	e005      	b.n	8003d0c <UART_SetConfig+0x198>
 8003d00:	2310      	movs	r3, #16
 8003d02:	76fb      	strb	r3, [r7, #27]
 8003d04:	bf00      	nop
 8003d06:	e001      	b.n	8003d0c <UART_SetConfig+0x198>
 8003d08:	2310      	movs	r3, #16
 8003d0a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a55      	ldr	r2, [pc, #340]	; (8003e68 <UART_SetConfig+0x2f4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d174      	bne.n	8003e00 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d16:	7efb      	ldrb	r3, [r7, #27]
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d824      	bhi.n	8003d66 <UART_SetConfig+0x1f2>
 8003d1c:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <UART_SetConfig+0x1b0>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d49 	.word	0x08003d49
 8003d28:	08003d67 	.word	0x08003d67
 8003d2c:	08003d51 	.word	0x08003d51
 8003d30:	08003d67 	.word	0x08003d67
 8003d34:	08003d57 	.word	0x08003d57
 8003d38:	08003d67 	.word	0x08003d67
 8003d3c:	08003d67 	.word	0x08003d67
 8003d40:	08003d67 	.word	0x08003d67
 8003d44:	08003d5f 	.word	0x08003d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d48:	f7ff faa6 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8003d4c:	6178      	str	r0, [r7, #20]
        break;
 8003d4e:	e00f      	b.n	8003d70 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d50:	4b49      	ldr	r3, [pc, #292]	; (8003e78 <UART_SetConfig+0x304>)
 8003d52:	617b      	str	r3, [r7, #20]
        break;
 8003d54:	e00c      	b.n	8003d70 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d56:	f7ff fa09 	bl	800316c <HAL_RCC_GetSysClockFreq>
 8003d5a:	6178      	str	r0, [r7, #20]
        break;
 8003d5c:	e008      	b.n	8003d70 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d62:	617b      	str	r3, [r7, #20]
        break;
 8003d64:	e004      	b.n	8003d70 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	76bb      	strb	r3, [r7, #26]
        break;
 8003d6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8100 	beq.w	8003f78 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4413      	add	r3, r2
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d305      	bcc.n	8003d94 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d902      	bls.n	8003d9a <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	76bb      	strb	r3, [r7, #26]
 8003d98:	e0ee      	b.n	8003f78 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	f04f 0400 	mov.w	r4, #0
 8003daa:	0214      	lsls	r4, r2, #8
 8003dac:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003db0:	020b      	lsls	r3, r1, #8
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6852      	ldr	r2, [r2, #4]
 8003db6:	0852      	lsrs	r2, r2, #1
 8003db8:	4611      	mov	r1, r2
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	eb13 0b01 	adds.w	fp, r3, r1
 8003dc2:	eb44 0c02 	adc.w	ip, r4, r2
 8003dc6:	4658      	mov	r0, fp
 8003dc8:	4661      	mov	r1, ip
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f04f 0400 	mov.w	r4, #0
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	4623      	mov	r3, r4
 8003dd6:	f7fc ff67 	bl	8000ca8 <__aeabi_uldivmod>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	460c      	mov	r4, r1
 8003dde:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003de6:	d308      	bcc.n	8003dfa <UART_SetConfig+0x286>
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dee:	d204      	bcs.n	8003dfa <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	60da      	str	r2, [r3, #12]
 8003df8:	e0be      	b.n	8003f78 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	76bb      	strb	r3, [r7, #26]
 8003dfe:	e0bb      	b.n	8003f78 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e08:	d169      	bne.n	8003ede <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 8003e0a:	7efb      	ldrb	r3, [r7, #27]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d835      	bhi.n	8003e7c <UART_SetConfig+0x308>
 8003e10:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <UART_SetConfig+0x2a4>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e3d 	.word	0x08003e3d
 8003e1c:	08003e45 	.word	0x08003e45
 8003e20:	08003e4d 	.word	0x08003e4d
 8003e24:	08003e7d 	.word	0x08003e7d
 8003e28:	08003e53 	.word	0x08003e53
 8003e2c:	08003e7d 	.word	0x08003e7d
 8003e30:	08003e7d 	.word	0x08003e7d
 8003e34:	08003e7d 	.word	0x08003e7d
 8003e38:	08003e5b 	.word	0x08003e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e3c:	f7ff fa2c 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8003e40:	6178      	str	r0, [r7, #20]
        break;
 8003e42:	e020      	b.n	8003e86 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e44:	f7ff fa3e 	bl	80032c4 <HAL_RCC_GetPCLK2Freq>
 8003e48:	6178      	str	r0, [r7, #20]
        break;
 8003e4a:	e01c      	b.n	8003e86 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <UART_SetConfig+0x304>)
 8003e4e:	617b      	str	r3, [r7, #20]
        break;
 8003e50:	e019      	b.n	8003e86 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e52:	f7ff f98b 	bl	800316c <HAL_RCC_GetSysClockFreq>
 8003e56:	6178      	str	r0, [r7, #20]
        break;
 8003e58:	e015      	b.n	8003e86 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e5e:	617b      	str	r3, [r7, #20]
        break;
 8003e60:	e011      	b.n	8003e86 <UART_SetConfig+0x312>
 8003e62:	bf00      	nop
 8003e64:	efff69f3 	.word	0xefff69f3
 8003e68:	40008000 	.word	0x40008000
 8003e6c:	40013800 	.word	0x40013800
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40004400 	.word	0x40004400
 8003e78:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	76bb      	strb	r3, [r7, #26]
        break;
 8003e84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d075      	beq.n	8003f78 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	005a      	lsls	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	085b      	lsrs	r3, r3, #1
 8003e96:	441a      	add	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b0f      	cmp	r3, #15
 8003ea8:	d916      	bls.n	8003ed8 <UART_SetConfig+0x364>
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb0:	d212      	bcs.n	8003ed8 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	f023 030f 	bic.w	r3, r3, #15
 8003eba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	89fb      	ldrh	r3, [r7, #14]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	89fa      	ldrh	r2, [r7, #14]
 8003ed4:	60da      	str	r2, [r3, #12]
 8003ed6:	e04f      	b.n	8003f78 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	76bb      	strb	r3, [r7, #26]
 8003edc:	e04c      	b.n	8003f78 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ede:	7efb      	ldrb	r3, [r7, #27]
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d828      	bhi.n	8003f36 <UART_SetConfig+0x3c2>
 8003ee4:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <UART_SetConfig+0x378>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003f11 	.word	0x08003f11
 8003ef0:	08003f19 	.word	0x08003f19
 8003ef4:	08003f21 	.word	0x08003f21
 8003ef8:	08003f37 	.word	0x08003f37
 8003efc:	08003f27 	.word	0x08003f27
 8003f00:	08003f37 	.word	0x08003f37
 8003f04:	08003f37 	.word	0x08003f37
 8003f08:	08003f37 	.word	0x08003f37
 8003f0c:	08003f2f 	.word	0x08003f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f10:	f7ff f9c2 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8003f14:	6178      	str	r0, [r7, #20]
        break;
 8003f16:	e013      	b.n	8003f40 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f18:	f7ff f9d4 	bl	80032c4 <HAL_RCC_GetPCLK2Freq>
 8003f1c:	6178      	str	r0, [r7, #20]
        break;
 8003f1e:	e00f      	b.n	8003f40 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f20:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <UART_SetConfig+0x41c>)
 8003f22:	617b      	str	r3, [r7, #20]
        break;
 8003f24:	e00c      	b.n	8003f40 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f26:	f7ff f921 	bl	800316c <HAL_RCC_GetSysClockFreq>
 8003f2a:	6178      	str	r0, [r7, #20]
        break;
 8003f2c:	e008      	b.n	8003f40 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f32:	617b      	str	r3, [r7, #20]
        break;
 8003f34:	e004      	b.n	8003f40 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	76bb      	strb	r3, [r7, #26]
        break;
 8003f3e:	bf00      	nop
    }

    if (pclk != 0U)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d018      	beq.n	8003f78 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	085a      	lsrs	r2, r3, #1
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	441a      	add	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b0f      	cmp	r3, #15
 8003f60:	d908      	bls.n	8003f74 <UART_SetConfig+0x400>
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f68:	d204      	bcs.n	8003f74 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	e001      	b.n	8003f78 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003f84:	7ebb      	ldrb	r3, [r7, #26]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003f90:	00f42400 	.word	0x00f42400

08003f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01a      	beq.n	80040aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004092:	d10a      	bne.n	80040aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
  }
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af02      	add	r7, sp, #8
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80040e6:	f7fd fe5f 	bl	8001da8 <HAL_GetTick>
 80040ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d10e      	bne.n	8004118 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f82a 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e020      	b.n	800415a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b04      	cmp	r3, #4
 8004124:	d10e      	bne.n	8004144 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004126:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f814 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e00a      	b.n	800415a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	603b      	str	r3, [r7, #0]
 800416e:	4613      	mov	r3, r2
 8004170:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004172:	e05d      	b.n	8004230 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417a:	d059      	beq.n	8004230 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417c:	f7fd fe14 	bl	8001da8 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	429a      	cmp	r2, r3
 800418a:	d302      	bcc.n	8004192 <UART_WaitOnFlagUntilTimeout+0x30>
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d11b      	bne.n	80041ca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041a0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0201 	bic.w	r2, r2, #1
 80041b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2220      	movs	r2, #32
 80041bc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e042      	b.n	8004250 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d02b      	beq.n	8004230 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e6:	d123      	bne.n	8004230 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004200:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e00f      	b.n	8004250 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69da      	ldr	r2, [r3, #28]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4013      	ands	r3, r2
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	429a      	cmp	r2, r3
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	429a      	cmp	r2, r3
 800424c:	d092      	beq.n	8004174 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800426e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2220      	movs	r2, #32
 8004274:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004298:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0201 	bic.w	r2, r2, #1
 80042a8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	661a      	str	r2, [r3, #96]	; 0x60
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d11e      	bne.n	800431c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042f4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0201 	bic.w	r2, r2, #1
 8004304:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004314:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f7ff fc0b 	bl	8003b38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f7ff fc07 	bl	8003b4c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800433e:	bf00      	nop
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b086      	sub	sp, #24
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004358:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800435e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436a:	2b80      	cmp	r3, #128	; 0x80
 800436c:	d109      	bne.n	8004382 <UART_DMAError+0x3c>
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b21      	cmp	r3, #33	; 0x21
 8004372:	d106      	bne.n	8004382 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2200      	movs	r2, #0
 8004378:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800437c:	6978      	ldr	r0, [r7, #20]
 800437e:	f7ff ff6b 	bl	8004258 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438c:	2b40      	cmp	r3, #64	; 0x40
 800438e:	d109      	bne.n	80043a4 <UART_DMAError+0x5e>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b22      	cmp	r3, #34	; 0x22
 8004394:	d106      	bne.n	80043a4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2200      	movs	r2, #0
 800439a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800439e:	6978      	ldr	r0, [r7, #20]
 80043a0:	f7ff ff6f 	bl	8004282 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043a8:	f043 0210 	orr.w	r2, r3, #16
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043b0:	6978      	ldr	r0, [r7, #20]
 80043b2:	f7ff fbd5 	bl	8003b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043b6:	bf00      	nop
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <atof>:
 80043be:	2100      	movs	r1, #0
 80043c0:	f001 bcc2 	b.w	8005d48 <strtod>

080043c4 <atoi>:
 80043c4:	220a      	movs	r2, #10
 80043c6:	2100      	movs	r1, #0
 80043c8:	f001 bdb4 	b.w	8005f34 <strtol>

080043cc <__errno>:
 80043cc:	4b01      	ldr	r3, [pc, #4]	; (80043d4 <__errno+0x8>)
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	2000002c 	.word	0x2000002c

080043d8 <__libc_init_array>:
 80043d8:	b570      	push	{r4, r5, r6, lr}
 80043da:	4e0d      	ldr	r6, [pc, #52]	; (8004410 <__libc_init_array+0x38>)
 80043dc:	4c0d      	ldr	r4, [pc, #52]	; (8004414 <__libc_init_array+0x3c>)
 80043de:	1ba4      	subs	r4, r4, r6
 80043e0:	10a4      	asrs	r4, r4, #2
 80043e2:	2500      	movs	r5, #0
 80043e4:	42a5      	cmp	r5, r4
 80043e6:	d109      	bne.n	80043fc <__libc_init_array+0x24>
 80043e8:	4e0b      	ldr	r6, [pc, #44]	; (8004418 <__libc_init_array+0x40>)
 80043ea:	4c0c      	ldr	r4, [pc, #48]	; (800441c <__libc_init_array+0x44>)
 80043ec:	f003 fdda 	bl	8007fa4 <_init>
 80043f0:	1ba4      	subs	r4, r4, r6
 80043f2:	10a4      	asrs	r4, r4, #2
 80043f4:	2500      	movs	r5, #0
 80043f6:	42a5      	cmp	r5, r4
 80043f8:	d105      	bne.n	8004406 <__libc_init_array+0x2e>
 80043fa:	bd70      	pop	{r4, r5, r6, pc}
 80043fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004400:	4798      	blx	r3
 8004402:	3501      	adds	r5, #1
 8004404:	e7ee      	b.n	80043e4 <__libc_init_array+0xc>
 8004406:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800440a:	4798      	blx	r3
 800440c:	3501      	adds	r5, #1
 800440e:	e7f2      	b.n	80043f6 <__libc_init_array+0x1e>
 8004410:	08008408 	.word	0x08008408
 8004414:	08008408 	.word	0x08008408
 8004418:	08008408 	.word	0x08008408
 800441c:	0800840c 	.word	0x0800840c

08004420 <memset>:
 8004420:	4402      	add	r2, r0
 8004422:	4603      	mov	r3, r0
 8004424:	4293      	cmp	r3, r2
 8004426:	d100      	bne.n	800442a <memset+0xa>
 8004428:	4770      	bx	lr
 800442a:	f803 1b01 	strb.w	r1, [r3], #1
 800442e:	e7f9      	b.n	8004424 <memset+0x4>

08004430 <__cvt>:
 8004430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004434:	ec55 4b10 	vmov	r4, r5, d0
 8004438:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800443a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800443e:	2d00      	cmp	r5, #0
 8004440:	460e      	mov	r6, r1
 8004442:	4691      	mov	r9, r2
 8004444:	4619      	mov	r1, r3
 8004446:	bfb8      	it	lt
 8004448:	4622      	movlt	r2, r4
 800444a:	462b      	mov	r3, r5
 800444c:	f027 0720 	bic.w	r7, r7, #32
 8004450:	bfbb      	ittet	lt
 8004452:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004456:	461d      	movlt	r5, r3
 8004458:	2300      	movge	r3, #0
 800445a:	232d      	movlt	r3, #45	; 0x2d
 800445c:	bfb8      	it	lt
 800445e:	4614      	movlt	r4, r2
 8004460:	2f46      	cmp	r7, #70	; 0x46
 8004462:	700b      	strb	r3, [r1, #0]
 8004464:	d004      	beq.n	8004470 <__cvt+0x40>
 8004466:	2f45      	cmp	r7, #69	; 0x45
 8004468:	d100      	bne.n	800446c <__cvt+0x3c>
 800446a:	3601      	adds	r6, #1
 800446c:	2102      	movs	r1, #2
 800446e:	e000      	b.n	8004472 <__cvt+0x42>
 8004470:	2103      	movs	r1, #3
 8004472:	ab03      	add	r3, sp, #12
 8004474:	9301      	str	r3, [sp, #4]
 8004476:	ab02      	add	r3, sp, #8
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	4632      	mov	r2, r6
 800447c:	4653      	mov	r3, sl
 800447e:	ec45 4b10 	vmov	d0, r4, r5
 8004482:	f001 fdf9 	bl	8006078 <_dtoa_r>
 8004486:	2f47      	cmp	r7, #71	; 0x47
 8004488:	4680      	mov	r8, r0
 800448a:	d102      	bne.n	8004492 <__cvt+0x62>
 800448c:	f019 0f01 	tst.w	r9, #1
 8004490:	d026      	beq.n	80044e0 <__cvt+0xb0>
 8004492:	2f46      	cmp	r7, #70	; 0x46
 8004494:	eb08 0906 	add.w	r9, r8, r6
 8004498:	d111      	bne.n	80044be <__cvt+0x8e>
 800449a:	f898 3000 	ldrb.w	r3, [r8]
 800449e:	2b30      	cmp	r3, #48	; 0x30
 80044a0:	d10a      	bne.n	80044b8 <__cvt+0x88>
 80044a2:	2200      	movs	r2, #0
 80044a4:	2300      	movs	r3, #0
 80044a6:	4620      	mov	r0, r4
 80044a8:	4629      	mov	r1, r5
 80044aa:	f7fc fb1d 	bl	8000ae8 <__aeabi_dcmpeq>
 80044ae:	b918      	cbnz	r0, 80044b8 <__cvt+0x88>
 80044b0:	f1c6 0601 	rsb	r6, r6, #1
 80044b4:	f8ca 6000 	str.w	r6, [sl]
 80044b8:	f8da 3000 	ldr.w	r3, [sl]
 80044bc:	4499      	add	r9, r3
 80044be:	2200      	movs	r2, #0
 80044c0:	2300      	movs	r3, #0
 80044c2:	4620      	mov	r0, r4
 80044c4:	4629      	mov	r1, r5
 80044c6:	f7fc fb0f 	bl	8000ae8 <__aeabi_dcmpeq>
 80044ca:	b938      	cbnz	r0, 80044dc <__cvt+0xac>
 80044cc:	2230      	movs	r2, #48	; 0x30
 80044ce:	9b03      	ldr	r3, [sp, #12]
 80044d0:	454b      	cmp	r3, r9
 80044d2:	d205      	bcs.n	80044e0 <__cvt+0xb0>
 80044d4:	1c59      	adds	r1, r3, #1
 80044d6:	9103      	str	r1, [sp, #12]
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	e7f8      	b.n	80044ce <__cvt+0x9e>
 80044dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80044e0:	9b03      	ldr	r3, [sp, #12]
 80044e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044e4:	eba3 0308 	sub.w	r3, r3, r8
 80044e8:	4640      	mov	r0, r8
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	b004      	add	sp, #16
 80044ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080044f2 <__exponent>:
 80044f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044f4:	2900      	cmp	r1, #0
 80044f6:	4604      	mov	r4, r0
 80044f8:	bfba      	itte	lt
 80044fa:	4249      	neglt	r1, r1
 80044fc:	232d      	movlt	r3, #45	; 0x2d
 80044fe:	232b      	movge	r3, #43	; 0x2b
 8004500:	2909      	cmp	r1, #9
 8004502:	f804 2b02 	strb.w	r2, [r4], #2
 8004506:	7043      	strb	r3, [r0, #1]
 8004508:	dd20      	ble.n	800454c <__exponent+0x5a>
 800450a:	f10d 0307 	add.w	r3, sp, #7
 800450e:	461f      	mov	r7, r3
 8004510:	260a      	movs	r6, #10
 8004512:	fb91 f5f6 	sdiv	r5, r1, r6
 8004516:	fb06 1115 	mls	r1, r6, r5, r1
 800451a:	3130      	adds	r1, #48	; 0x30
 800451c:	2d09      	cmp	r5, #9
 800451e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004522:	f103 32ff 	add.w	r2, r3, #4294967295
 8004526:	4629      	mov	r1, r5
 8004528:	dc09      	bgt.n	800453e <__exponent+0x4c>
 800452a:	3130      	adds	r1, #48	; 0x30
 800452c:	3b02      	subs	r3, #2
 800452e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004532:	42bb      	cmp	r3, r7
 8004534:	4622      	mov	r2, r4
 8004536:	d304      	bcc.n	8004542 <__exponent+0x50>
 8004538:	1a10      	subs	r0, r2, r0
 800453a:	b003      	add	sp, #12
 800453c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800453e:	4613      	mov	r3, r2
 8004540:	e7e7      	b.n	8004512 <__exponent+0x20>
 8004542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004546:	f804 2b01 	strb.w	r2, [r4], #1
 800454a:	e7f2      	b.n	8004532 <__exponent+0x40>
 800454c:	2330      	movs	r3, #48	; 0x30
 800454e:	4419      	add	r1, r3
 8004550:	7083      	strb	r3, [r0, #2]
 8004552:	1d02      	adds	r2, r0, #4
 8004554:	70c1      	strb	r1, [r0, #3]
 8004556:	e7ef      	b.n	8004538 <__exponent+0x46>

08004558 <_printf_float>:
 8004558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800455c:	b08d      	sub	sp, #52	; 0x34
 800455e:	460c      	mov	r4, r1
 8004560:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004564:	4616      	mov	r6, r2
 8004566:	461f      	mov	r7, r3
 8004568:	4605      	mov	r5, r0
 800456a:	f002 fe69 	bl	8007240 <_localeconv_r>
 800456e:	6803      	ldr	r3, [r0, #0]
 8004570:	9304      	str	r3, [sp, #16]
 8004572:	4618      	mov	r0, r3
 8004574:	f7fb fe36 	bl	80001e4 <strlen>
 8004578:	2300      	movs	r3, #0
 800457a:	930a      	str	r3, [sp, #40]	; 0x28
 800457c:	f8d8 3000 	ldr.w	r3, [r8]
 8004580:	9005      	str	r0, [sp, #20]
 8004582:	3307      	adds	r3, #7
 8004584:	f023 0307 	bic.w	r3, r3, #7
 8004588:	f103 0208 	add.w	r2, r3, #8
 800458c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004590:	f8d4 b000 	ldr.w	fp, [r4]
 8004594:	f8c8 2000 	str.w	r2, [r8]
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80045a0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80045a4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80045a8:	9307      	str	r3, [sp, #28]
 80045aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80045ae:	f04f 32ff 	mov.w	r2, #4294967295
 80045b2:	4ba7      	ldr	r3, [pc, #668]	; (8004850 <_printf_float+0x2f8>)
 80045b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045b8:	f7fc fac8 	bl	8000b4c <__aeabi_dcmpun>
 80045bc:	bb70      	cbnz	r0, 800461c <_printf_float+0xc4>
 80045be:	f04f 32ff 	mov.w	r2, #4294967295
 80045c2:	4ba3      	ldr	r3, [pc, #652]	; (8004850 <_printf_float+0x2f8>)
 80045c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045c8:	f7fc faa2 	bl	8000b10 <__aeabi_dcmple>
 80045cc:	bb30      	cbnz	r0, 800461c <_printf_float+0xc4>
 80045ce:	2200      	movs	r2, #0
 80045d0:	2300      	movs	r3, #0
 80045d2:	4640      	mov	r0, r8
 80045d4:	4649      	mov	r1, r9
 80045d6:	f7fc fa91 	bl	8000afc <__aeabi_dcmplt>
 80045da:	b110      	cbz	r0, 80045e2 <_printf_float+0x8a>
 80045dc:	232d      	movs	r3, #45	; 0x2d
 80045de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045e2:	4a9c      	ldr	r2, [pc, #624]	; (8004854 <_printf_float+0x2fc>)
 80045e4:	4b9c      	ldr	r3, [pc, #624]	; (8004858 <_printf_float+0x300>)
 80045e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80045ea:	bf8c      	ite	hi
 80045ec:	4690      	movhi	r8, r2
 80045ee:	4698      	movls	r8, r3
 80045f0:	2303      	movs	r3, #3
 80045f2:	f02b 0204 	bic.w	r2, fp, #4
 80045f6:	6123      	str	r3, [r4, #16]
 80045f8:	6022      	str	r2, [r4, #0]
 80045fa:	f04f 0900 	mov.w	r9, #0
 80045fe:	9700      	str	r7, [sp, #0]
 8004600:	4633      	mov	r3, r6
 8004602:	aa0b      	add	r2, sp, #44	; 0x2c
 8004604:	4621      	mov	r1, r4
 8004606:	4628      	mov	r0, r5
 8004608:	f000 f9e6 	bl	80049d8 <_printf_common>
 800460c:	3001      	adds	r0, #1
 800460e:	f040 808d 	bne.w	800472c <_printf_float+0x1d4>
 8004612:	f04f 30ff 	mov.w	r0, #4294967295
 8004616:	b00d      	add	sp, #52	; 0x34
 8004618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800461c:	4642      	mov	r2, r8
 800461e:	464b      	mov	r3, r9
 8004620:	4640      	mov	r0, r8
 8004622:	4649      	mov	r1, r9
 8004624:	f7fc fa92 	bl	8000b4c <__aeabi_dcmpun>
 8004628:	b110      	cbz	r0, 8004630 <_printf_float+0xd8>
 800462a:	4a8c      	ldr	r2, [pc, #560]	; (800485c <_printf_float+0x304>)
 800462c:	4b8c      	ldr	r3, [pc, #560]	; (8004860 <_printf_float+0x308>)
 800462e:	e7da      	b.n	80045e6 <_printf_float+0x8e>
 8004630:	6861      	ldr	r1, [r4, #4]
 8004632:	1c4b      	adds	r3, r1, #1
 8004634:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004638:	a80a      	add	r0, sp, #40	; 0x28
 800463a:	d13e      	bne.n	80046ba <_printf_float+0x162>
 800463c:	2306      	movs	r3, #6
 800463e:	6063      	str	r3, [r4, #4]
 8004640:	2300      	movs	r3, #0
 8004642:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004646:	ab09      	add	r3, sp, #36	; 0x24
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	ec49 8b10 	vmov	d0, r8, r9
 800464e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004652:	6022      	str	r2, [r4, #0]
 8004654:	f8cd a004 	str.w	sl, [sp, #4]
 8004658:	6861      	ldr	r1, [r4, #4]
 800465a:	4628      	mov	r0, r5
 800465c:	f7ff fee8 	bl	8004430 <__cvt>
 8004660:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004664:	2b47      	cmp	r3, #71	; 0x47
 8004666:	4680      	mov	r8, r0
 8004668:	d109      	bne.n	800467e <_printf_float+0x126>
 800466a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800466c:	1cd8      	adds	r0, r3, #3
 800466e:	db02      	blt.n	8004676 <_printf_float+0x11e>
 8004670:	6862      	ldr	r2, [r4, #4]
 8004672:	4293      	cmp	r3, r2
 8004674:	dd47      	ble.n	8004706 <_printf_float+0x1ae>
 8004676:	f1aa 0a02 	sub.w	sl, sl, #2
 800467a:	fa5f fa8a 	uxtb.w	sl, sl
 800467e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004682:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004684:	d824      	bhi.n	80046d0 <_printf_float+0x178>
 8004686:	3901      	subs	r1, #1
 8004688:	4652      	mov	r2, sl
 800468a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800468e:	9109      	str	r1, [sp, #36]	; 0x24
 8004690:	f7ff ff2f 	bl	80044f2 <__exponent>
 8004694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004696:	1813      	adds	r3, r2, r0
 8004698:	2a01      	cmp	r2, #1
 800469a:	4681      	mov	r9, r0
 800469c:	6123      	str	r3, [r4, #16]
 800469e:	dc02      	bgt.n	80046a6 <_printf_float+0x14e>
 80046a0:	6822      	ldr	r2, [r4, #0]
 80046a2:	07d1      	lsls	r1, r2, #31
 80046a4:	d501      	bpl.n	80046aa <_printf_float+0x152>
 80046a6:	3301      	adds	r3, #1
 80046a8:	6123      	str	r3, [r4, #16]
 80046aa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0a5      	beq.n	80045fe <_printf_float+0xa6>
 80046b2:	232d      	movs	r3, #45	; 0x2d
 80046b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046b8:	e7a1      	b.n	80045fe <_printf_float+0xa6>
 80046ba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80046be:	f000 8177 	beq.w	80049b0 <_printf_float+0x458>
 80046c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80046c6:	d1bb      	bne.n	8004640 <_printf_float+0xe8>
 80046c8:	2900      	cmp	r1, #0
 80046ca:	d1b9      	bne.n	8004640 <_printf_float+0xe8>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e7b6      	b.n	800463e <_printf_float+0xe6>
 80046d0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80046d4:	d119      	bne.n	800470a <_printf_float+0x1b2>
 80046d6:	2900      	cmp	r1, #0
 80046d8:	6863      	ldr	r3, [r4, #4]
 80046da:	dd0c      	ble.n	80046f6 <_printf_float+0x19e>
 80046dc:	6121      	str	r1, [r4, #16]
 80046de:	b913      	cbnz	r3, 80046e6 <_printf_float+0x18e>
 80046e0:	6822      	ldr	r2, [r4, #0]
 80046e2:	07d2      	lsls	r2, r2, #31
 80046e4:	d502      	bpl.n	80046ec <_printf_float+0x194>
 80046e6:	3301      	adds	r3, #1
 80046e8:	440b      	add	r3, r1
 80046ea:	6123      	str	r3, [r4, #16]
 80046ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80046f0:	f04f 0900 	mov.w	r9, #0
 80046f4:	e7d9      	b.n	80046aa <_printf_float+0x152>
 80046f6:	b913      	cbnz	r3, 80046fe <_printf_float+0x1a6>
 80046f8:	6822      	ldr	r2, [r4, #0]
 80046fa:	07d0      	lsls	r0, r2, #31
 80046fc:	d501      	bpl.n	8004702 <_printf_float+0x1aa>
 80046fe:	3302      	adds	r3, #2
 8004700:	e7f3      	b.n	80046ea <_printf_float+0x192>
 8004702:	2301      	movs	r3, #1
 8004704:	e7f1      	b.n	80046ea <_printf_float+0x192>
 8004706:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800470a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800470e:	4293      	cmp	r3, r2
 8004710:	db05      	blt.n	800471e <_printf_float+0x1c6>
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	6123      	str	r3, [r4, #16]
 8004716:	07d1      	lsls	r1, r2, #31
 8004718:	d5e8      	bpl.n	80046ec <_printf_float+0x194>
 800471a:	3301      	adds	r3, #1
 800471c:	e7e5      	b.n	80046ea <_printf_float+0x192>
 800471e:	2b00      	cmp	r3, #0
 8004720:	bfd4      	ite	le
 8004722:	f1c3 0302 	rsble	r3, r3, #2
 8004726:	2301      	movgt	r3, #1
 8004728:	4413      	add	r3, r2
 800472a:	e7de      	b.n	80046ea <_printf_float+0x192>
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	055a      	lsls	r2, r3, #21
 8004730:	d407      	bmi.n	8004742 <_printf_float+0x1ea>
 8004732:	6923      	ldr	r3, [r4, #16]
 8004734:	4642      	mov	r2, r8
 8004736:	4631      	mov	r1, r6
 8004738:	4628      	mov	r0, r5
 800473a:	47b8      	blx	r7
 800473c:	3001      	adds	r0, #1
 800473e:	d12b      	bne.n	8004798 <_printf_float+0x240>
 8004740:	e767      	b.n	8004612 <_printf_float+0xba>
 8004742:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004746:	f240 80dc 	bls.w	8004902 <_printf_float+0x3aa>
 800474a:	2200      	movs	r2, #0
 800474c:	2300      	movs	r3, #0
 800474e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004752:	f7fc f9c9 	bl	8000ae8 <__aeabi_dcmpeq>
 8004756:	2800      	cmp	r0, #0
 8004758:	d033      	beq.n	80047c2 <_printf_float+0x26a>
 800475a:	2301      	movs	r3, #1
 800475c:	4a41      	ldr	r2, [pc, #260]	; (8004864 <_printf_float+0x30c>)
 800475e:	4631      	mov	r1, r6
 8004760:	4628      	mov	r0, r5
 8004762:	47b8      	blx	r7
 8004764:	3001      	adds	r0, #1
 8004766:	f43f af54 	beq.w	8004612 <_printf_float+0xba>
 800476a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800476e:	429a      	cmp	r2, r3
 8004770:	db02      	blt.n	8004778 <_printf_float+0x220>
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	07d8      	lsls	r0, r3, #31
 8004776:	d50f      	bpl.n	8004798 <_printf_float+0x240>
 8004778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800477c:	4631      	mov	r1, r6
 800477e:	4628      	mov	r0, r5
 8004780:	47b8      	blx	r7
 8004782:	3001      	adds	r0, #1
 8004784:	f43f af45 	beq.w	8004612 <_printf_float+0xba>
 8004788:	f04f 0800 	mov.w	r8, #0
 800478c:	f104 091a 	add.w	r9, r4, #26
 8004790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004792:	3b01      	subs	r3, #1
 8004794:	4543      	cmp	r3, r8
 8004796:	dc09      	bgt.n	80047ac <_printf_float+0x254>
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	079b      	lsls	r3, r3, #30
 800479c:	f100 8103 	bmi.w	80049a6 <_printf_float+0x44e>
 80047a0:	68e0      	ldr	r0, [r4, #12]
 80047a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047a4:	4298      	cmp	r0, r3
 80047a6:	bfb8      	it	lt
 80047a8:	4618      	movlt	r0, r3
 80047aa:	e734      	b.n	8004616 <_printf_float+0xbe>
 80047ac:	2301      	movs	r3, #1
 80047ae:	464a      	mov	r2, r9
 80047b0:	4631      	mov	r1, r6
 80047b2:	4628      	mov	r0, r5
 80047b4:	47b8      	blx	r7
 80047b6:	3001      	adds	r0, #1
 80047b8:	f43f af2b 	beq.w	8004612 <_printf_float+0xba>
 80047bc:	f108 0801 	add.w	r8, r8, #1
 80047c0:	e7e6      	b.n	8004790 <_printf_float+0x238>
 80047c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	dc2b      	bgt.n	8004820 <_printf_float+0x2c8>
 80047c8:	2301      	movs	r3, #1
 80047ca:	4a26      	ldr	r2, [pc, #152]	; (8004864 <_printf_float+0x30c>)
 80047cc:	4631      	mov	r1, r6
 80047ce:	4628      	mov	r0, r5
 80047d0:	47b8      	blx	r7
 80047d2:	3001      	adds	r0, #1
 80047d4:	f43f af1d 	beq.w	8004612 <_printf_float+0xba>
 80047d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047da:	b923      	cbnz	r3, 80047e6 <_printf_float+0x28e>
 80047dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047de:	b913      	cbnz	r3, 80047e6 <_printf_float+0x28e>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	07d9      	lsls	r1, r3, #31
 80047e4:	d5d8      	bpl.n	8004798 <_printf_float+0x240>
 80047e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047ea:	4631      	mov	r1, r6
 80047ec:	4628      	mov	r0, r5
 80047ee:	47b8      	blx	r7
 80047f0:	3001      	adds	r0, #1
 80047f2:	f43f af0e 	beq.w	8004612 <_printf_float+0xba>
 80047f6:	f04f 0900 	mov.w	r9, #0
 80047fa:	f104 0a1a 	add.w	sl, r4, #26
 80047fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004800:	425b      	negs	r3, r3
 8004802:	454b      	cmp	r3, r9
 8004804:	dc01      	bgt.n	800480a <_printf_float+0x2b2>
 8004806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004808:	e794      	b.n	8004734 <_printf_float+0x1dc>
 800480a:	2301      	movs	r3, #1
 800480c:	4652      	mov	r2, sl
 800480e:	4631      	mov	r1, r6
 8004810:	4628      	mov	r0, r5
 8004812:	47b8      	blx	r7
 8004814:	3001      	adds	r0, #1
 8004816:	f43f aefc 	beq.w	8004612 <_printf_float+0xba>
 800481a:	f109 0901 	add.w	r9, r9, #1
 800481e:	e7ee      	b.n	80047fe <_printf_float+0x2a6>
 8004820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004822:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004824:	429a      	cmp	r2, r3
 8004826:	bfa8      	it	ge
 8004828:	461a      	movge	r2, r3
 800482a:	2a00      	cmp	r2, #0
 800482c:	4691      	mov	r9, r2
 800482e:	dd07      	ble.n	8004840 <_printf_float+0x2e8>
 8004830:	4613      	mov	r3, r2
 8004832:	4631      	mov	r1, r6
 8004834:	4642      	mov	r2, r8
 8004836:	4628      	mov	r0, r5
 8004838:	47b8      	blx	r7
 800483a:	3001      	adds	r0, #1
 800483c:	f43f aee9 	beq.w	8004612 <_printf_float+0xba>
 8004840:	f104 031a 	add.w	r3, r4, #26
 8004844:	f04f 0b00 	mov.w	fp, #0
 8004848:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800484c:	9306      	str	r3, [sp, #24]
 800484e:	e015      	b.n	800487c <_printf_float+0x324>
 8004850:	7fefffff 	.word	0x7fefffff
 8004854:	08008150 	.word	0x08008150
 8004858:	0800814c 	.word	0x0800814c
 800485c:	08008158 	.word	0x08008158
 8004860:	08008154 	.word	0x08008154
 8004864:	0800815c 	.word	0x0800815c
 8004868:	2301      	movs	r3, #1
 800486a:	9a06      	ldr	r2, [sp, #24]
 800486c:	4631      	mov	r1, r6
 800486e:	4628      	mov	r0, r5
 8004870:	47b8      	blx	r7
 8004872:	3001      	adds	r0, #1
 8004874:	f43f aecd 	beq.w	8004612 <_printf_float+0xba>
 8004878:	f10b 0b01 	add.w	fp, fp, #1
 800487c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004880:	ebaa 0309 	sub.w	r3, sl, r9
 8004884:	455b      	cmp	r3, fp
 8004886:	dcef      	bgt.n	8004868 <_printf_float+0x310>
 8004888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800488c:	429a      	cmp	r2, r3
 800488e:	44d0      	add	r8, sl
 8004890:	db15      	blt.n	80048be <_printf_float+0x366>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	07da      	lsls	r2, r3, #31
 8004896:	d412      	bmi.n	80048be <_printf_float+0x366>
 8004898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800489a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800489c:	eba3 020a 	sub.w	r2, r3, sl
 80048a0:	eba3 0a01 	sub.w	sl, r3, r1
 80048a4:	4592      	cmp	sl, r2
 80048a6:	bfa8      	it	ge
 80048a8:	4692      	movge	sl, r2
 80048aa:	f1ba 0f00 	cmp.w	sl, #0
 80048ae:	dc0e      	bgt.n	80048ce <_printf_float+0x376>
 80048b0:	f04f 0800 	mov.w	r8, #0
 80048b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80048b8:	f104 091a 	add.w	r9, r4, #26
 80048bc:	e019      	b.n	80048f2 <_printf_float+0x39a>
 80048be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048c2:	4631      	mov	r1, r6
 80048c4:	4628      	mov	r0, r5
 80048c6:	47b8      	blx	r7
 80048c8:	3001      	adds	r0, #1
 80048ca:	d1e5      	bne.n	8004898 <_printf_float+0x340>
 80048cc:	e6a1      	b.n	8004612 <_printf_float+0xba>
 80048ce:	4653      	mov	r3, sl
 80048d0:	4642      	mov	r2, r8
 80048d2:	4631      	mov	r1, r6
 80048d4:	4628      	mov	r0, r5
 80048d6:	47b8      	blx	r7
 80048d8:	3001      	adds	r0, #1
 80048da:	d1e9      	bne.n	80048b0 <_printf_float+0x358>
 80048dc:	e699      	b.n	8004612 <_printf_float+0xba>
 80048de:	2301      	movs	r3, #1
 80048e0:	464a      	mov	r2, r9
 80048e2:	4631      	mov	r1, r6
 80048e4:	4628      	mov	r0, r5
 80048e6:	47b8      	blx	r7
 80048e8:	3001      	adds	r0, #1
 80048ea:	f43f ae92 	beq.w	8004612 <_printf_float+0xba>
 80048ee:	f108 0801 	add.w	r8, r8, #1
 80048f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	eba3 030a 	sub.w	r3, r3, sl
 80048fc:	4543      	cmp	r3, r8
 80048fe:	dcee      	bgt.n	80048de <_printf_float+0x386>
 8004900:	e74a      	b.n	8004798 <_printf_float+0x240>
 8004902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004904:	2a01      	cmp	r2, #1
 8004906:	dc01      	bgt.n	800490c <_printf_float+0x3b4>
 8004908:	07db      	lsls	r3, r3, #31
 800490a:	d53a      	bpl.n	8004982 <_printf_float+0x42a>
 800490c:	2301      	movs	r3, #1
 800490e:	4642      	mov	r2, r8
 8004910:	4631      	mov	r1, r6
 8004912:	4628      	mov	r0, r5
 8004914:	47b8      	blx	r7
 8004916:	3001      	adds	r0, #1
 8004918:	f43f ae7b 	beq.w	8004612 <_printf_float+0xba>
 800491c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004920:	4631      	mov	r1, r6
 8004922:	4628      	mov	r0, r5
 8004924:	47b8      	blx	r7
 8004926:	3001      	adds	r0, #1
 8004928:	f108 0801 	add.w	r8, r8, #1
 800492c:	f43f ae71 	beq.w	8004612 <_printf_float+0xba>
 8004930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004932:	2200      	movs	r2, #0
 8004934:	f103 3aff 	add.w	sl, r3, #4294967295
 8004938:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800493c:	2300      	movs	r3, #0
 800493e:	f7fc f8d3 	bl	8000ae8 <__aeabi_dcmpeq>
 8004942:	b9c8      	cbnz	r0, 8004978 <_printf_float+0x420>
 8004944:	4653      	mov	r3, sl
 8004946:	4642      	mov	r2, r8
 8004948:	4631      	mov	r1, r6
 800494a:	4628      	mov	r0, r5
 800494c:	47b8      	blx	r7
 800494e:	3001      	adds	r0, #1
 8004950:	d10e      	bne.n	8004970 <_printf_float+0x418>
 8004952:	e65e      	b.n	8004612 <_printf_float+0xba>
 8004954:	2301      	movs	r3, #1
 8004956:	4652      	mov	r2, sl
 8004958:	4631      	mov	r1, r6
 800495a:	4628      	mov	r0, r5
 800495c:	47b8      	blx	r7
 800495e:	3001      	adds	r0, #1
 8004960:	f43f ae57 	beq.w	8004612 <_printf_float+0xba>
 8004964:	f108 0801 	add.w	r8, r8, #1
 8004968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800496a:	3b01      	subs	r3, #1
 800496c:	4543      	cmp	r3, r8
 800496e:	dcf1      	bgt.n	8004954 <_printf_float+0x3fc>
 8004970:	464b      	mov	r3, r9
 8004972:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004976:	e6de      	b.n	8004736 <_printf_float+0x1de>
 8004978:	f04f 0800 	mov.w	r8, #0
 800497c:	f104 0a1a 	add.w	sl, r4, #26
 8004980:	e7f2      	b.n	8004968 <_printf_float+0x410>
 8004982:	2301      	movs	r3, #1
 8004984:	e7df      	b.n	8004946 <_printf_float+0x3ee>
 8004986:	2301      	movs	r3, #1
 8004988:	464a      	mov	r2, r9
 800498a:	4631      	mov	r1, r6
 800498c:	4628      	mov	r0, r5
 800498e:	47b8      	blx	r7
 8004990:	3001      	adds	r0, #1
 8004992:	f43f ae3e 	beq.w	8004612 <_printf_float+0xba>
 8004996:	f108 0801 	add.w	r8, r8, #1
 800499a:	68e3      	ldr	r3, [r4, #12]
 800499c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800499e:	1a9b      	subs	r3, r3, r2
 80049a0:	4543      	cmp	r3, r8
 80049a2:	dcf0      	bgt.n	8004986 <_printf_float+0x42e>
 80049a4:	e6fc      	b.n	80047a0 <_printf_float+0x248>
 80049a6:	f04f 0800 	mov.w	r8, #0
 80049aa:	f104 0919 	add.w	r9, r4, #25
 80049ae:	e7f4      	b.n	800499a <_printf_float+0x442>
 80049b0:	2900      	cmp	r1, #0
 80049b2:	f43f ae8b 	beq.w	80046cc <_printf_float+0x174>
 80049b6:	2300      	movs	r3, #0
 80049b8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80049bc:	ab09      	add	r3, sp, #36	; 0x24
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	ec49 8b10 	vmov	d0, r8, r9
 80049c4:	6022      	str	r2, [r4, #0]
 80049c6:	f8cd a004 	str.w	sl, [sp, #4]
 80049ca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80049ce:	4628      	mov	r0, r5
 80049d0:	f7ff fd2e 	bl	8004430 <__cvt>
 80049d4:	4680      	mov	r8, r0
 80049d6:	e648      	b.n	800466a <_printf_float+0x112>

080049d8 <_printf_common>:
 80049d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049dc:	4691      	mov	r9, r2
 80049de:	461f      	mov	r7, r3
 80049e0:	688a      	ldr	r2, [r1, #8]
 80049e2:	690b      	ldr	r3, [r1, #16]
 80049e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049e8:	4293      	cmp	r3, r2
 80049ea:	bfb8      	it	lt
 80049ec:	4613      	movlt	r3, r2
 80049ee:	f8c9 3000 	str.w	r3, [r9]
 80049f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049f6:	4606      	mov	r6, r0
 80049f8:	460c      	mov	r4, r1
 80049fa:	b112      	cbz	r2, 8004a02 <_printf_common+0x2a>
 80049fc:	3301      	adds	r3, #1
 80049fe:	f8c9 3000 	str.w	r3, [r9]
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	0699      	lsls	r1, r3, #26
 8004a06:	bf42      	ittt	mi
 8004a08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a0c:	3302      	addmi	r3, #2
 8004a0e:	f8c9 3000 	strmi.w	r3, [r9]
 8004a12:	6825      	ldr	r5, [r4, #0]
 8004a14:	f015 0506 	ands.w	r5, r5, #6
 8004a18:	d107      	bne.n	8004a2a <_printf_common+0x52>
 8004a1a:	f104 0a19 	add.w	sl, r4, #25
 8004a1e:	68e3      	ldr	r3, [r4, #12]
 8004a20:	f8d9 2000 	ldr.w	r2, [r9]
 8004a24:	1a9b      	subs	r3, r3, r2
 8004a26:	42ab      	cmp	r3, r5
 8004a28:	dc28      	bgt.n	8004a7c <_printf_common+0xa4>
 8004a2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a2e:	6822      	ldr	r2, [r4, #0]
 8004a30:	3300      	adds	r3, #0
 8004a32:	bf18      	it	ne
 8004a34:	2301      	movne	r3, #1
 8004a36:	0692      	lsls	r2, r2, #26
 8004a38:	d42d      	bmi.n	8004a96 <_printf_common+0xbe>
 8004a3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a3e:	4639      	mov	r1, r7
 8004a40:	4630      	mov	r0, r6
 8004a42:	47c0      	blx	r8
 8004a44:	3001      	adds	r0, #1
 8004a46:	d020      	beq.n	8004a8a <_printf_common+0xb2>
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	68e5      	ldr	r5, [r4, #12]
 8004a4c:	f8d9 2000 	ldr.w	r2, [r9]
 8004a50:	f003 0306 	and.w	r3, r3, #6
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	bf08      	it	eq
 8004a58:	1aad      	subeq	r5, r5, r2
 8004a5a:	68a3      	ldr	r3, [r4, #8]
 8004a5c:	6922      	ldr	r2, [r4, #16]
 8004a5e:	bf0c      	ite	eq
 8004a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a64:	2500      	movne	r5, #0
 8004a66:	4293      	cmp	r3, r2
 8004a68:	bfc4      	itt	gt
 8004a6a:	1a9b      	subgt	r3, r3, r2
 8004a6c:	18ed      	addgt	r5, r5, r3
 8004a6e:	f04f 0900 	mov.w	r9, #0
 8004a72:	341a      	adds	r4, #26
 8004a74:	454d      	cmp	r5, r9
 8004a76:	d11a      	bne.n	8004aae <_printf_common+0xd6>
 8004a78:	2000      	movs	r0, #0
 8004a7a:	e008      	b.n	8004a8e <_printf_common+0xb6>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	4652      	mov	r2, sl
 8004a80:	4639      	mov	r1, r7
 8004a82:	4630      	mov	r0, r6
 8004a84:	47c0      	blx	r8
 8004a86:	3001      	adds	r0, #1
 8004a88:	d103      	bne.n	8004a92 <_printf_common+0xba>
 8004a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a92:	3501      	adds	r5, #1
 8004a94:	e7c3      	b.n	8004a1e <_printf_common+0x46>
 8004a96:	18e1      	adds	r1, r4, r3
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	2030      	movs	r0, #48	; 0x30
 8004a9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004aa0:	4422      	add	r2, r4
 8004aa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aa6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004aaa:	3302      	adds	r3, #2
 8004aac:	e7c5      	b.n	8004a3a <_printf_common+0x62>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	4639      	mov	r1, r7
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	47c0      	blx	r8
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d0e6      	beq.n	8004a8a <_printf_common+0xb2>
 8004abc:	f109 0901 	add.w	r9, r9, #1
 8004ac0:	e7d8      	b.n	8004a74 <_printf_common+0x9c>
	...

08004ac4 <_printf_i>:
 8004ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ac8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004acc:	460c      	mov	r4, r1
 8004ace:	7e09      	ldrb	r1, [r1, #24]
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	296e      	cmp	r1, #110	; 0x6e
 8004ad4:	4617      	mov	r7, r2
 8004ad6:	4606      	mov	r6, r0
 8004ad8:	4698      	mov	r8, r3
 8004ada:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004adc:	f000 80b3 	beq.w	8004c46 <_printf_i+0x182>
 8004ae0:	d822      	bhi.n	8004b28 <_printf_i+0x64>
 8004ae2:	2963      	cmp	r1, #99	; 0x63
 8004ae4:	d036      	beq.n	8004b54 <_printf_i+0x90>
 8004ae6:	d80a      	bhi.n	8004afe <_printf_i+0x3a>
 8004ae8:	2900      	cmp	r1, #0
 8004aea:	f000 80b9 	beq.w	8004c60 <_printf_i+0x19c>
 8004aee:	2958      	cmp	r1, #88	; 0x58
 8004af0:	f000 8083 	beq.w	8004bfa <_printf_i+0x136>
 8004af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004af8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004afc:	e032      	b.n	8004b64 <_printf_i+0xa0>
 8004afe:	2964      	cmp	r1, #100	; 0x64
 8004b00:	d001      	beq.n	8004b06 <_printf_i+0x42>
 8004b02:	2969      	cmp	r1, #105	; 0x69
 8004b04:	d1f6      	bne.n	8004af4 <_printf_i+0x30>
 8004b06:	6820      	ldr	r0, [r4, #0]
 8004b08:	6813      	ldr	r3, [r2, #0]
 8004b0a:	0605      	lsls	r5, r0, #24
 8004b0c:	f103 0104 	add.w	r1, r3, #4
 8004b10:	d52a      	bpl.n	8004b68 <_printf_i+0xa4>
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6011      	str	r1, [r2, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	da03      	bge.n	8004b22 <_printf_i+0x5e>
 8004b1a:	222d      	movs	r2, #45	; 0x2d
 8004b1c:	425b      	negs	r3, r3
 8004b1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b22:	486f      	ldr	r0, [pc, #444]	; (8004ce0 <_printf_i+0x21c>)
 8004b24:	220a      	movs	r2, #10
 8004b26:	e039      	b.n	8004b9c <_printf_i+0xd8>
 8004b28:	2973      	cmp	r1, #115	; 0x73
 8004b2a:	f000 809d 	beq.w	8004c68 <_printf_i+0x1a4>
 8004b2e:	d808      	bhi.n	8004b42 <_printf_i+0x7e>
 8004b30:	296f      	cmp	r1, #111	; 0x6f
 8004b32:	d020      	beq.n	8004b76 <_printf_i+0xb2>
 8004b34:	2970      	cmp	r1, #112	; 0x70
 8004b36:	d1dd      	bne.n	8004af4 <_printf_i+0x30>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	f043 0320 	orr.w	r3, r3, #32
 8004b3e:	6023      	str	r3, [r4, #0]
 8004b40:	e003      	b.n	8004b4a <_printf_i+0x86>
 8004b42:	2975      	cmp	r1, #117	; 0x75
 8004b44:	d017      	beq.n	8004b76 <_printf_i+0xb2>
 8004b46:	2978      	cmp	r1, #120	; 0x78
 8004b48:	d1d4      	bne.n	8004af4 <_printf_i+0x30>
 8004b4a:	2378      	movs	r3, #120	; 0x78
 8004b4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b50:	4864      	ldr	r0, [pc, #400]	; (8004ce4 <_printf_i+0x220>)
 8004b52:	e055      	b.n	8004c00 <_printf_i+0x13c>
 8004b54:	6813      	ldr	r3, [r2, #0]
 8004b56:	1d19      	adds	r1, r3, #4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6011      	str	r1, [r2, #0]
 8004b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b64:	2301      	movs	r3, #1
 8004b66:	e08c      	b.n	8004c82 <_printf_i+0x1be>
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6011      	str	r1, [r2, #0]
 8004b6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b70:	bf18      	it	ne
 8004b72:	b21b      	sxthne	r3, r3
 8004b74:	e7cf      	b.n	8004b16 <_printf_i+0x52>
 8004b76:	6813      	ldr	r3, [r2, #0]
 8004b78:	6825      	ldr	r5, [r4, #0]
 8004b7a:	1d18      	adds	r0, r3, #4
 8004b7c:	6010      	str	r0, [r2, #0]
 8004b7e:	0628      	lsls	r0, r5, #24
 8004b80:	d501      	bpl.n	8004b86 <_printf_i+0xc2>
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	e002      	b.n	8004b8c <_printf_i+0xc8>
 8004b86:	0668      	lsls	r0, r5, #25
 8004b88:	d5fb      	bpl.n	8004b82 <_printf_i+0xbe>
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	4854      	ldr	r0, [pc, #336]	; (8004ce0 <_printf_i+0x21c>)
 8004b8e:	296f      	cmp	r1, #111	; 0x6f
 8004b90:	bf14      	ite	ne
 8004b92:	220a      	movne	r2, #10
 8004b94:	2208      	moveq	r2, #8
 8004b96:	2100      	movs	r1, #0
 8004b98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b9c:	6865      	ldr	r5, [r4, #4]
 8004b9e:	60a5      	str	r5, [r4, #8]
 8004ba0:	2d00      	cmp	r5, #0
 8004ba2:	f2c0 8095 	blt.w	8004cd0 <_printf_i+0x20c>
 8004ba6:	6821      	ldr	r1, [r4, #0]
 8004ba8:	f021 0104 	bic.w	r1, r1, #4
 8004bac:	6021      	str	r1, [r4, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d13d      	bne.n	8004c2e <_printf_i+0x16a>
 8004bb2:	2d00      	cmp	r5, #0
 8004bb4:	f040 808e 	bne.w	8004cd4 <_printf_i+0x210>
 8004bb8:	4665      	mov	r5, ip
 8004bba:	2a08      	cmp	r2, #8
 8004bbc:	d10b      	bne.n	8004bd6 <_printf_i+0x112>
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	07db      	lsls	r3, r3, #31
 8004bc2:	d508      	bpl.n	8004bd6 <_printf_i+0x112>
 8004bc4:	6923      	ldr	r3, [r4, #16]
 8004bc6:	6862      	ldr	r2, [r4, #4]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	bfde      	ittt	le
 8004bcc:	2330      	movle	r3, #48	; 0x30
 8004bce:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bd2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bd6:	ebac 0305 	sub.w	r3, ip, r5
 8004bda:	6123      	str	r3, [r4, #16]
 8004bdc:	f8cd 8000 	str.w	r8, [sp]
 8004be0:	463b      	mov	r3, r7
 8004be2:	aa03      	add	r2, sp, #12
 8004be4:	4621      	mov	r1, r4
 8004be6:	4630      	mov	r0, r6
 8004be8:	f7ff fef6 	bl	80049d8 <_printf_common>
 8004bec:	3001      	adds	r0, #1
 8004bee:	d14d      	bne.n	8004c8c <_printf_i+0x1c8>
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	b005      	add	sp, #20
 8004bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bfa:	4839      	ldr	r0, [pc, #228]	; (8004ce0 <_printf_i+0x21c>)
 8004bfc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c00:	6813      	ldr	r3, [r2, #0]
 8004c02:	6821      	ldr	r1, [r4, #0]
 8004c04:	1d1d      	adds	r5, r3, #4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6015      	str	r5, [r2, #0]
 8004c0a:	060a      	lsls	r2, r1, #24
 8004c0c:	d50b      	bpl.n	8004c26 <_printf_i+0x162>
 8004c0e:	07ca      	lsls	r2, r1, #31
 8004c10:	bf44      	itt	mi
 8004c12:	f041 0120 	orrmi.w	r1, r1, #32
 8004c16:	6021      	strmi	r1, [r4, #0]
 8004c18:	b91b      	cbnz	r3, 8004c22 <_printf_i+0x15e>
 8004c1a:	6822      	ldr	r2, [r4, #0]
 8004c1c:	f022 0220 	bic.w	r2, r2, #32
 8004c20:	6022      	str	r2, [r4, #0]
 8004c22:	2210      	movs	r2, #16
 8004c24:	e7b7      	b.n	8004b96 <_printf_i+0xd2>
 8004c26:	064d      	lsls	r5, r1, #25
 8004c28:	bf48      	it	mi
 8004c2a:	b29b      	uxthmi	r3, r3
 8004c2c:	e7ef      	b.n	8004c0e <_printf_i+0x14a>
 8004c2e:	4665      	mov	r5, ip
 8004c30:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c34:	fb02 3311 	mls	r3, r2, r1, r3
 8004c38:	5cc3      	ldrb	r3, [r0, r3]
 8004c3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c3e:	460b      	mov	r3, r1
 8004c40:	2900      	cmp	r1, #0
 8004c42:	d1f5      	bne.n	8004c30 <_printf_i+0x16c>
 8004c44:	e7b9      	b.n	8004bba <_printf_i+0xf6>
 8004c46:	6813      	ldr	r3, [r2, #0]
 8004c48:	6825      	ldr	r5, [r4, #0]
 8004c4a:	6961      	ldr	r1, [r4, #20]
 8004c4c:	1d18      	adds	r0, r3, #4
 8004c4e:	6010      	str	r0, [r2, #0]
 8004c50:	0628      	lsls	r0, r5, #24
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	d501      	bpl.n	8004c5a <_printf_i+0x196>
 8004c56:	6019      	str	r1, [r3, #0]
 8004c58:	e002      	b.n	8004c60 <_printf_i+0x19c>
 8004c5a:	066a      	lsls	r2, r5, #25
 8004c5c:	d5fb      	bpl.n	8004c56 <_printf_i+0x192>
 8004c5e:	8019      	strh	r1, [r3, #0]
 8004c60:	2300      	movs	r3, #0
 8004c62:	6123      	str	r3, [r4, #16]
 8004c64:	4665      	mov	r5, ip
 8004c66:	e7b9      	b.n	8004bdc <_printf_i+0x118>
 8004c68:	6813      	ldr	r3, [r2, #0]
 8004c6a:	1d19      	adds	r1, r3, #4
 8004c6c:	6011      	str	r1, [r2, #0]
 8004c6e:	681d      	ldr	r5, [r3, #0]
 8004c70:	6862      	ldr	r2, [r4, #4]
 8004c72:	2100      	movs	r1, #0
 8004c74:	4628      	mov	r0, r5
 8004c76:	f7fb fac3 	bl	8000200 <memchr>
 8004c7a:	b108      	cbz	r0, 8004c80 <_printf_i+0x1bc>
 8004c7c:	1b40      	subs	r0, r0, r5
 8004c7e:	6060      	str	r0, [r4, #4]
 8004c80:	6863      	ldr	r3, [r4, #4]
 8004c82:	6123      	str	r3, [r4, #16]
 8004c84:	2300      	movs	r3, #0
 8004c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c8a:	e7a7      	b.n	8004bdc <_printf_i+0x118>
 8004c8c:	6923      	ldr	r3, [r4, #16]
 8004c8e:	462a      	mov	r2, r5
 8004c90:	4639      	mov	r1, r7
 8004c92:	4630      	mov	r0, r6
 8004c94:	47c0      	blx	r8
 8004c96:	3001      	adds	r0, #1
 8004c98:	d0aa      	beq.n	8004bf0 <_printf_i+0x12c>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	079b      	lsls	r3, r3, #30
 8004c9e:	d413      	bmi.n	8004cc8 <_printf_i+0x204>
 8004ca0:	68e0      	ldr	r0, [r4, #12]
 8004ca2:	9b03      	ldr	r3, [sp, #12]
 8004ca4:	4298      	cmp	r0, r3
 8004ca6:	bfb8      	it	lt
 8004ca8:	4618      	movlt	r0, r3
 8004caa:	e7a3      	b.n	8004bf4 <_printf_i+0x130>
 8004cac:	2301      	movs	r3, #1
 8004cae:	464a      	mov	r2, r9
 8004cb0:	4639      	mov	r1, r7
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	47c0      	blx	r8
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	d09a      	beq.n	8004bf0 <_printf_i+0x12c>
 8004cba:	3501      	adds	r5, #1
 8004cbc:	68e3      	ldr	r3, [r4, #12]
 8004cbe:	9a03      	ldr	r2, [sp, #12]
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	42ab      	cmp	r3, r5
 8004cc4:	dcf2      	bgt.n	8004cac <_printf_i+0x1e8>
 8004cc6:	e7eb      	b.n	8004ca0 <_printf_i+0x1dc>
 8004cc8:	2500      	movs	r5, #0
 8004cca:	f104 0919 	add.w	r9, r4, #25
 8004cce:	e7f5      	b.n	8004cbc <_printf_i+0x1f8>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1ac      	bne.n	8004c2e <_printf_i+0x16a>
 8004cd4:	7803      	ldrb	r3, [r0, #0]
 8004cd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cde:	e76c      	b.n	8004bba <_printf_i+0xf6>
 8004ce0:	0800815e 	.word	0x0800815e
 8004ce4:	0800816f 	.word	0x0800816f

08004ce8 <_scanf_float>:
 8004ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cec:	469a      	mov	sl, r3
 8004cee:	688b      	ldr	r3, [r1, #8]
 8004cf0:	4616      	mov	r6, r2
 8004cf2:	1e5a      	subs	r2, r3, #1
 8004cf4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004cf8:	b087      	sub	sp, #28
 8004cfa:	bf83      	ittte	hi
 8004cfc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004d00:	189b      	addhi	r3, r3, r2
 8004d02:	9301      	strhi	r3, [sp, #4]
 8004d04:	2300      	movls	r3, #0
 8004d06:	bf86      	itte	hi
 8004d08:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004d0c:	608b      	strhi	r3, [r1, #8]
 8004d0e:	9301      	strls	r3, [sp, #4]
 8004d10:	680b      	ldr	r3, [r1, #0]
 8004d12:	4688      	mov	r8, r1
 8004d14:	f04f 0b00 	mov.w	fp, #0
 8004d18:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004d1c:	f848 3b1c 	str.w	r3, [r8], #28
 8004d20:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004d24:	4607      	mov	r7, r0
 8004d26:	460c      	mov	r4, r1
 8004d28:	4645      	mov	r5, r8
 8004d2a:	465a      	mov	r2, fp
 8004d2c:	46d9      	mov	r9, fp
 8004d2e:	f8cd b008 	str.w	fp, [sp, #8]
 8004d32:	68a1      	ldr	r1, [r4, #8]
 8004d34:	b181      	cbz	r1, 8004d58 <_scanf_float+0x70>
 8004d36:	6833      	ldr	r3, [r6, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b49      	cmp	r3, #73	; 0x49
 8004d3c:	d071      	beq.n	8004e22 <_scanf_float+0x13a>
 8004d3e:	d84d      	bhi.n	8004ddc <_scanf_float+0xf4>
 8004d40:	2b39      	cmp	r3, #57	; 0x39
 8004d42:	d840      	bhi.n	8004dc6 <_scanf_float+0xde>
 8004d44:	2b31      	cmp	r3, #49	; 0x31
 8004d46:	f080 8088 	bcs.w	8004e5a <_scanf_float+0x172>
 8004d4a:	2b2d      	cmp	r3, #45	; 0x2d
 8004d4c:	f000 8090 	beq.w	8004e70 <_scanf_float+0x188>
 8004d50:	d815      	bhi.n	8004d7e <_scanf_float+0x96>
 8004d52:	2b2b      	cmp	r3, #43	; 0x2b
 8004d54:	f000 808c 	beq.w	8004e70 <_scanf_float+0x188>
 8004d58:	f1b9 0f00 	cmp.w	r9, #0
 8004d5c:	d003      	beq.n	8004d66 <_scanf_float+0x7e>
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	3a01      	subs	r2, #1
 8004d68:	2a01      	cmp	r2, #1
 8004d6a:	f200 80ea 	bhi.w	8004f42 <_scanf_float+0x25a>
 8004d6e:	4545      	cmp	r5, r8
 8004d70:	f200 80dc 	bhi.w	8004f2c <_scanf_float+0x244>
 8004d74:	2601      	movs	r6, #1
 8004d76:	4630      	mov	r0, r6
 8004d78:	b007      	add	sp, #28
 8004d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8004d80:	f000 809f 	beq.w	8004ec2 <_scanf_float+0x1da>
 8004d84:	2b30      	cmp	r3, #48	; 0x30
 8004d86:	d1e7      	bne.n	8004d58 <_scanf_float+0x70>
 8004d88:	6820      	ldr	r0, [r4, #0]
 8004d8a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004d8e:	d064      	beq.n	8004e5a <_scanf_float+0x172>
 8004d90:	9b01      	ldr	r3, [sp, #4]
 8004d92:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004d96:	6020      	str	r0, [r4, #0]
 8004d98:	f109 0901 	add.w	r9, r9, #1
 8004d9c:	b11b      	cbz	r3, 8004da6 <_scanf_float+0xbe>
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	3101      	adds	r1, #1
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	60a1      	str	r1, [r4, #8]
 8004da6:	68a3      	ldr	r3, [r4, #8]
 8004da8:	3b01      	subs	r3, #1
 8004daa:	60a3      	str	r3, [r4, #8]
 8004dac:	6923      	ldr	r3, [r4, #16]
 8004dae:	3301      	adds	r3, #1
 8004db0:	6123      	str	r3, [r4, #16]
 8004db2:	6873      	ldr	r3, [r6, #4]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	6073      	str	r3, [r6, #4]
 8004dba:	f340 80ac 	ble.w	8004f16 <_scanf_float+0x22e>
 8004dbe:	6833      	ldr	r3, [r6, #0]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	6033      	str	r3, [r6, #0]
 8004dc4:	e7b5      	b.n	8004d32 <_scanf_float+0x4a>
 8004dc6:	2b45      	cmp	r3, #69	; 0x45
 8004dc8:	f000 8085 	beq.w	8004ed6 <_scanf_float+0x1ee>
 8004dcc:	2b46      	cmp	r3, #70	; 0x46
 8004dce:	d06a      	beq.n	8004ea6 <_scanf_float+0x1be>
 8004dd0:	2b41      	cmp	r3, #65	; 0x41
 8004dd2:	d1c1      	bne.n	8004d58 <_scanf_float+0x70>
 8004dd4:	2a01      	cmp	r2, #1
 8004dd6:	d1bf      	bne.n	8004d58 <_scanf_float+0x70>
 8004dd8:	2202      	movs	r2, #2
 8004dda:	e046      	b.n	8004e6a <_scanf_float+0x182>
 8004ddc:	2b65      	cmp	r3, #101	; 0x65
 8004dde:	d07a      	beq.n	8004ed6 <_scanf_float+0x1ee>
 8004de0:	d818      	bhi.n	8004e14 <_scanf_float+0x12c>
 8004de2:	2b54      	cmp	r3, #84	; 0x54
 8004de4:	d066      	beq.n	8004eb4 <_scanf_float+0x1cc>
 8004de6:	d811      	bhi.n	8004e0c <_scanf_float+0x124>
 8004de8:	2b4e      	cmp	r3, #78	; 0x4e
 8004dea:	d1b5      	bne.n	8004d58 <_scanf_float+0x70>
 8004dec:	2a00      	cmp	r2, #0
 8004dee:	d146      	bne.n	8004e7e <_scanf_float+0x196>
 8004df0:	f1b9 0f00 	cmp.w	r9, #0
 8004df4:	d145      	bne.n	8004e82 <_scanf_float+0x19a>
 8004df6:	6821      	ldr	r1, [r4, #0]
 8004df8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004dfc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004e00:	d13f      	bne.n	8004e82 <_scanf_float+0x19a>
 8004e02:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004e06:	6021      	str	r1, [r4, #0]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	e02e      	b.n	8004e6a <_scanf_float+0x182>
 8004e0c:	2b59      	cmp	r3, #89	; 0x59
 8004e0e:	d01e      	beq.n	8004e4e <_scanf_float+0x166>
 8004e10:	2b61      	cmp	r3, #97	; 0x61
 8004e12:	e7de      	b.n	8004dd2 <_scanf_float+0xea>
 8004e14:	2b6e      	cmp	r3, #110	; 0x6e
 8004e16:	d0e9      	beq.n	8004dec <_scanf_float+0x104>
 8004e18:	d815      	bhi.n	8004e46 <_scanf_float+0x15e>
 8004e1a:	2b66      	cmp	r3, #102	; 0x66
 8004e1c:	d043      	beq.n	8004ea6 <_scanf_float+0x1be>
 8004e1e:	2b69      	cmp	r3, #105	; 0x69
 8004e20:	d19a      	bne.n	8004d58 <_scanf_float+0x70>
 8004e22:	f1bb 0f00 	cmp.w	fp, #0
 8004e26:	d138      	bne.n	8004e9a <_scanf_float+0x1b2>
 8004e28:	f1b9 0f00 	cmp.w	r9, #0
 8004e2c:	d197      	bne.n	8004d5e <_scanf_float+0x76>
 8004e2e:	6821      	ldr	r1, [r4, #0]
 8004e30:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004e34:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004e38:	d195      	bne.n	8004d66 <_scanf_float+0x7e>
 8004e3a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004e3e:	6021      	str	r1, [r4, #0]
 8004e40:	f04f 0b01 	mov.w	fp, #1
 8004e44:	e011      	b.n	8004e6a <_scanf_float+0x182>
 8004e46:	2b74      	cmp	r3, #116	; 0x74
 8004e48:	d034      	beq.n	8004eb4 <_scanf_float+0x1cc>
 8004e4a:	2b79      	cmp	r3, #121	; 0x79
 8004e4c:	d184      	bne.n	8004d58 <_scanf_float+0x70>
 8004e4e:	f1bb 0f07 	cmp.w	fp, #7
 8004e52:	d181      	bne.n	8004d58 <_scanf_float+0x70>
 8004e54:	f04f 0b08 	mov.w	fp, #8
 8004e58:	e007      	b.n	8004e6a <_scanf_float+0x182>
 8004e5a:	eb12 0f0b 	cmn.w	r2, fp
 8004e5e:	f47f af7b 	bne.w	8004d58 <_scanf_float+0x70>
 8004e62:	6821      	ldr	r1, [r4, #0]
 8004e64:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004e68:	6021      	str	r1, [r4, #0]
 8004e6a:	702b      	strb	r3, [r5, #0]
 8004e6c:	3501      	adds	r5, #1
 8004e6e:	e79a      	b.n	8004da6 <_scanf_float+0xbe>
 8004e70:	6821      	ldr	r1, [r4, #0]
 8004e72:	0608      	lsls	r0, r1, #24
 8004e74:	f57f af70 	bpl.w	8004d58 <_scanf_float+0x70>
 8004e78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004e7c:	e7f4      	b.n	8004e68 <_scanf_float+0x180>
 8004e7e:	2a02      	cmp	r2, #2
 8004e80:	d047      	beq.n	8004f12 <_scanf_float+0x22a>
 8004e82:	f1bb 0f01 	cmp.w	fp, #1
 8004e86:	d003      	beq.n	8004e90 <_scanf_float+0x1a8>
 8004e88:	f1bb 0f04 	cmp.w	fp, #4
 8004e8c:	f47f af64 	bne.w	8004d58 <_scanf_float+0x70>
 8004e90:	f10b 0b01 	add.w	fp, fp, #1
 8004e94:	fa5f fb8b 	uxtb.w	fp, fp
 8004e98:	e7e7      	b.n	8004e6a <_scanf_float+0x182>
 8004e9a:	f1bb 0f03 	cmp.w	fp, #3
 8004e9e:	d0f7      	beq.n	8004e90 <_scanf_float+0x1a8>
 8004ea0:	f1bb 0f05 	cmp.w	fp, #5
 8004ea4:	e7f2      	b.n	8004e8c <_scanf_float+0x1a4>
 8004ea6:	f1bb 0f02 	cmp.w	fp, #2
 8004eaa:	f47f af55 	bne.w	8004d58 <_scanf_float+0x70>
 8004eae:	f04f 0b03 	mov.w	fp, #3
 8004eb2:	e7da      	b.n	8004e6a <_scanf_float+0x182>
 8004eb4:	f1bb 0f06 	cmp.w	fp, #6
 8004eb8:	f47f af4e 	bne.w	8004d58 <_scanf_float+0x70>
 8004ebc:	f04f 0b07 	mov.w	fp, #7
 8004ec0:	e7d3      	b.n	8004e6a <_scanf_float+0x182>
 8004ec2:	6821      	ldr	r1, [r4, #0]
 8004ec4:	0588      	lsls	r0, r1, #22
 8004ec6:	f57f af47 	bpl.w	8004d58 <_scanf_float+0x70>
 8004eca:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004ece:	6021      	str	r1, [r4, #0]
 8004ed0:	f8cd 9008 	str.w	r9, [sp, #8]
 8004ed4:	e7c9      	b.n	8004e6a <_scanf_float+0x182>
 8004ed6:	6821      	ldr	r1, [r4, #0]
 8004ed8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004edc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004ee0:	d006      	beq.n	8004ef0 <_scanf_float+0x208>
 8004ee2:	0548      	lsls	r0, r1, #21
 8004ee4:	f57f af38 	bpl.w	8004d58 <_scanf_float+0x70>
 8004ee8:	f1b9 0f00 	cmp.w	r9, #0
 8004eec:	f43f af3b 	beq.w	8004d66 <_scanf_float+0x7e>
 8004ef0:	0588      	lsls	r0, r1, #22
 8004ef2:	bf58      	it	pl
 8004ef4:	9802      	ldrpl	r0, [sp, #8]
 8004ef6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004efa:	bf58      	it	pl
 8004efc:	eba9 0000 	subpl.w	r0, r9, r0
 8004f00:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004f04:	bf58      	it	pl
 8004f06:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004f0a:	6021      	str	r1, [r4, #0]
 8004f0c:	f04f 0900 	mov.w	r9, #0
 8004f10:	e7ab      	b.n	8004e6a <_scanf_float+0x182>
 8004f12:	2203      	movs	r2, #3
 8004f14:	e7a9      	b.n	8004e6a <_scanf_float+0x182>
 8004f16:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004f1a:	9205      	str	r2, [sp, #20]
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	4638      	mov	r0, r7
 8004f20:	4798      	blx	r3
 8004f22:	9a05      	ldr	r2, [sp, #20]
 8004f24:	2800      	cmp	r0, #0
 8004f26:	f43f af04 	beq.w	8004d32 <_scanf_float+0x4a>
 8004f2a:	e715      	b.n	8004d58 <_scanf_float+0x70>
 8004f2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004f34:	4632      	mov	r2, r6
 8004f36:	4638      	mov	r0, r7
 8004f38:	4798      	blx	r3
 8004f3a:	6923      	ldr	r3, [r4, #16]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	6123      	str	r3, [r4, #16]
 8004f40:	e715      	b.n	8004d6e <_scanf_float+0x86>
 8004f42:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004f46:	2b06      	cmp	r3, #6
 8004f48:	d80a      	bhi.n	8004f60 <_scanf_float+0x278>
 8004f4a:	f1bb 0f02 	cmp.w	fp, #2
 8004f4e:	d968      	bls.n	8005022 <_scanf_float+0x33a>
 8004f50:	f1ab 0b03 	sub.w	fp, fp, #3
 8004f54:	fa5f fb8b 	uxtb.w	fp, fp
 8004f58:	eba5 0b0b 	sub.w	fp, r5, fp
 8004f5c:	455d      	cmp	r5, fp
 8004f5e:	d14b      	bne.n	8004ff8 <_scanf_float+0x310>
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	05da      	lsls	r2, r3, #23
 8004f64:	d51f      	bpl.n	8004fa6 <_scanf_float+0x2be>
 8004f66:	055b      	lsls	r3, r3, #21
 8004f68:	d468      	bmi.n	800503c <_scanf_float+0x354>
 8004f6a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004f6e:	6923      	ldr	r3, [r4, #16]
 8004f70:	2965      	cmp	r1, #101	; 0x65
 8004f72:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f76:	f105 3bff 	add.w	fp, r5, #4294967295
 8004f7a:	6123      	str	r3, [r4, #16]
 8004f7c:	d00d      	beq.n	8004f9a <_scanf_float+0x2b2>
 8004f7e:	2945      	cmp	r1, #69	; 0x45
 8004f80:	d00b      	beq.n	8004f9a <_scanf_float+0x2b2>
 8004f82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f86:	4632      	mov	r2, r6
 8004f88:	4638      	mov	r0, r7
 8004f8a:	4798      	blx	r3
 8004f8c:	6923      	ldr	r3, [r4, #16]
 8004f8e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	f1a5 0b02 	sub.w	fp, r5, #2
 8004f98:	6123      	str	r3, [r4, #16]
 8004f9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f9e:	4632      	mov	r2, r6
 8004fa0:	4638      	mov	r0, r7
 8004fa2:	4798      	blx	r3
 8004fa4:	465d      	mov	r5, fp
 8004fa6:	6826      	ldr	r6, [r4, #0]
 8004fa8:	f016 0610 	ands.w	r6, r6, #16
 8004fac:	d17a      	bne.n	80050a4 <_scanf_float+0x3bc>
 8004fae:	702e      	strb	r6, [r5, #0]
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fba:	d142      	bne.n	8005042 <_scanf_float+0x35a>
 8004fbc:	9b02      	ldr	r3, [sp, #8]
 8004fbe:	eba9 0303 	sub.w	r3, r9, r3
 8004fc2:	425a      	negs	r2, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d149      	bne.n	800505c <_scanf_float+0x374>
 8004fc8:	2200      	movs	r2, #0
 8004fca:	4641      	mov	r1, r8
 8004fcc:	4638      	mov	r0, r7
 8004fce:	f000 feab 	bl	8005d28 <_strtod_r>
 8004fd2:	6825      	ldr	r5, [r4, #0]
 8004fd4:	f8da 3000 	ldr.w	r3, [sl]
 8004fd8:	f015 0f02 	tst.w	r5, #2
 8004fdc:	f103 0204 	add.w	r2, r3, #4
 8004fe0:	ec59 8b10 	vmov	r8, r9, d0
 8004fe4:	f8ca 2000 	str.w	r2, [sl]
 8004fe8:	d043      	beq.n	8005072 <_scanf_float+0x38a>
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	e9c3 8900 	strd	r8, r9, [r3]
 8004ff0:	68e3      	ldr	r3, [r4, #12]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	60e3      	str	r3, [r4, #12]
 8004ff6:	e6be      	b.n	8004d76 <_scanf_float+0x8e>
 8004ff8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ffc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005000:	4632      	mov	r2, r6
 8005002:	4638      	mov	r0, r7
 8005004:	4798      	blx	r3
 8005006:	6923      	ldr	r3, [r4, #16]
 8005008:	3b01      	subs	r3, #1
 800500a:	6123      	str	r3, [r4, #16]
 800500c:	e7a6      	b.n	8004f5c <_scanf_float+0x274>
 800500e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005012:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005016:	4632      	mov	r2, r6
 8005018:	4638      	mov	r0, r7
 800501a:	4798      	blx	r3
 800501c:	6923      	ldr	r3, [r4, #16]
 800501e:	3b01      	subs	r3, #1
 8005020:	6123      	str	r3, [r4, #16]
 8005022:	4545      	cmp	r5, r8
 8005024:	d8f3      	bhi.n	800500e <_scanf_float+0x326>
 8005026:	e6a5      	b.n	8004d74 <_scanf_float+0x8c>
 8005028:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800502c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005030:	4632      	mov	r2, r6
 8005032:	4638      	mov	r0, r7
 8005034:	4798      	blx	r3
 8005036:	6923      	ldr	r3, [r4, #16]
 8005038:	3b01      	subs	r3, #1
 800503a:	6123      	str	r3, [r4, #16]
 800503c:	4545      	cmp	r5, r8
 800503e:	d8f3      	bhi.n	8005028 <_scanf_float+0x340>
 8005040:	e698      	b.n	8004d74 <_scanf_float+0x8c>
 8005042:	9b03      	ldr	r3, [sp, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0bf      	beq.n	8004fc8 <_scanf_float+0x2e0>
 8005048:	9904      	ldr	r1, [sp, #16]
 800504a:	230a      	movs	r3, #10
 800504c:	4632      	mov	r2, r6
 800504e:	3101      	adds	r1, #1
 8005050:	4638      	mov	r0, r7
 8005052:	f000 ff5d 	bl	8005f10 <_strtol_r>
 8005056:	9b03      	ldr	r3, [sp, #12]
 8005058:	9d04      	ldr	r5, [sp, #16]
 800505a:	1ac2      	subs	r2, r0, r3
 800505c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005060:	429d      	cmp	r5, r3
 8005062:	bf28      	it	cs
 8005064:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005068:	490f      	ldr	r1, [pc, #60]	; (80050a8 <_scanf_float+0x3c0>)
 800506a:	4628      	mov	r0, r5
 800506c:	f000 f824 	bl	80050b8 <siprintf>
 8005070:	e7aa      	b.n	8004fc8 <_scanf_float+0x2e0>
 8005072:	f015 0504 	ands.w	r5, r5, #4
 8005076:	d1b8      	bne.n	8004fea <_scanf_float+0x302>
 8005078:	681f      	ldr	r7, [r3, #0]
 800507a:	ee10 2a10 	vmov	r2, s0
 800507e:	464b      	mov	r3, r9
 8005080:	ee10 0a10 	vmov	r0, s0
 8005084:	4649      	mov	r1, r9
 8005086:	f7fb fd61 	bl	8000b4c <__aeabi_dcmpun>
 800508a:	b128      	cbz	r0, 8005098 <_scanf_float+0x3b0>
 800508c:	4628      	mov	r0, r5
 800508e:	f000 f80d 	bl	80050ac <nanf>
 8005092:	ed87 0a00 	vstr	s0, [r7]
 8005096:	e7ab      	b.n	8004ff0 <_scanf_float+0x308>
 8005098:	4640      	mov	r0, r8
 800509a:	4649      	mov	r1, r9
 800509c:	f7fb fdb4 	bl	8000c08 <__aeabi_d2f>
 80050a0:	6038      	str	r0, [r7, #0]
 80050a2:	e7a5      	b.n	8004ff0 <_scanf_float+0x308>
 80050a4:	2600      	movs	r6, #0
 80050a6:	e666      	b.n	8004d76 <_scanf_float+0x8e>
 80050a8:	08008180 	.word	0x08008180

080050ac <nanf>:
 80050ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80050b4 <nanf+0x8>
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	7fc00000 	.word	0x7fc00000

080050b8 <siprintf>:
 80050b8:	b40e      	push	{r1, r2, r3}
 80050ba:	b500      	push	{lr}
 80050bc:	b09c      	sub	sp, #112	; 0x70
 80050be:	ab1d      	add	r3, sp, #116	; 0x74
 80050c0:	9002      	str	r0, [sp, #8]
 80050c2:	9006      	str	r0, [sp, #24]
 80050c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050c8:	4809      	ldr	r0, [pc, #36]	; (80050f0 <siprintf+0x38>)
 80050ca:	9107      	str	r1, [sp, #28]
 80050cc:	9104      	str	r1, [sp, #16]
 80050ce:	4909      	ldr	r1, [pc, #36]	; (80050f4 <siprintf+0x3c>)
 80050d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050d4:	9105      	str	r1, [sp, #20]
 80050d6:	6800      	ldr	r0, [r0, #0]
 80050d8:	9301      	str	r3, [sp, #4]
 80050da:	a902      	add	r1, sp, #8
 80050dc:	f002 fdf2 	bl	8007cc4 <_svfiprintf_r>
 80050e0:	9b02      	ldr	r3, [sp, #8]
 80050e2:	2200      	movs	r2, #0
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	b01c      	add	sp, #112	; 0x70
 80050e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050ec:	b003      	add	sp, #12
 80050ee:	4770      	bx	lr
 80050f0:	2000002c 	.word	0x2000002c
 80050f4:	ffff0208 	.word	0xffff0208

080050f8 <strcpy>:
 80050f8:	4603      	mov	r3, r0
 80050fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050fe:	f803 2b01 	strb.w	r2, [r3], #1
 8005102:	2a00      	cmp	r2, #0
 8005104:	d1f9      	bne.n	80050fa <strcpy+0x2>
 8005106:	4770      	bx	lr

08005108 <sulp>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	4604      	mov	r4, r0
 800510c:	460d      	mov	r5, r1
 800510e:	ec45 4b10 	vmov	d0, r4, r5
 8005112:	4616      	mov	r6, r2
 8005114:	f002 fb92 	bl	800783c <__ulp>
 8005118:	ec51 0b10 	vmov	r0, r1, d0
 800511c:	b17e      	cbz	r6, 800513e <sulp+0x36>
 800511e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005122:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005126:	2b00      	cmp	r3, #0
 8005128:	dd09      	ble.n	800513e <sulp+0x36>
 800512a:	051b      	lsls	r3, r3, #20
 800512c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005130:	2400      	movs	r4, #0
 8005132:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005136:	4622      	mov	r2, r4
 8005138:	462b      	mov	r3, r5
 800513a:	f7fb fa6d 	bl	8000618 <__aeabi_dmul>
 800513e:	bd70      	pop	{r4, r5, r6, pc}

08005140 <_strtod_l>:
 8005140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	461f      	mov	r7, r3
 8005146:	b0a1      	sub	sp, #132	; 0x84
 8005148:	2300      	movs	r3, #0
 800514a:	4681      	mov	r9, r0
 800514c:	4638      	mov	r0, r7
 800514e:	460e      	mov	r6, r1
 8005150:	9217      	str	r2, [sp, #92]	; 0x5c
 8005152:	931c      	str	r3, [sp, #112]	; 0x70
 8005154:	f002 f871 	bl	800723a <__localeconv_l>
 8005158:	4680      	mov	r8, r0
 800515a:	6800      	ldr	r0, [r0, #0]
 800515c:	f7fb f842 	bl	80001e4 <strlen>
 8005160:	f04f 0a00 	mov.w	sl, #0
 8005164:	4604      	mov	r4, r0
 8005166:	f04f 0b00 	mov.w	fp, #0
 800516a:	961b      	str	r6, [sp, #108]	; 0x6c
 800516c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800516e:	781a      	ldrb	r2, [r3, #0]
 8005170:	2a0d      	cmp	r2, #13
 8005172:	d832      	bhi.n	80051da <_strtod_l+0x9a>
 8005174:	2a09      	cmp	r2, #9
 8005176:	d236      	bcs.n	80051e6 <_strtod_l+0xa6>
 8005178:	2a00      	cmp	r2, #0
 800517a:	d03e      	beq.n	80051fa <_strtod_l+0xba>
 800517c:	2300      	movs	r3, #0
 800517e:	930d      	str	r3, [sp, #52]	; 0x34
 8005180:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005182:	782b      	ldrb	r3, [r5, #0]
 8005184:	2b30      	cmp	r3, #48	; 0x30
 8005186:	f040 80ac 	bne.w	80052e2 <_strtod_l+0x1a2>
 800518a:	786b      	ldrb	r3, [r5, #1]
 800518c:	2b58      	cmp	r3, #88	; 0x58
 800518e:	d001      	beq.n	8005194 <_strtod_l+0x54>
 8005190:	2b78      	cmp	r3, #120	; 0x78
 8005192:	d167      	bne.n	8005264 <_strtod_l+0x124>
 8005194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	ab1c      	add	r3, sp, #112	; 0x70
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	9702      	str	r7, [sp, #8]
 800519e:	ab1d      	add	r3, sp, #116	; 0x74
 80051a0:	4a88      	ldr	r2, [pc, #544]	; (80053c4 <_strtod_l+0x284>)
 80051a2:	a91b      	add	r1, sp, #108	; 0x6c
 80051a4:	4648      	mov	r0, r9
 80051a6:	f001 fd6e 	bl	8006c86 <__gethex>
 80051aa:	f010 0407 	ands.w	r4, r0, #7
 80051ae:	4606      	mov	r6, r0
 80051b0:	d005      	beq.n	80051be <_strtod_l+0x7e>
 80051b2:	2c06      	cmp	r4, #6
 80051b4:	d12b      	bne.n	800520e <_strtod_l+0xce>
 80051b6:	3501      	adds	r5, #1
 80051b8:	2300      	movs	r3, #0
 80051ba:	951b      	str	r5, [sp, #108]	; 0x6c
 80051bc:	930d      	str	r3, [sp, #52]	; 0x34
 80051be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f040 859a 	bne.w	8005cfa <_strtod_l+0xbba>
 80051c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051c8:	b1e3      	cbz	r3, 8005204 <_strtod_l+0xc4>
 80051ca:	4652      	mov	r2, sl
 80051cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80051d0:	ec43 2b10 	vmov	d0, r2, r3
 80051d4:	b021      	add	sp, #132	; 0x84
 80051d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051da:	2a2b      	cmp	r2, #43	; 0x2b
 80051dc:	d015      	beq.n	800520a <_strtod_l+0xca>
 80051de:	2a2d      	cmp	r2, #45	; 0x2d
 80051e0:	d004      	beq.n	80051ec <_strtod_l+0xac>
 80051e2:	2a20      	cmp	r2, #32
 80051e4:	d1ca      	bne.n	800517c <_strtod_l+0x3c>
 80051e6:	3301      	adds	r3, #1
 80051e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80051ea:	e7bf      	b.n	800516c <_strtod_l+0x2c>
 80051ec:	2201      	movs	r2, #1
 80051ee:	920d      	str	r2, [sp, #52]	; 0x34
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80051f4:	785b      	ldrb	r3, [r3, #1]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1c2      	bne.n	8005180 <_strtod_l+0x40>
 80051fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f040 8579 	bne.w	8005cf6 <_strtod_l+0xbb6>
 8005204:	4652      	mov	r2, sl
 8005206:	465b      	mov	r3, fp
 8005208:	e7e2      	b.n	80051d0 <_strtod_l+0x90>
 800520a:	2200      	movs	r2, #0
 800520c:	e7ef      	b.n	80051ee <_strtod_l+0xae>
 800520e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005210:	b13a      	cbz	r2, 8005222 <_strtod_l+0xe2>
 8005212:	2135      	movs	r1, #53	; 0x35
 8005214:	a81e      	add	r0, sp, #120	; 0x78
 8005216:	f002 fc09 	bl	8007a2c <__copybits>
 800521a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800521c:	4648      	mov	r0, r9
 800521e:	f002 f876 	bl	800730e <_Bfree>
 8005222:	3c01      	subs	r4, #1
 8005224:	2c04      	cmp	r4, #4
 8005226:	d806      	bhi.n	8005236 <_strtod_l+0xf6>
 8005228:	e8df f004 	tbb	[pc, r4]
 800522c:	1714030a 	.word	0x1714030a
 8005230:	0a          	.byte	0x0a
 8005231:	00          	.byte	0x00
 8005232:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005236:	0730      	lsls	r0, r6, #28
 8005238:	d5c1      	bpl.n	80051be <_strtod_l+0x7e>
 800523a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800523e:	e7be      	b.n	80051be <_strtod_l+0x7e>
 8005240:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005244:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005246:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800524a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800524e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005252:	e7f0      	b.n	8005236 <_strtod_l+0xf6>
 8005254:	f8df b170 	ldr.w	fp, [pc, #368]	; 80053c8 <_strtod_l+0x288>
 8005258:	e7ed      	b.n	8005236 <_strtod_l+0xf6>
 800525a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800525e:	f04f 3aff 	mov.w	sl, #4294967295
 8005262:	e7e8      	b.n	8005236 <_strtod_l+0xf6>
 8005264:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	921b      	str	r2, [sp, #108]	; 0x6c
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	2b30      	cmp	r3, #48	; 0x30
 800526e:	d0f9      	beq.n	8005264 <_strtod_l+0x124>
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0a4      	beq.n	80051be <_strtod_l+0x7e>
 8005274:	2301      	movs	r3, #1
 8005276:	2500      	movs	r5, #0
 8005278:	9306      	str	r3, [sp, #24]
 800527a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800527c:	9308      	str	r3, [sp, #32]
 800527e:	9507      	str	r5, [sp, #28]
 8005280:	9505      	str	r5, [sp, #20]
 8005282:	220a      	movs	r2, #10
 8005284:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005286:	7807      	ldrb	r7, [r0, #0]
 8005288:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800528c:	b2d9      	uxtb	r1, r3
 800528e:	2909      	cmp	r1, #9
 8005290:	d929      	bls.n	80052e6 <_strtod_l+0x1a6>
 8005292:	4622      	mov	r2, r4
 8005294:	f8d8 1000 	ldr.w	r1, [r8]
 8005298:	f002 fe1c 	bl	8007ed4 <strncmp>
 800529c:	2800      	cmp	r0, #0
 800529e:	d031      	beq.n	8005304 <_strtod_l+0x1c4>
 80052a0:	2000      	movs	r0, #0
 80052a2:	9c05      	ldr	r4, [sp, #20]
 80052a4:	9004      	str	r0, [sp, #16]
 80052a6:	463b      	mov	r3, r7
 80052a8:	4602      	mov	r2, r0
 80052aa:	2b65      	cmp	r3, #101	; 0x65
 80052ac:	d001      	beq.n	80052b2 <_strtod_l+0x172>
 80052ae:	2b45      	cmp	r3, #69	; 0x45
 80052b0:	d114      	bne.n	80052dc <_strtod_l+0x19c>
 80052b2:	b924      	cbnz	r4, 80052be <_strtod_l+0x17e>
 80052b4:	b910      	cbnz	r0, 80052bc <_strtod_l+0x17c>
 80052b6:	9b06      	ldr	r3, [sp, #24]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d09e      	beq.n	80051fa <_strtod_l+0xba>
 80052bc:	2400      	movs	r4, #0
 80052be:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80052c0:	1c73      	adds	r3, r6, #1
 80052c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80052c4:	7873      	ldrb	r3, [r6, #1]
 80052c6:	2b2b      	cmp	r3, #43	; 0x2b
 80052c8:	d078      	beq.n	80053bc <_strtod_l+0x27c>
 80052ca:	2b2d      	cmp	r3, #45	; 0x2d
 80052cc:	d070      	beq.n	80053b0 <_strtod_l+0x270>
 80052ce:	f04f 0c00 	mov.w	ip, #0
 80052d2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80052d6:	2f09      	cmp	r7, #9
 80052d8:	d97c      	bls.n	80053d4 <_strtod_l+0x294>
 80052da:	961b      	str	r6, [sp, #108]	; 0x6c
 80052dc:	f04f 0e00 	mov.w	lr, #0
 80052e0:	e09a      	b.n	8005418 <_strtod_l+0x2d8>
 80052e2:	2300      	movs	r3, #0
 80052e4:	e7c7      	b.n	8005276 <_strtod_l+0x136>
 80052e6:	9905      	ldr	r1, [sp, #20]
 80052e8:	2908      	cmp	r1, #8
 80052ea:	bfdd      	ittte	le
 80052ec:	9907      	ldrle	r1, [sp, #28]
 80052ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80052f2:	9307      	strle	r3, [sp, #28]
 80052f4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80052f8:	9b05      	ldr	r3, [sp, #20]
 80052fa:	3001      	adds	r0, #1
 80052fc:	3301      	adds	r3, #1
 80052fe:	9305      	str	r3, [sp, #20]
 8005300:	901b      	str	r0, [sp, #108]	; 0x6c
 8005302:	e7bf      	b.n	8005284 <_strtod_l+0x144>
 8005304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005306:	191a      	adds	r2, r3, r4
 8005308:	921b      	str	r2, [sp, #108]	; 0x6c
 800530a:	9a05      	ldr	r2, [sp, #20]
 800530c:	5d1b      	ldrb	r3, [r3, r4]
 800530e:	2a00      	cmp	r2, #0
 8005310:	d037      	beq.n	8005382 <_strtod_l+0x242>
 8005312:	9c05      	ldr	r4, [sp, #20]
 8005314:	4602      	mov	r2, r0
 8005316:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800531a:	2909      	cmp	r1, #9
 800531c:	d913      	bls.n	8005346 <_strtod_l+0x206>
 800531e:	2101      	movs	r1, #1
 8005320:	9104      	str	r1, [sp, #16]
 8005322:	e7c2      	b.n	80052aa <_strtod_l+0x16a>
 8005324:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	921b      	str	r2, [sp, #108]	; 0x6c
 800532a:	785b      	ldrb	r3, [r3, #1]
 800532c:	3001      	adds	r0, #1
 800532e:	2b30      	cmp	r3, #48	; 0x30
 8005330:	d0f8      	beq.n	8005324 <_strtod_l+0x1e4>
 8005332:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005336:	2a08      	cmp	r2, #8
 8005338:	f200 84e4 	bhi.w	8005d04 <_strtod_l+0xbc4>
 800533c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800533e:	9208      	str	r2, [sp, #32]
 8005340:	4602      	mov	r2, r0
 8005342:	2000      	movs	r0, #0
 8005344:	4604      	mov	r4, r0
 8005346:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800534a:	f100 0101 	add.w	r1, r0, #1
 800534e:	d012      	beq.n	8005376 <_strtod_l+0x236>
 8005350:	440a      	add	r2, r1
 8005352:	eb00 0c04 	add.w	ip, r0, r4
 8005356:	4621      	mov	r1, r4
 8005358:	270a      	movs	r7, #10
 800535a:	458c      	cmp	ip, r1
 800535c:	d113      	bne.n	8005386 <_strtod_l+0x246>
 800535e:	1821      	adds	r1, r4, r0
 8005360:	2908      	cmp	r1, #8
 8005362:	f104 0401 	add.w	r4, r4, #1
 8005366:	4404      	add	r4, r0
 8005368:	dc19      	bgt.n	800539e <_strtod_l+0x25e>
 800536a:	9b07      	ldr	r3, [sp, #28]
 800536c:	210a      	movs	r1, #10
 800536e:	fb01 e303 	mla	r3, r1, r3, lr
 8005372:	9307      	str	r3, [sp, #28]
 8005374:	2100      	movs	r1, #0
 8005376:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005378:	1c58      	adds	r0, r3, #1
 800537a:	901b      	str	r0, [sp, #108]	; 0x6c
 800537c:	785b      	ldrb	r3, [r3, #1]
 800537e:	4608      	mov	r0, r1
 8005380:	e7c9      	b.n	8005316 <_strtod_l+0x1d6>
 8005382:	9805      	ldr	r0, [sp, #20]
 8005384:	e7d3      	b.n	800532e <_strtod_l+0x1ee>
 8005386:	2908      	cmp	r1, #8
 8005388:	f101 0101 	add.w	r1, r1, #1
 800538c:	dc03      	bgt.n	8005396 <_strtod_l+0x256>
 800538e:	9b07      	ldr	r3, [sp, #28]
 8005390:	437b      	muls	r3, r7
 8005392:	9307      	str	r3, [sp, #28]
 8005394:	e7e1      	b.n	800535a <_strtod_l+0x21a>
 8005396:	2910      	cmp	r1, #16
 8005398:	bfd8      	it	le
 800539a:	437d      	mulle	r5, r7
 800539c:	e7dd      	b.n	800535a <_strtod_l+0x21a>
 800539e:	2c10      	cmp	r4, #16
 80053a0:	bfdc      	itt	le
 80053a2:	210a      	movle	r1, #10
 80053a4:	fb01 e505 	mlale	r5, r1, r5, lr
 80053a8:	e7e4      	b.n	8005374 <_strtod_l+0x234>
 80053aa:	2301      	movs	r3, #1
 80053ac:	9304      	str	r3, [sp, #16]
 80053ae:	e781      	b.n	80052b4 <_strtod_l+0x174>
 80053b0:	f04f 0c01 	mov.w	ip, #1
 80053b4:	1cb3      	adds	r3, r6, #2
 80053b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80053b8:	78b3      	ldrb	r3, [r6, #2]
 80053ba:	e78a      	b.n	80052d2 <_strtod_l+0x192>
 80053bc:	f04f 0c00 	mov.w	ip, #0
 80053c0:	e7f8      	b.n	80053b4 <_strtod_l+0x274>
 80053c2:	bf00      	nop
 80053c4:	08008188 	.word	0x08008188
 80053c8:	7ff00000 	.word	0x7ff00000
 80053cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053ce:	1c5f      	adds	r7, r3, #1
 80053d0:	971b      	str	r7, [sp, #108]	; 0x6c
 80053d2:	785b      	ldrb	r3, [r3, #1]
 80053d4:	2b30      	cmp	r3, #48	; 0x30
 80053d6:	d0f9      	beq.n	80053cc <_strtod_l+0x28c>
 80053d8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80053dc:	2f08      	cmp	r7, #8
 80053de:	f63f af7d 	bhi.w	80052dc <_strtod_l+0x19c>
 80053e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80053e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053e8:	930a      	str	r3, [sp, #40]	; 0x28
 80053ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053ec:	1c5f      	adds	r7, r3, #1
 80053ee:	971b      	str	r7, [sp, #108]	; 0x6c
 80053f0:	785b      	ldrb	r3, [r3, #1]
 80053f2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80053f6:	f1b8 0f09 	cmp.w	r8, #9
 80053fa:	d937      	bls.n	800546c <_strtod_l+0x32c>
 80053fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80053fe:	1a7f      	subs	r7, r7, r1
 8005400:	2f08      	cmp	r7, #8
 8005402:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005406:	dc37      	bgt.n	8005478 <_strtod_l+0x338>
 8005408:	45be      	cmp	lr, r7
 800540a:	bfa8      	it	ge
 800540c:	46be      	movge	lr, r7
 800540e:	f1bc 0f00 	cmp.w	ip, #0
 8005412:	d001      	beq.n	8005418 <_strtod_l+0x2d8>
 8005414:	f1ce 0e00 	rsb	lr, lr, #0
 8005418:	2c00      	cmp	r4, #0
 800541a:	d151      	bne.n	80054c0 <_strtod_l+0x380>
 800541c:	2800      	cmp	r0, #0
 800541e:	f47f aece 	bne.w	80051be <_strtod_l+0x7e>
 8005422:	9a06      	ldr	r2, [sp, #24]
 8005424:	2a00      	cmp	r2, #0
 8005426:	f47f aeca 	bne.w	80051be <_strtod_l+0x7e>
 800542a:	9a04      	ldr	r2, [sp, #16]
 800542c:	2a00      	cmp	r2, #0
 800542e:	f47f aee4 	bne.w	80051fa <_strtod_l+0xba>
 8005432:	2b4e      	cmp	r3, #78	; 0x4e
 8005434:	d027      	beq.n	8005486 <_strtod_l+0x346>
 8005436:	dc21      	bgt.n	800547c <_strtod_l+0x33c>
 8005438:	2b49      	cmp	r3, #73	; 0x49
 800543a:	f47f aede 	bne.w	80051fa <_strtod_l+0xba>
 800543e:	49a0      	ldr	r1, [pc, #640]	; (80056c0 <_strtod_l+0x580>)
 8005440:	a81b      	add	r0, sp, #108	; 0x6c
 8005442:	f001 fe53 	bl	80070ec <__match>
 8005446:	2800      	cmp	r0, #0
 8005448:	f43f aed7 	beq.w	80051fa <_strtod_l+0xba>
 800544c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800544e:	499d      	ldr	r1, [pc, #628]	; (80056c4 <_strtod_l+0x584>)
 8005450:	3b01      	subs	r3, #1
 8005452:	a81b      	add	r0, sp, #108	; 0x6c
 8005454:	931b      	str	r3, [sp, #108]	; 0x6c
 8005456:	f001 fe49 	bl	80070ec <__match>
 800545a:	b910      	cbnz	r0, 8005462 <_strtod_l+0x322>
 800545c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800545e:	3301      	adds	r3, #1
 8005460:	931b      	str	r3, [sp, #108]	; 0x6c
 8005462:	f8df b274 	ldr.w	fp, [pc, #628]	; 80056d8 <_strtod_l+0x598>
 8005466:	f04f 0a00 	mov.w	sl, #0
 800546a:	e6a8      	b.n	80051be <_strtod_l+0x7e>
 800546c:	210a      	movs	r1, #10
 800546e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005472:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005476:	e7b8      	b.n	80053ea <_strtod_l+0x2aa>
 8005478:	46be      	mov	lr, r7
 800547a:	e7c8      	b.n	800540e <_strtod_l+0x2ce>
 800547c:	2b69      	cmp	r3, #105	; 0x69
 800547e:	d0de      	beq.n	800543e <_strtod_l+0x2fe>
 8005480:	2b6e      	cmp	r3, #110	; 0x6e
 8005482:	f47f aeba 	bne.w	80051fa <_strtod_l+0xba>
 8005486:	4990      	ldr	r1, [pc, #576]	; (80056c8 <_strtod_l+0x588>)
 8005488:	a81b      	add	r0, sp, #108	; 0x6c
 800548a:	f001 fe2f 	bl	80070ec <__match>
 800548e:	2800      	cmp	r0, #0
 8005490:	f43f aeb3 	beq.w	80051fa <_strtod_l+0xba>
 8005494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b28      	cmp	r3, #40	; 0x28
 800549a:	d10e      	bne.n	80054ba <_strtod_l+0x37a>
 800549c:	aa1e      	add	r2, sp, #120	; 0x78
 800549e:	498b      	ldr	r1, [pc, #556]	; (80056cc <_strtod_l+0x58c>)
 80054a0:	a81b      	add	r0, sp, #108	; 0x6c
 80054a2:	f001 fe37 	bl	8007114 <__hexnan>
 80054a6:	2805      	cmp	r0, #5
 80054a8:	d107      	bne.n	80054ba <_strtod_l+0x37a>
 80054aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80054ac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80054b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80054b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80054b8:	e681      	b.n	80051be <_strtod_l+0x7e>
 80054ba:	f8df b224 	ldr.w	fp, [pc, #548]	; 80056e0 <_strtod_l+0x5a0>
 80054be:	e7d2      	b.n	8005466 <_strtod_l+0x326>
 80054c0:	ebae 0302 	sub.w	r3, lr, r2
 80054c4:	9306      	str	r3, [sp, #24]
 80054c6:	9b05      	ldr	r3, [sp, #20]
 80054c8:	9807      	ldr	r0, [sp, #28]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf08      	it	eq
 80054ce:	4623      	moveq	r3, r4
 80054d0:	2c10      	cmp	r4, #16
 80054d2:	9305      	str	r3, [sp, #20]
 80054d4:	46a0      	mov	r8, r4
 80054d6:	bfa8      	it	ge
 80054d8:	f04f 0810 	movge.w	r8, #16
 80054dc:	f7fb f822 	bl	8000524 <__aeabi_ui2d>
 80054e0:	2c09      	cmp	r4, #9
 80054e2:	4682      	mov	sl, r0
 80054e4:	468b      	mov	fp, r1
 80054e6:	dc13      	bgt.n	8005510 <_strtod_l+0x3d0>
 80054e8:	9b06      	ldr	r3, [sp, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f43f ae67 	beq.w	80051be <_strtod_l+0x7e>
 80054f0:	9b06      	ldr	r3, [sp, #24]
 80054f2:	dd7a      	ble.n	80055ea <_strtod_l+0x4aa>
 80054f4:	2b16      	cmp	r3, #22
 80054f6:	dc61      	bgt.n	80055bc <_strtod_l+0x47c>
 80054f8:	4a75      	ldr	r2, [pc, #468]	; (80056d0 <_strtod_l+0x590>)
 80054fa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80054fe:	e9de 0100 	ldrd	r0, r1, [lr]
 8005502:	4652      	mov	r2, sl
 8005504:	465b      	mov	r3, fp
 8005506:	f7fb f887 	bl	8000618 <__aeabi_dmul>
 800550a:	4682      	mov	sl, r0
 800550c:	468b      	mov	fp, r1
 800550e:	e656      	b.n	80051be <_strtod_l+0x7e>
 8005510:	4b6f      	ldr	r3, [pc, #444]	; (80056d0 <_strtod_l+0x590>)
 8005512:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005516:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800551a:	f7fb f87d 	bl	8000618 <__aeabi_dmul>
 800551e:	4606      	mov	r6, r0
 8005520:	4628      	mov	r0, r5
 8005522:	460f      	mov	r7, r1
 8005524:	f7fa fffe 	bl	8000524 <__aeabi_ui2d>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4630      	mov	r0, r6
 800552e:	4639      	mov	r1, r7
 8005530:	f7fa febc 	bl	80002ac <__adddf3>
 8005534:	2c0f      	cmp	r4, #15
 8005536:	4682      	mov	sl, r0
 8005538:	468b      	mov	fp, r1
 800553a:	ddd5      	ble.n	80054e8 <_strtod_l+0x3a8>
 800553c:	9b06      	ldr	r3, [sp, #24]
 800553e:	eba4 0808 	sub.w	r8, r4, r8
 8005542:	4498      	add	r8, r3
 8005544:	f1b8 0f00 	cmp.w	r8, #0
 8005548:	f340 8096 	ble.w	8005678 <_strtod_l+0x538>
 800554c:	f018 030f 	ands.w	r3, r8, #15
 8005550:	d00a      	beq.n	8005568 <_strtod_l+0x428>
 8005552:	495f      	ldr	r1, [pc, #380]	; (80056d0 <_strtod_l+0x590>)
 8005554:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005558:	4652      	mov	r2, sl
 800555a:	465b      	mov	r3, fp
 800555c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005560:	f7fb f85a 	bl	8000618 <__aeabi_dmul>
 8005564:	4682      	mov	sl, r0
 8005566:	468b      	mov	fp, r1
 8005568:	f038 080f 	bics.w	r8, r8, #15
 800556c:	d073      	beq.n	8005656 <_strtod_l+0x516>
 800556e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005572:	dd47      	ble.n	8005604 <_strtod_l+0x4c4>
 8005574:	2400      	movs	r4, #0
 8005576:	46a0      	mov	r8, r4
 8005578:	9407      	str	r4, [sp, #28]
 800557a:	9405      	str	r4, [sp, #20]
 800557c:	2322      	movs	r3, #34	; 0x22
 800557e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80056d8 <_strtod_l+0x598>
 8005582:	f8c9 3000 	str.w	r3, [r9]
 8005586:	f04f 0a00 	mov.w	sl, #0
 800558a:	9b07      	ldr	r3, [sp, #28]
 800558c:	2b00      	cmp	r3, #0
 800558e:	f43f ae16 	beq.w	80051be <_strtod_l+0x7e>
 8005592:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005594:	4648      	mov	r0, r9
 8005596:	f001 feba 	bl	800730e <_Bfree>
 800559a:	9905      	ldr	r1, [sp, #20]
 800559c:	4648      	mov	r0, r9
 800559e:	f001 feb6 	bl	800730e <_Bfree>
 80055a2:	4641      	mov	r1, r8
 80055a4:	4648      	mov	r0, r9
 80055a6:	f001 feb2 	bl	800730e <_Bfree>
 80055aa:	9907      	ldr	r1, [sp, #28]
 80055ac:	4648      	mov	r0, r9
 80055ae:	f001 feae 	bl	800730e <_Bfree>
 80055b2:	4621      	mov	r1, r4
 80055b4:	4648      	mov	r0, r9
 80055b6:	f001 feaa 	bl	800730e <_Bfree>
 80055ba:	e600      	b.n	80051be <_strtod_l+0x7e>
 80055bc:	9a06      	ldr	r2, [sp, #24]
 80055be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80055c2:	4293      	cmp	r3, r2
 80055c4:	dbba      	blt.n	800553c <_strtod_l+0x3fc>
 80055c6:	4d42      	ldr	r5, [pc, #264]	; (80056d0 <_strtod_l+0x590>)
 80055c8:	f1c4 040f 	rsb	r4, r4, #15
 80055cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80055d0:	4652      	mov	r2, sl
 80055d2:	465b      	mov	r3, fp
 80055d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055d8:	f7fb f81e 	bl	8000618 <__aeabi_dmul>
 80055dc:	9b06      	ldr	r3, [sp, #24]
 80055de:	1b1c      	subs	r4, r3, r4
 80055e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80055e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80055e8:	e78d      	b.n	8005506 <_strtod_l+0x3c6>
 80055ea:	f113 0f16 	cmn.w	r3, #22
 80055ee:	dba5      	blt.n	800553c <_strtod_l+0x3fc>
 80055f0:	4a37      	ldr	r2, [pc, #220]	; (80056d0 <_strtod_l+0x590>)
 80055f2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80055f6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80055fa:	4650      	mov	r0, sl
 80055fc:	4659      	mov	r1, fp
 80055fe:	f7fb f935 	bl	800086c <__aeabi_ddiv>
 8005602:	e782      	b.n	800550a <_strtod_l+0x3ca>
 8005604:	2300      	movs	r3, #0
 8005606:	4e33      	ldr	r6, [pc, #204]	; (80056d4 <_strtod_l+0x594>)
 8005608:	ea4f 1828 	mov.w	r8, r8, asr #4
 800560c:	4650      	mov	r0, sl
 800560e:	4659      	mov	r1, fp
 8005610:	461d      	mov	r5, r3
 8005612:	f1b8 0f01 	cmp.w	r8, #1
 8005616:	dc21      	bgt.n	800565c <_strtod_l+0x51c>
 8005618:	b10b      	cbz	r3, 800561e <_strtod_l+0x4de>
 800561a:	4682      	mov	sl, r0
 800561c:	468b      	mov	fp, r1
 800561e:	4b2d      	ldr	r3, [pc, #180]	; (80056d4 <_strtod_l+0x594>)
 8005620:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005624:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005628:	4652      	mov	r2, sl
 800562a:	465b      	mov	r3, fp
 800562c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005630:	f7fa fff2 	bl	8000618 <__aeabi_dmul>
 8005634:	4b28      	ldr	r3, [pc, #160]	; (80056d8 <_strtod_l+0x598>)
 8005636:	460a      	mov	r2, r1
 8005638:	400b      	ands	r3, r1
 800563a:	4928      	ldr	r1, [pc, #160]	; (80056dc <_strtod_l+0x59c>)
 800563c:	428b      	cmp	r3, r1
 800563e:	4682      	mov	sl, r0
 8005640:	d898      	bhi.n	8005574 <_strtod_l+0x434>
 8005642:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005646:	428b      	cmp	r3, r1
 8005648:	bf86      	itte	hi
 800564a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80056e4 <_strtod_l+0x5a4>
 800564e:	f04f 3aff 	movhi.w	sl, #4294967295
 8005652:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005656:	2300      	movs	r3, #0
 8005658:	9304      	str	r3, [sp, #16]
 800565a:	e077      	b.n	800574c <_strtod_l+0x60c>
 800565c:	f018 0f01 	tst.w	r8, #1
 8005660:	d006      	beq.n	8005670 <_strtod_l+0x530>
 8005662:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f7fa ffd5 	bl	8000618 <__aeabi_dmul>
 800566e:	2301      	movs	r3, #1
 8005670:	3501      	adds	r5, #1
 8005672:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005676:	e7cc      	b.n	8005612 <_strtod_l+0x4d2>
 8005678:	d0ed      	beq.n	8005656 <_strtod_l+0x516>
 800567a:	f1c8 0800 	rsb	r8, r8, #0
 800567e:	f018 020f 	ands.w	r2, r8, #15
 8005682:	d00a      	beq.n	800569a <_strtod_l+0x55a>
 8005684:	4b12      	ldr	r3, [pc, #72]	; (80056d0 <_strtod_l+0x590>)
 8005686:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800568a:	4650      	mov	r0, sl
 800568c:	4659      	mov	r1, fp
 800568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005692:	f7fb f8eb 	bl	800086c <__aeabi_ddiv>
 8005696:	4682      	mov	sl, r0
 8005698:	468b      	mov	fp, r1
 800569a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800569e:	d0da      	beq.n	8005656 <_strtod_l+0x516>
 80056a0:	f1b8 0f1f 	cmp.w	r8, #31
 80056a4:	dd20      	ble.n	80056e8 <_strtod_l+0x5a8>
 80056a6:	2400      	movs	r4, #0
 80056a8:	46a0      	mov	r8, r4
 80056aa:	9407      	str	r4, [sp, #28]
 80056ac:	9405      	str	r4, [sp, #20]
 80056ae:	2322      	movs	r3, #34	; 0x22
 80056b0:	f04f 0a00 	mov.w	sl, #0
 80056b4:	f04f 0b00 	mov.w	fp, #0
 80056b8:	f8c9 3000 	str.w	r3, [r9]
 80056bc:	e765      	b.n	800558a <_strtod_l+0x44a>
 80056be:	bf00      	nop
 80056c0:	08008151 	.word	0x08008151
 80056c4:	080081db 	.word	0x080081db
 80056c8:	08008159 	.word	0x08008159
 80056cc:	0800819c 	.word	0x0800819c
 80056d0:	08008218 	.word	0x08008218
 80056d4:	080081f0 	.word	0x080081f0
 80056d8:	7ff00000 	.word	0x7ff00000
 80056dc:	7ca00000 	.word	0x7ca00000
 80056e0:	fff80000 	.word	0xfff80000
 80056e4:	7fefffff 	.word	0x7fefffff
 80056e8:	f018 0310 	ands.w	r3, r8, #16
 80056ec:	bf18      	it	ne
 80056ee:	236a      	movne	r3, #106	; 0x6a
 80056f0:	4da0      	ldr	r5, [pc, #640]	; (8005974 <_strtod_l+0x834>)
 80056f2:	9304      	str	r3, [sp, #16]
 80056f4:	4650      	mov	r0, sl
 80056f6:	4659      	mov	r1, fp
 80056f8:	2300      	movs	r3, #0
 80056fa:	f1b8 0f00 	cmp.w	r8, #0
 80056fe:	f300 810a 	bgt.w	8005916 <_strtod_l+0x7d6>
 8005702:	b10b      	cbz	r3, 8005708 <_strtod_l+0x5c8>
 8005704:	4682      	mov	sl, r0
 8005706:	468b      	mov	fp, r1
 8005708:	9b04      	ldr	r3, [sp, #16]
 800570a:	b1bb      	cbz	r3, 800573c <_strtod_l+0x5fc>
 800570c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005710:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005714:	2b00      	cmp	r3, #0
 8005716:	4659      	mov	r1, fp
 8005718:	dd10      	ble.n	800573c <_strtod_l+0x5fc>
 800571a:	2b1f      	cmp	r3, #31
 800571c:	f340 8107 	ble.w	800592e <_strtod_l+0x7ee>
 8005720:	2b34      	cmp	r3, #52	; 0x34
 8005722:	bfde      	ittt	le
 8005724:	3b20      	suble	r3, #32
 8005726:	f04f 32ff 	movle.w	r2, #4294967295
 800572a:	fa02 f303 	lslle.w	r3, r2, r3
 800572e:	f04f 0a00 	mov.w	sl, #0
 8005732:	bfcc      	ite	gt
 8005734:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005738:	ea03 0b01 	andle.w	fp, r3, r1
 800573c:	2200      	movs	r2, #0
 800573e:	2300      	movs	r3, #0
 8005740:	4650      	mov	r0, sl
 8005742:	4659      	mov	r1, fp
 8005744:	f7fb f9d0 	bl	8000ae8 <__aeabi_dcmpeq>
 8005748:	2800      	cmp	r0, #0
 800574a:	d1ac      	bne.n	80056a6 <_strtod_l+0x566>
 800574c:	9b07      	ldr	r3, [sp, #28]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	9a05      	ldr	r2, [sp, #20]
 8005752:	9908      	ldr	r1, [sp, #32]
 8005754:	4623      	mov	r3, r4
 8005756:	4648      	mov	r0, r9
 8005758:	f001 fe2b 	bl	80073b2 <__s2b>
 800575c:	9007      	str	r0, [sp, #28]
 800575e:	2800      	cmp	r0, #0
 8005760:	f43f af08 	beq.w	8005574 <_strtod_l+0x434>
 8005764:	9a06      	ldr	r2, [sp, #24]
 8005766:	9b06      	ldr	r3, [sp, #24]
 8005768:	2a00      	cmp	r2, #0
 800576a:	f1c3 0300 	rsb	r3, r3, #0
 800576e:	bfa8      	it	ge
 8005770:	2300      	movge	r3, #0
 8005772:	930e      	str	r3, [sp, #56]	; 0x38
 8005774:	2400      	movs	r4, #0
 8005776:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800577a:	9316      	str	r3, [sp, #88]	; 0x58
 800577c:	46a0      	mov	r8, r4
 800577e:	9b07      	ldr	r3, [sp, #28]
 8005780:	4648      	mov	r0, r9
 8005782:	6859      	ldr	r1, [r3, #4]
 8005784:	f001 fd8f 	bl	80072a6 <_Balloc>
 8005788:	9005      	str	r0, [sp, #20]
 800578a:	2800      	cmp	r0, #0
 800578c:	f43f aef6 	beq.w	800557c <_strtod_l+0x43c>
 8005790:	9b07      	ldr	r3, [sp, #28]
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	3202      	adds	r2, #2
 8005796:	f103 010c 	add.w	r1, r3, #12
 800579a:	0092      	lsls	r2, r2, #2
 800579c:	300c      	adds	r0, #12
 800579e:	f001 fd77 	bl	8007290 <memcpy>
 80057a2:	aa1e      	add	r2, sp, #120	; 0x78
 80057a4:	a91d      	add	r1, sp, #116	; 0x74
 80057a6:	ec4b ab10 	vmov	d0, sl, fp
 80057aa:	4648      	mov	r0, r9
 80057ac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80057b0:	f002 f8ba 	bl	8007928 <__d2b>
 80057b4:	901c      	str	r0, [sp, #112]	; 0x70
 80057b6:	2800      	cmp	r0, #0
 80057b8:	f43f aee0 	beq.w	800557c <_strtod_l+0x43c>
 80057bc:	2101      	movs	r1, #1
 80057be:	4648      	mov	r0, r9
 80057c0:	f001 fe83 	bl	80074ca <__i2b>
 80057c4:	4680      	mov	r8, r0
 80057c6:	2800      	cmp	r0, #0
 80057c8:	f43f aed8 	beq.w	800557c <_strtod_l+0x43c>
 80057cc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80057ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80057d0:	2e00      	cmp	r6, #0
 80057d2:	bfab      	itete	ge
 80057d4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80057d6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80057d8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80057da:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80057dc:	bfac      	ite	ge
 80057de:	18f7      	addge	r7, r6, r3
 80057e0:	1b9d      	sublt	r5, r3, r6
 80057e2:	9b04      	ldr	r3, [sp, #16]
 80057e4:	1af6      	subs	r6, r6, r3
 80057e6:	4416      	add	r6, r2
 80057e8:	4b63      	ldr	r3, [pc, #396]	; (8005978 <_strtod_l+0x838>)
 80057ea:	3e01      	subs	r6, #1
 80057ec:	429e      	cmp	r6, r3
 80057ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80057f2:	f280 80af 	bge.w	8005954 <_strtod_l+0x814>
 80057f6:	1b9b      	subs	r3, r3, r6
 80057f8:	2b1f      	cmp	r3, #31
 80057fa:	eba2 0203 	sub.w	r2, r2, r3
 80057fe:	f04f 0101 	mov.w	r1, #1
 8005802:	f300 809b 	bgt.w	800593c <_strtod_l+0x7fc>
 8005806:	fa01 f303 	lsl.w	r3, r1, r3
 800580a:	930f      	str	r3, [sp, #60]	; 0x3c
 800580c:	2300      	movs	r3, #0
 800580e:	930a      	str	r3, [sp, #40]	; 0x28
 8005810:	18be      	adds	r6, r7, r2
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	42b7      	cmp	r7, r6
 8005816:	4415      	add	r5, r2
 8005818:	441d      	add	r5, r3
 800581a:	463b      	mov	r3, r7
 800581c:	bfa8      	it	ge
 800581e:	4633      	movge	r3, r6
 8005820:	42ab      	cmp	r3, r5
 8005822:	bfa8      	it	ge
 8005824:	462b      	movge	r3, r5
 8005826:	2b00      	cmp	r3, #0
 8005828:	bfc2      	ittt	gt
 800582a:	1af6      	subgt	r6, r6, r3
 800582c:	1aed      	subgt	r5, r5, r3
 800582e:	1aff      	subgt	r7, r7, r3
 8005830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005832:	b1bb      	cbz	r3, 8005864 <_strtod_l+0x724>
 8005834:	4641      	mov	r1, r8
 8005836:	461a      	mov	r2, r3
 8005838:	4648      	mov	r0, r9
 800583a:	f001 fee5 	bl	8007608 <__pow5mult>
 800583e:	4680      	mov	r8, r0
 8005840:	2800      	cmp	r0, #0
 8005842:	f43f ae9b 	beq.w	800557c <_strtod_l+0x43c>
 8005846:	4601      	mov	r1, r0
 8005848:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800584a:	4648      	mov	r0, r9
 800584c:	f001 fe46 	bl	80074dc <__multiply>
 8005850:	900c      	str	r0, [sp, #48]	; 0x30
 8005852:	2800      	cmp	r0, #0
 8005854:	f43f ae92 	beq.w	800557c <_strtod_l+0x43c>
 8005858:	991c      	ldr	r1, [sp, #112]	; 0x70
 800585a:	4648      	mov	r0, r9
 800585c:	f001 fd57 	bl	800730e <_Bfree>
 8005860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005862:	931c      	str	r3, [sp, #112]	; 0x70
 8005864:	2e00      	cmp	r6, #0
 8005866:	dc7a      	bgt.n	800595e <_strtod_l+0x81e>
 8005868:	9b06      	ldr	r3, [sp, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	dd08      	ble.n	8005880 <_strtod_l+0x740>
 800586e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005870:	9905      	ldr	r1, [sp, #20]
 8005872:	4648      	mov	r0, r9
 8005874:	f001 fec8 	bl	8007608 <__pow5mult>
 8005878:	9005      	str	r0, [sp, #20]
 800587a:	2800      	cmp	r0, #0
 800587c:	f43f ae7e 	beq.w	800557c <_strtod_l+0x43c>
 8005880:	2d00      	cmp	r5, #0
 8005882:	dd08      	ble.n	8005896 <_strtod_l+0x756>
 8005884:	462a      	mov	r2, r5
 8005886:	9905      	ldr	r1, [sp, #20]
 8005888:	4648      	mov	r0, r9
 800588a:	f001 ff0b 	bl	80076a4 <__lshift>
 800588e:	9005      	str	r0, [sp, #20]
 8005890:	2800      	cmp	r0, #0
 8005892:	f43f ae73 	beq.w	800557c <_strtod_l+0x43c>
 8005896:	2f00      	cmp	r7, #0
 8005898:	dd08      	ble.n	80058ac <_strtod_l+0x76c>
 800589a:	4641      	mov	r1, r8
 800589c:	463a      	mov	r2, r7
 800589e:	4648      	mov	r0, r9
 80058a0:	f001 ff00 	bl	80076a4 <__lshift>
 80058a4:	4680      	mov	r8, r0
 80058a6:	2800      	cmp	r0, #0
 80058a8:	f43f ae68 	beq.w	800557c <_strtod_l+0x43c>
 80058ac:	9a05      	ldr	r2, [sp, #20]
 80058ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80058b0:	4648      	mov	r0, r9
 80058b2:	f001 ff65 	bl	8007780 <__mdiff>
 80058b6:	4604      	mov	r4, r0
 80058b8:	2800      	cmp	r0, #0
 80058ba:	f43f ae5f 	beq.w	800557c <_strtod_l+0x43c>
 80058be:	68c3      	ldr	r3, [r0, #12]
 80058c0:	930c      	str	r3, [sp, #48]	; 0x30
 80058c2:	2300      	movs	r3, #0
 80058c4:	60c3      	str	r3, [r0, #12]
 80058c6:	4641      	mov	r1, r8
 80058c8:	f001 ff40 	bl	800774c <__mcmp>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	da55      	bge.n	800597c <_strtod_l+0x83c>
 80058d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058d2:	b9e3      	cbnz	r3, 800590e <_strtod_l+0x7ce>
 80058d4:	f1ba 0f00 	cmp.w	sl, #0
 80058d8:	d119      	bne.n	800590e <_strtod_l+0x7ce>
 80058da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058de:	b9b3      	cbnz	r3, 800590e <_strtod_l+0x7ce>
 80058e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80058e4:	0d1b      	lsrs	r3, r3, #20
 80058e6:	051b      	lsls	r3, r3, #20
 80058e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80058ec:	d90f      	bls.n	800590e <_strtod_l+0x7ce>
 80058ee:	6963      	ldr	r3, [r4, #20]
 80058f0:	b913      	cbnz	r3, 80058f8 <_strtod_l+0x7b8>
 80058f2:	6923      	ldr	r3, [r4, #16]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	dd0a      	ble.n	800590e <_strtod_l+0x7ce>
 80058f8:	4621      	mov	r1, r4
 80058fa:	2201      	movs	r2, #1
 80058fc:	4648      	mov	r0, r9
 80058fe:	f001 fed1 	bl	80076a4 <__lshift>
 8005902:	4641      	mov	r1, r8
 8005904:	4604      	mov	r4, r0
 8005906:	f001 ff21 	bl	800774c <__mcmp>
 800590a:	2800      	cmp	r0, #0
 800590c:	dc67      	bgt.n	80059de <_strtod_l+0x89e>
 800590e:	9b04      	ldr	r3, [sp, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d171      	bne.n	80059f8 <_strtod_l+0x8b8>
 8005914:	e63d      	b.n	8005592 <_strtod_l+0x452>
 8005916:	f018 0f01 	tst.w	r8, #1
 800591a:	d004      	beq.n	8005926 <_strtod_l+0x7e6>
 800591c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005920:	f7fa fe7a 	bl	8000618 <__aeabi_dmul>
 8005924:	2301      	movs	r3, #1
 8005926:	ea4f 0868 	mov.w	r8, r8, asr #1
 800592a:	3508      	adds	r5, #8
 800592c:	e6e5      	b.n	80056fa <_strtod_l+0x5ba>
 800592e:	f04f 32ff 	mov.w	r2, #4294967295
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	ea03 0a0a 	and.w	sl, r3, sl
 800593a:	e6ff      	b.n	800573c <_strtod_l+0x5fc>
 800593c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8005940:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005944:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005948:	36e2      	adds	r6, #226	; 0xe2
 800594a:	fa01 f306 	lsl.w	r3, r1, r6
 800594e:	930a      	str	r3, [sp, #40]	; 0x28
 8005950:	910f      	str	r1, [sp, #60]	; 0x3c
 8005952:	e75d      	b.n	8005810 <_strtod_l+0x6d0>
 8005954:	2300      	movs	r3, #0
 8005956:	930a      	str	r3, [sp, #40]	; 0x28
 8005958:	2301      	movs	r3, #1
 800595a:	930f      	str	r3, [sp, #60]	; 0x3c
 800595c:	e758      	b.n	8005810 <_strtod_l+0x6d0>
 800595e:	4632      	mov	r2, r6
 8005960:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005962:	4648      	mov	r0, r9
 8005964:	f001 fe9e 	bl	80076a4 <__lshift>
 8005968:	901c      	str	r0, [sp, #112]	; 0x70
 800596a:	2800      	cmp	r0, #0
 800596c:	f47f af7c 	bne.w	8005868 <_strtod_l+0x728>
 8005970:	e604      	b.n	800557c <_strtod_l+0x43c>
 8005972:	bf00      	nop
 8005974:	080081b0 	.word	0x080081b0
 8005978:	fffffc02 	.word	0xfffffc02
 800597c:	465d      	mov	r5, fp
 800597e:	f040 8086 	bne.w	8005a8e <_strtod_l+0x94e>
 8005982:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005984:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005988:	b32a      	cbz	r2, 80059d6 <_strtod_l+0x896>
 800598a:	4aaf      	ldr	r2, [pc, #700]	; (8005c48 <_strtod_l+0xb08>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d153      	bne.n	8005a38 <_strtod_l+0x8f8>
 8005990:	9b04      	ldr	r3, [sp, #16]
 8005992:	4650      	mov	r0, sl
 8005994:	b1d3      	cbz	r3, 80059cc <_strtod_l+0x88c>
 8005996:	4aad      	ldr	r2, [pc, #692]	; (8005c4c <_strtod_l+0xb0c>)
 8005998:	402a      	ands	r2, r5
 800599a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800599e:	f04f 31ff 	mov.w	r1, #4294967295
 80059a2:	d816      	bhi.n	80059d2 <_strtod_l+0x892>
 80059a4:	0d12      	lsrs	r2, r2, #20
 80059a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80059aa:	fa01 f303 	lsl.w	r3, r1, r3
 80059ae:	4298      	cmp	r0, r3
 80059b0:	d142      	bne.n	8005a38 <_strtod_l+0x8f8>
 80059b2:	4ba7      	ldr	r3, [pc, #668]	; (8005c50 <_strtod_l+0xb10>)
 80059b4:	429d      	cmp	r5, r3
 80059b6:	d102      	bne.n	80059be <_strtod_l+0x87e>
 80059b8:	3001      	adds	r0, #1
 80059ba:	f43f addf 	beq.w	800557c <_strtod_l+0x43c>
 80059be:	4ba3      	ldr	r3, [pc, #652]	; (8005c4c <_strtod_l+0xb0c>)
 80059c0:	402b      	ands	r3, r5
 80059c2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80059c6:	f04f 0a00 	mov.w	sl, #0
 80059ca:	e7a0      	b.n	800590e <_strtod_l+0x7ce>
 80059cc:	f04f 33ff 	mov.w	r3, #4294967295
 80059d0:	e7ed      	b.n	80059ae <_strtod_l+0x86e>
 80059d2:	460b      	mov	r3, r1
 80059d4:	e7eb      	b.n	80059ae <_strtod_l+0x86e>
 80059d6:	bb7b      	cbnz	r3, 8005a38 <_strtod_l+0x8f8>
 80059d8:	f1ba 0f00 	cmp.w	sl, #0
 80059dc:	d12c      	bne.n	8005a38 <_strtod_l+0x8f8>
 80059de:	9904      	ldr	r1, [sp, #16]
 80059e0:	4a9a      	ldr	r2, [pc, #616]	; (8005c4c <_strtod_l+0xb0c>)
 80059e2:	465b      	mov	r3, fp
 80059e4:	b1f1      	cbz	r1, 8005a24 <_strtod_l+0x8e4>
 80059e6:	ea02 010b 	and.w	r1, r2, fp
 80059ea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80059ee:	dc19      	bgt.n	8005a24 <_strtod_l+0x8e4>
 80059f0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80059f4:	f77f ae5b 	ble.w	80056ae <_strtod_l+0x56e>
 80059f8:	4a96      	ldr	r2, [pc, #600]	; (8005c54 <_strtod_l+0xb14>)
 80059fa:	2300      	movs	r3, #0
 80059fc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005a00:	4650      	mov	r0, sl
 8005a02:	4659      	mov	r1, fp
 8005a04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005a08:	f7fa fe06 	bl	8000618 <__aeabi_dmul>
 8005a0c:	4682      	mov	sl, r0
 8005a0e:	468b      	mov	fp, r1
 8005a10:	2900      	cmp	r1, #0
 8005a12:	f47f adbe 	bne.w	8005592 <_strtod_l+0x452>
 8005a16:	2800      	cmp	r0, #0
 8005a18:	f47f adbb 	bne.w	8005592 <_strtod_l+0x452>
 8005a1c:	2322      	movs	r3, #34	; 0x22
 8005a1e:	f8c9 3000 	str.w	r3, [r9]
 8005a22:	e5b6      	b.n	8005592 <_strtod_l+0x452>
 8005a24:	4013      	ands	r3, r2
 8005a26:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005a2a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005a2e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005a32:	f04f 3aff 	mov.w	sl, #4294967295
 8005a36:	e76a      	b.n	800590e <_strtod_l+0x7ce>
 8005a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a3a:	b193      	cbz	r3, 8005a62 <_strtod_l+0x922>
 8005a3c:	422b      	tst	r3, r5
 8005a3e:	f43f af66 	beq.w	800590e <_strtod_l+0x7ce>
 8005a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a44:	9a04      	ldr	r2, [sp, #16]
 8005a46:	4650      	mov	r0, sl
 8005a48:	4659      	mov	r1, fp
 8005a4a:	b173      	cbz	r3, 8005a6a <_strtod_l+0x92a>
 8005a4c:	f7ff fb5c 	bl	8005108 <sulp>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a58:	f7fa fc28 	bl	80002ac <__adddf3>
 8005a5c:	4682      	mov	sl, r0
 8005a5e:	468b      	mov	fp, r1
 8005a60:	e755      	b.n	800590e <_strtod_l+0x7ce>
 8005a62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a64:	ea13 0f0a 	tst.w	r3, sl
 8005a68:	e7e9      	b.n	8005a3e <_strtod_l+0x8fe>
 8005a6a:	f7ff fb4d 	bl	8005108 <sulp>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a76:	f7fa fc17 	bl	80002a8 <__aeabi_dsub>
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	4682      	mov	sl, r0
 8005a80:	468b      	mov	fp, r1
 8005a82:	f7fb f831 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	f47f ae11 	bne.w	80056ae <_strtod_l+0x56e>
 8005a8c:	e73f      	b.n	800590e <_strtod_l+0x7ce>
 8005a8e:	4641      	mov	r1, r8
 8005a90:	4620      	mov	r0, r4
 8005a92:	f001 ff98 	bl	80079c6 <__ratio>
 8005a96:	ec57 6b10 	vmov	r6, r7, d0
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005aa0:	ee10 0a10 	vmov	r0, s0
 8005aa4:	4639      	mov	r1, r7
 8005aa6:	f7fb f833 	bl	8000b10 <__aeabi_dcmple>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	d077      	beq.n	8005b9e <_strtod_l+0xa5e>
 8005aae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d04a      	beq.n	8005b4a <_strtod_l+0xa0a>
 8005ab4:	4b68      	ldr	r3, [pc, #416]	; (8005c58 <_strtod_l+0xb18>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005abc:	4f66      	ldr	r7, [pc, #408]	; (8005c58 <_strtod_l+0xb18>)
 8005abe:	2600      	movs	r6, #0
 8005ac0:	4b62      	ldr	r3, [pc, #392]	; (8005c4c <_strtod_l+0xb0c>)
 8005ac2:	402b      	ands	r3, r5
 8005ac4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ac6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ac8:	4b64      	ldr	r3, [pc, #400]	; (8005c5c <_strtod_l+0xb1c>)
 8005aca:	429a      	cmp	r2, r3
 8005acc:	f040 80ce 	bne.w	8005c6c <_strtod_l+0xb2c>
 8005ad0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ad4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ad8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8005adc:	ec4b ab10 	vmov	d0, sl, fp
 8005ae0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005ae4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ae8:	f001 fea8 	bl	800783c <__ulp>
 8005aec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005af0:	ec53 2b10 	vmov	r2, r3, d0
 8005af4:	f7fa fd90 	bl	8000618 <__aeabi_dmul>
 8005af8:	4652      	mov	r2, sl
 8005afa:	465b      	mov	r3, fp
 8005afc:	f7fa fbd6 	bl	80002ac <__adddf3>
 8005b00:	460b      	mov	r3, r1
 8005b02:	4952      	ldr	r1, [pc, #328]	; (8005c4c <_strtod_l+0xb0c>)
 8005b04:	4a56      	ldr	r2, [pc, #344]	; (8005c60 <_strtod_l+0xb20>)
 8005b06:	4019      	ands	r1, r3
 8005b08:	4291      	cmp	r1, r2
 8005b0a:	4682      	mov	sl, r0
 8005b0c:	d95b      	bls.n	8005bc6 <_strtod_l+0xa86>
 8005b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b10:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d103      	bne.n	8005b20 <_strtod_l+0x9e0>
 8005b18:	9b08      	ldr	r3, [sp, #32]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	f43f ad2e 	beq.w	800557c <_strtod_l+0x43c>
 8005b20:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005c50 <_strtod_l+0xb10>
 8005b24:	f04f 3aff 	mov.w	sl, #4294967295
 8005b28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005b2a:	4648      	mov	r0, r9
 8005b2c:	f001 fbef 	bl	800730e <_Bfree>
 8005b30:	9905      	ldr	r1, [sp, #20]
 8005b32:	4648      	mov	r0, r9
 8005b34:	f001 fbeb 	bl	800730e <_Bfree>
 8005b38:	4641      	mov	r1, r8
 8005b3a:	4648      	mov	r0, r9
 8005b3c:	f001 fbe7 	bl	800730e <_Bfree>
 8005b40:	4621      	mov	r1, r4
 8005b42:	4648      	mov	r0, r9
 8005b44:	f001 fbe3 	bl	800730e <_Bfree>
 8005b48:	e619      	b.n	800577e <_strtod_l+0x63e>
 8005b4a:	f1ba 0f00 	cmp.w	sl, #0
 8005b4e:	d11a      	bne.n	8005b86 <_strtod_l+0xa46>
 8005b50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b54:	b9eb      	cbnz	r3, 8005b92 <_strtod_l+0xa52>
 8005b56:	2200      	movs	r2, #0
 8005b58:	4b3f      	ldr	r3, [pc, #252]	; (8005c58 <_strtod_l+0xb18>)
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	f7fa ffcd 	bl	8000afc <__aeabi_dcmplt>
 8005b62:	b9c8      	cbnz	r0, 8005b98 <_strtod_l+0xa58>
 8005b64:	4630      	mov	r0, r6
 8005b66:	4639      	mov	r1, r7
 8005b68:	2200      	movs	r2, #0
 8005b6a:	4b3e      	ldr	r3, [pc, #248]	; (8005c64 <_strtod_l+0xb24>)
 8005b6c:	f7fa fd54 	bl	8000618 <__aeabi_dmul>
 8005b70:	4606      	mov	r6, r0
 8005b72:	460f      	mov	r7, r1
 8005b74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005b78:	9618      	str	r6, [sp, #96]	; 0x60
 8005b7a:	9319      	str	r3, [sp, #100]	; 0x64
 8005b7c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005b80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005b84:	e79c      	b.n	8005ac0 <_strtod_l+0x980>
 8005b86:	f1ba 0f01 	cmp.w	sl, #1
 8005b8a:	d102      	bne.n	8005b92 <_strtod_l+0xa52>
 8005b8c:	2d00      	cmp	r5, #0
 8005b8e:	f43f ad8e 	beq.w	80056ae <_strtod_l+0x56e>
 8005b92:	2200      	movs	r2, #0
 8005b94:	4b34      	ldr	r3, [pc, #208]	; (8005c68 <_strtod_l+0xb28>)
 8005b96:	e78f      	b.n	8005ab8 <_strtod_l+0x978>
 8005b98:	2600      	movs	r6, #0
 8005b9a:	4f32      	ldr	r7, [pc, #200]	; (8005c64 <_strtod_l+0xb24>)
 8005b9c:	e7ea      	b.n	8005b74 <_strtod_l+0xa34>
 8005b9e:	4b31      	ldr	r3, [pc, #196]	; (8005c64 <_strtod_l+0xb24>)
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	4639      	mov	r1, r7
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f7fa fd37 	bl	8000618 <__aeabi_dmul>
 8005baa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bac:	4606      	mov	r6, r0
 8005bae:	460f      	mov	r7, r1
 8005bb0:	b933      	cbnz	r3, 8005bc0 <_strtod_l+0xa80>
 8005bb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bb6:	9010      	str	r0, [sp, #64]	; 0x40
 8005bb8:	9311      	str	r3, [sp, #68]	; 0x44
 8005bba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005bbe:	e7df      	b.n	8005b80 <_strtod_l+0xa40>
 8005bc0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005bc4:	e7f9      	b.n	8005bba <_strtod_l+0xa7a>
 8005bc6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005bca:	9b04      	ldr	r3, [sp, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1ab      	bne.n	8005b28 <_strtod_l+0x9e8>
 8005bd0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005bd4:	0d1b      	lsrs	r3, r3, #20
 8005bd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bd8:	051b      	lsls	r3, r3, #20
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	465d      	mov	r5, fp
 8005bde:	d1a3      	bne.n	8005b28 <_strtod_l+0x9e8>
 8005be0:	4639      	mov	r1, r7
 8005be2:	4630      	mov	r0, r6
 8005be4:	f7fa ffc8 	bl	8000b78 <__aeabi_d2iz>
 8005be8:	f7fa fcac 	bl	8000544 <__aeabi_i2d>
 8005bec:	460b      	mov	r3, r1
 8005bee:	4602      	mov	r2, r0
 8005bf0:	4639      	mov	r1, r7
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f7fa fb58 	bl	80002a8 <__aeabi_dsub>
 8005bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	460f      	mov	r7, r1
 8005bfe:	b933      	cbnz	r3, 8005c0e <_strtod_l+0xace>
 8005c00:	f1ba 0f00 	cmp.w	sl, #0
 8005c04:	d103      	bne.n	8005c0e <_strtod_l+0xace>
 8005c06:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8005c0a:	2d00      	cmp	r5, #0
 8005c0c:	d06d      	beq.n	8005cea <_strtod_l+0xbaa>
 8005c0e:	a30a      	add	r3, pc, #40	; (adr r3, 8005c38 <_strtod_l+0xaf8>)
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	4630      	mov	r0, r6
 8005c16:	4639      	mov	r1, r7
 8005c18:	f7fa ff70 	bl	8000afc <__aeabi_dcmplt>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	f47f acb8 	bne.w	8005592 <_strtod_l+0x452>
 8005c22:	a307      	add	r3, pc, #28	; (adr r3, 8005c40 <_strtod_l+0xb00>)
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	4630      	mov	r0, r6
 8005c2a:	4639      	mov	r1, r7
 8005c2c:	f7fa ff84 	bl	8000b38 <__aeabi_dcmpgt>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	f43f af79 	beq.w	8005b28 <_strtod_l+0x9e8>
 8005c36:	e4ac      	b.n	8005592 <_strtod_l+0x452>
 8005c38:	94a03595 	.word	0x94a03595
 8005c3c:	3fdfffff 	.word	0x3fdfffff
 8005c40:	35afe535 	.word	0x35afe535
 8005c44:	3fe00000 	.word	0x3fe00000
 8005c48:	000fffff 	.word	0x000fffff
 8005c4c:	7ff00000 	.word	0x7ff00000
 8005c50:	7fefffff 	.word	0x7fefffff
 8005c54:	39500000 	.word	0x39500000
 8005c58:	3ff00000 	.word	0x3ff00000
 8005c5c:	7fe00000 	.word	0x7fe00000
 8005c60:	7c9fffff 	.word	0x7c9fffff
 8005c64:	3fe00000 	.word	0x3fe00000
 8005c68:	bff00000 	.word	0xbff00000
 8005c6c:	9b04      	ldr	r3, [sp, #16]
 8005c6e:	b333      	cbz	r3, 8005cbe <_strtod_l+0xb7e>
 8005c70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c72:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005c76:	d822      	bhi.n	8005cbe <_strtod_l+0xb7e>
 8005c78:	a327      	add	r3, pc, #156	; (adr r3, 8005d18 <_strtod_l+0xbd8>)
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	4630      	mov	r0, r6
 8005c80:	4639      	mov	r1, r7
 8005c82:	f7fa ff45 	bl	8000b10 <__aeabi_dcmple>
 8005c86:	b1a0      	cbz	r0, 8005cb2 <_strtod_l+0xb72>
 8005c88:	4639      	mov	r1, r7
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	f7fa ff9c 	bl	8000bc8 <__aeabi_d2uiz>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	bf08      	it	eq
 8005c94:	2001      	moveq	r0, #1
 8005c96:	f7fa fc45 	bl	8000524 <__aeabi_ui2d>
 8005c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	460f      	mov	r7, r1
 8005ca0:	bb03      	cbnz	r3, 8005ce4 <_strtod_l+0xba4>
 8005ca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ca6:	9012      	str	r0, [sp, #72]	; 0x48
 8005ca8:	9313      	str	r3, [sp, #76]	; 0x4c
 8005caa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005cae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cb6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005cba:	1a9b      	subs	r3, r3, r2
 8005cbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cbe:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005cc2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005cc6:	f001 fdb9 	bl	800783c <__ulp>
 8005cca:	4650      	mov	r0, sl
 8005ccc:	ec53 2b10 	vmov	r2, r3, d0
 8005cd0:	4659      	mov	r1, fp
 8005cd2:	f7fa fca1 	bl	8000618 <__aeabi_dmul>
 8005cd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005cda:	f7fa fae7 	bl	80002ac <__adddf3>
 8005cde:	4682      	mov	sl, r0
 8005ce0:	468b      	mov	fp, r1
 8005ce2:	e772      	b.n	8005bca <_strtod_l+0xa8a>
 8005ce4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005ce8:	e7df      	b.n	8005caa <_strtod_l+0xb6a>
 8005cea:	a30d      	add	r3, pc, #52	; (adr r3, 8005d20 <_strtod_l+0xbe0>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f7fa ff04 	bl	8000afc <__aeabi_dcmplt>
 8005cf4:	e79c      	b.n	8005c30 <_strtod_l+0xaf0>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	930d      	str	r3, [sp, #52]	; 0x34
 8005cfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005cfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	f7ff ba61 	b.w	80051c6 <_strtod_l+0x86>
 8005d04:	2b65      	cmp	r3, #101	; 0x65
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	f43f ab4e 	beq.w	80053aa <_strtod_l+0x26a>
 8005d0e:	2101      	movs	r1, #1
 8005d10:	4614      	mov	r4, r2
 8005d12:	9104      	str	r1, [sp, #16]
 8005d14:	f7ff bacb 	b.w	80052ae <_strtod_l+0x16e>
 8005d18:	ffc00000 	.word	0xffc00000
 8005d1c:	41dfffff 	.word	0x41dfffff
 8005d20:	94a03595 	.word	0x94a03595
 8005d24:	3fcfffff 	.word	0x3fcfffff

08005d28 <_strtod_r>:
 8005d28:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <_strtod_r+0x18>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	b410      	push	{r4}
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	4c04      	ldr	r4, [pc, #16]	; (8005d44 <_strtod_r+0x1c>)
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	bf08      	it	eq
 8005d36:	4623      	moveq	r3, r4
 8005d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d3c:	f7ff ba00 	b.w	8005140 <_strtod_l>
 8005d40:	2000002c 	.word	0x2000002c
 8005d44:	20000090 	.word	0x20000090

08005d48 <strtod>:
 8005d48:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <strtod+0x20>)
 8005d4a:	4a08      	ldr	r2, [pc, #32]	; (8005d6c <strtod+0x24>)
 8005d4c:	b410      	push	{r4}
 8005d4e:	681c      	ldr	r4, [r3, #0]
 8005d50:	6a23      	ldr	r3, [r4, #32]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	bf08      	it	eq
 8005d56:	4613      	moveq	r3, r2
 8005d58:	460a      	mov	r2, r1
 8005d5a:	4601      	mov	r1, r0
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d62:	f7ff b9ed 	b.w	8005140 <_strtod_l>
 8005d66:	bf00      	nop
 8005d68:	2000002c 	.word	0x2000002c
 8005d6c:	20000090 	.word	0x20000090

08005d70 <strtok>:
 8005d70:	4b13      	ldr	r3, [pc, #76]	; (8005dc0 <strtok+0x50>)
 8005d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d76:	681d      	ldr	r5, [r3, #0]
 8005d78:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8005d7a:	4606      	mov	r6, r0
 8005d7c:	460f      	mov	r7, r1
 8005d7e:	b9b4      	cbnz	r4, 8005dae <strtok+0x3e>
 8005d80:	2050      	movs	r0, #80	; 0x50
 8005d82:	f001 fa6b 	bl	800725c <malloc>
 8005d86:	65a8      	str	r0, [r5, #88]	; 0x58
 8005d88:	e9c0 4400 	strd	r4, r4, [r0]
 8005d8c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005d90:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005d94:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005d98:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005d9c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005da0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005da4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005da8:	6184      	str	r4, [r0, #24]
 8005daa:	7704      	strb	r4, [r0, #28]
 8005dac:	6244      	str	r4, [r0, #36]	; 0x24
 8005dae:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8005db0:	4639      	mov	r1, r7
 8005db2:	4630      	mov	r0, r6
 8005db4:	2301      	movs	r3, #1
 8005db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dba:	f000 b803 	b.w	8005dc4 <__strtok_r>
 8005dbe:	bf00      	nop
 8005dc0:	2000002c 	.word	0x2000002c

08005dc4 <__strtok_r>:
 8005dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dc6:	b918      	cbnz	r0, 8005dd0 <__strtok_r+0xc>
 8005dc8:	6810      	ldr	r0, [r2, #0]
 8005dca:	b908      	cbnz	r0, 8005dd0 <__strtok_r+0xc>
 8005dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dce:	4620      	mov	r0, r4
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	460f      	mov	r7, r1
 8005dd4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005dd8:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005ddc:	b91e      	cbnz	r6, 8005de6 <__strtok_r+0x22>
 8005dde:	b96d      	cbnz	r5, 8005dfc <__strtok_r+0x38>
 8005de0:	6015      	str	r5, [r2, #0]
 8005de2:	4628      	mov	r0, r5
 8005de4:	e7f2      	b.n	8005dcc <__strtok_r+0x8>
 8005de6:	42b5      	cmp	r5, r6
 8005de8:	d1f6      	bne.n	8005dd8 <__strtok_r+0x14>
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1ef      	bne.n	8005dce <__strtok_r+0xa>
 8005dee:	6014      	str	r4, [r2, #0]
 8005df0:	7003      	strb	r3, [r0, #0]
 8005df2:	e7eb      	b.n	8005dcc <__strtok_r+0x8>
 8005df4:	462b      	mov	r3, r5
 8005df6:	e00d      	b.n	8005e14 <__strtok_r+0x50>
 8005df8:	b926      	cbnz	r6, 8005e04 <__strtok_r+0x40>
 8005dfa:	461c      	mov	r4, r3
 8005dfc:	4623      	mov	r3, r4
 8005dfe:	460f      	mov	r7, r1
 8005e00:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005e04:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005e08:	42b5      	cmp	r5, r6
 8005e0a:	d1f5      	bne.n	8005df8 <__strtok_r+0x34>
 8005e0c:	2d00      	cmp	r5, #0
 8005e0e:	d0f1      	beq.n	8005df4 <__strtok_r+0x30>
 8005e10:	2100      	movs	r1, #0
 8005e12:	7021      	strb	r1, [r4, #0]
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	e7d9      	b.n	8005dcc <__strtok_r+0x8>

08005e18 <_strtol_l.isra.0>:
 8005e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e1c:	4680      	mov	r8, r0
 8005e1e:	4689      	mov	r9, r1
 8005e20:	4692      	mov	sl, r2
 8005e22:	461e      	mov	r6, r3
 8005e24:	460f      	mov	r7, r1
 8005e26:	463d      	mov	r5, r7
 8005e28:	9808      	ldr	r0, [sp, #32]
 8005e2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e2e:	f001 fa01 	bl	8007234 <__locale_ctype_ptr_l>
 8005e32:	4420      	add	r0, r4
 8005e34:	7843      	ldrb	r3, [r0, #1]
 8005e36:	f013 0308 	ands.w	r3, r3, #8
 8005e3a:	d132      	bne.n	8005ea2 <_strtol_l.isra.0+0x8a>
 8005e3c:	2c2d      	cmp	r4, #45	; 0x2d
 8005e3e:	d132      	bne.n	8005ea6 <_strtol_l.isra.0+0x8e>
 8005e40:	787c      	ldrb	r4, [r7, #1]
 8005e42:	1cbd      	adds	r5, r7, #2
 8005e44:	2201      	movs	r2, #1
 8005e46:	2e00      	cmp	r6, #0
 8005e48:	d05d      	beq.n	8005f06 <_strtol_l.isra.0+0xee>
 8005e4a:	2e10      	cmp	r6, #16
 8005e4c:	d109      	bne.n	8005e62 <_strtol_l.isra.0+0x4a>
 8005e4e:	2c30      	cmp	r4, #48	; 0x30
 8005e50:	d107      	bne.n	8005e62 <_strtol_l.isra.0+0x4a>
 8005e52:	782b      	ldrb	r3, [r5, #0]
 8005e54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005e58:	2b58      	cmp	r3, #88	; 0x58
 8005e5a:	d14f      	bne.n	8005efc <_strtol_l.isra.0+0xe4>
 8005e5c:	786c      	ldrb	r4, [r5, #1]
 8005e5e:	2610      	movs	r6, #16
 8005e60:	3502      	adds	r5, #2
 8005e62:	2a00      	cmp	r2, #0
 8005e64:	bf14      	ite	ne
 8005e66:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005e6a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005e6e:	2700      	movs	r7, #0
 8005e70:	fbb1 fcf6 	udiv	ip, r1, r6
 8005e74:	4638      	mov	r0, r7
 8005e76:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005e7a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005e7e:	2b09      	cmp	r3, #9
 8005e80:	d817      	bhi.n	8005eb2 <_strtol_l.isra.0+0x9a>
 8005e82:	461c      	mov	r4, r3
 8005e84:	42a6      	cmp	r6, r4
 8005e86:	dd23      	ble.n	8005ed0 <_strtol_l.isra.0+0xb8>
 8005e88:	1c7b      	adds	r3, r7, #1
 8005e8a:	d007      	beq.n	8005e9c <_strtol_l.isra.0+0x84>
 8005e8c:	4584      	cmp	ip, r0
 8005e8e:	d31c      	bcc.n	8005eca <_strtol_l.isra.0+0xb2>
 8005e90:	d101      	bne.n	8005e96 <_strtol_l.isra.0+0x7e>
 8005e92:	45a6      	cmp	lr, r4
 8005e94:	db19      	blt.n	8005eca <_strtol_l.isra.0+0xb2>
 8005e96:	fb00 4006 	mla	r0, r0, r6, r4
 8005e9a:	2701      	movs	r7, #1
 8005e9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ea0:	e7eb      	b.n	8005e7a <_strtol_l.isra.0+0x62>
 8005ea2:	462f      	mov	r7, r5
 8005ea4:	e7bf      	b.n	8005e26 <_strtol_l.isra.0+0xe>
 8005ea6:	2c2b      	cmp	r4, #43	; 0x2b
 8005ea8:	bf04      	itt	eq
 8005eaa:	1cbd      	addeq	r5, r7, #2
 8005eac:	787c      	ldrbeq	r4, [r7, #1]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	e7c9      	b.n	8005e46 <_strtol_l.isra.0+0x2e>
 8005eb2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005eb6:	2b19      	cmp	r3, #25
 8005eb8:	d801      	bhi.n	8005ebe <_strtol_l.isra.0+0xa6>
 8005eba:	3c37      	subs	r4, #55	; 0x37
 8005ebc:	e7e2      	b.n	8005e84 <_strtol_l.isra.0+0x6c>
 8005ebe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005ec2:	2b19      	cmp	r3, #25
 8005ec4:	d804      	bhi.n	8005ed0 <_strtol_l.isra.0+0xb8>
 8005ec6:	3c57      	subs	r4, #87	; 0x57
 8005ec8:	e7dc      	b.n	8005e84 <_strtol_l.isra.0+0x6c>
 8005eca:	f04f 37ff 	mov.w	r7, #4294967295
 8005ece:	e7e5      	b.n	8005e9c <_strtol_l.isra.0+0x84>
 8005ed0:	1c7b      	adds	r3, r7, #1
 8005ed2:	d108      	bne.n	8005ee6 <_strtol_l.isra.0+0xce>
 8005ed4:	2322      	movs	r3, #34	; 0x22
 8005ed6:	f8c8 3000 	str.w	r3, [r8]
 8005eda:	4608      	mov	r0, r1
 8005edc:	f1ba 0f00 	cmp.w	sl, #0
 8005ee0:	d107      	bne.n	8005ef2 <_strtol_l.isra.0+0xda>
 8005ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee6:	b102      	cbz	r2, 8005eea <_strtol_l.isra.0+0xd2>
 8005ee8:	4240      	negs	r0, r0
 8005eea:	f1ba 0f00 	cmp.w	sl, #0
 8005eee:	d0f8      	beq.n	8005ee2 <_strtol_l.isra.0+0xca>
 8005ef0:	b10f      	cbz	r7, 8005ef6 <_strtol_l.isra.0+0xde>
 8005ef2:	f105 39ff 	add.w	r9, r5, #4294967295
 8005ef6:	f8ca 9000 	str.w	r9, [sl]
 8005efa:	e7f2      	b.n	8005ee2 <_strtol_l.isra.0+0xca>
 8005efc:	2430      	movs	r4, #48	; 0x30
 8005efe:	2e00      	cmp	r6, #0
 8005f00:	d1af      	bne.n	8005e62 <_strtol_l.isra.0+0x4a>
 8005f02:	2608      	movs	r6, #8
 8005f04:	e7ad      	b.n	8005e62 <_strtol_l.isra.0+0x4a>
 8005f06:	2c30      	cmp	r4, #48	; 0x30
 8005f08:	d0a3      	beq.n	8005e52 <_strtol_l.isra.0+0x3a>
 8005f0a:	260a      	movs	r6, #10
 8005f0c:	e7a9      	b.n	8005e62 <_strtol_l.isra.0+0x4a>
	...

08005f10 <_strtol_r>:
 8005f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f12:	4c06      	ldr	r4, [pc, #24]	; (8005f2c <_strtol_r+0x1c>)
 8005f14:	4d06      	ldr	r5, [pc, #24]	; (8005f30 <_strtol_r+0x20>)
 8005f16:	6824      	ldr	r4, [r4, #0]
 8005f18:	6a24      	ldr	r4, [r4, #32]
 8005f1a:	2c00      	cmp	r4, #0
 8005f1c:	bf08      	it	eq
 8005f1e:	462c      	moveq	r4, r5
 8005f20:	9400      	str	r4, [sp, #0]
 8005f22:	f7ff ff79 	bl	8005e18 <_strtol_l.isra.0>
 8005f26:	b003      	add	sp, #12
 8005f28:	bd30      	pop	{r4, r5, pc}
 8005f2a:	bf00      	nop
 8005f2c:	2000002c 	.word	0x2000002c
 8005f30:	20000090 	.word	0x20000090

08005f34 <strtol>:
 8005f34:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <strtol+0x24>)
 8005f36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f38:	681c      	ldr	r4, [r3, #0]
 8005f3a:	4d08      	ldr	r5, [pc, #32]	; (8005f5c <strtol+0x28>)
 8005f3c:	6a23      	ldr	r3, [r4, #32]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	bf08      	it	eq
 8005f42:	462b      	moveq	r3, r5
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	4613      	mov	r3, r2
 8005f48:	460a      	mov	r2, r1
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f7ff ff63 	bl	8005e18 <_strtol_l.isra.0>
 8005f52:	b003      	add	sp, #12
 8005f54:	bd30      	pop	{r4, r5, pc}
 8005f56:	bf00      	nop
 8005f58:	2000002c 	.word	0x2000002c
 8005f5c:	20000090 	.word	0x20000090

08005f60 <quorem>:
 8005f60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f64:	6903      	ldr	r3, [r0, #16]
 8005f66:	690c      	ldr	r4, [r1, #16]
 8005f68:	42a3      	cmp	r3, r4
 8005f6a:	4680      	mov	r8, r0
 8005f6c:	f2c0 8082 	blt.w	8006074 <quorem+0x114>
 8005f70:	3c01      	subs	r4, #1
 8005f72:	f101 0714 	add.w	r7, r1, #20
 8005f76:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005f7a:	f100 0614 	add.w	r6, r0, #20
 8005f7e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005f82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005f86:	eb06 030c 	add.w	r3, r6, ip
 8005f8a:	3501      	adds	r5, #1
 8005f8c:	eb07 090c 	add.w	r9, r7, ip
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	fbb0 f5f5 	udiv	r5, r0, r5
 8005f96:	b395      	cbz	r5, 8005ffe <quorem+0x9e>
 8005f98:	f04f 0a00 	mov.w	sl, #0
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	46b6      	mov	lr, r6
 8005fa0:	46d3      	mov	fp, sl
 8005fa2:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fa6:	b293      	uxth	r3, r2
 8005fa8:	fb05 a303 	mla	r3, r5, r3, sl
 8005fac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	ebab 0303 	sub.w	r3, fp, r3
 8005fb6:	0c12      	lsrs	r2, r2, #16
 8005fb8:	f8de b000 	ldr.w	fp, [lr]
 8005fbc:	fb05 a202 	mla	r2, r5, r2, sl
 8005fc0:	fa13 f38b 	uxtah	r3, r3, fp
 8005fc4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005fc8:	fa1f fb82 	uxth.w	fp, r2
 8005fcc:	f8de 2000 	ldr.w	r2, [lr]
 8005fd0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005fd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fde:	4581      	cmp	r9, r0
 8005fe0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005fe4:	f84e 3b04 	str.w	r3, [lr], #4
 8005fe8:	d2db      	bcs.n	8005fa2 <quorem+0x42>
 8005fea:	f856 300c 	ldr.w	r3, [r6, ip]
 8005fee:	b933      	cbnz	r3, 8005ffe <quorem+0x9e>
 8005ff0:	9b01      	ldr	r3, [sp, #4]
 8005ff2:	3b04      	subs	r3, #4
 8005ff4:	429e      	cmp	r6, r3
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	d330      	bcc.n	800605c <quorem+0xfc>
 8005ffa:	f8c8 4010 	str.w	r4, [r8, #16]
 8005ffe:	4640      	mov	r0, r8
 8006000:	f001 fba4 	bl	800774c <__mcmp>
 8006004:	2800      	cmp	r0, #0
 8006006:	db25      	blt.n	8006054 <quorem+0xf4>
 8006008:	3501      	adds	r5, #1
 800600a:	4630      	mov	r0, r6
 800600c:	f04f 0c00 	mov.w	ip, #0
 8006010:	f857 2b04 	ldr.w	r2, [r7], #4
 8006014:	f8d0 e000 	ldr.w	lr, [r0]
 8006018:	b293      	uxth	r3, r2
 800601a:	ebac 0303 	sub.w	r3, ip, r3
 800601e:	0c12      	lsrs	r2, r2, #16
 8006020:	fa13 f38e 	uxtah	r3, r3, lr
 8006024:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006028:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800602c:	b29b      	uxth	r3, r3
 800602e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006032:	45b9      	cmp	r9, r7
 8006034:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006038:	f840 3b04 	str.w	r3, [r0], #4
 800603c:	d2e8      	bcs.n	8006010 <quorem+0xb0>
 800603e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006042:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006046:	b92a      	cbnz	r2, 8006054 <quorem+0xf4>
 8006048:	3b04      	subs	r3, #4
 800604a:	429e      	cmp	r6, r3
 800604c:	461a      	mov	r2, r3
 800604e:	d30b      	bcc.n	8006068 <quorem+0x108>
 8006050:	f8c8 4010 	str.w	r4, [r8, #16]
 8006054:	4628      	mov	r0, r5
 8006056:	b003      	add	sp, #12
 8006058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800605c:	6812      	ldr	r2, [r2, #0]
 800605e:	3b04      	subs	r3, #4
 8006060:	2a00      	cmp	r2, #0
 8006062:	d1ca      	bne.n	8005ffa <quorem+0x9a>
 8006064:	3c01      	subs	r4, #1
 8006066:	e7c5      	b.n	8005ff4 <quorem+0x94>
 8006068:	6812      	ldr	r2, [r2, #0]
 800606a:	3b04      	subs	r3, #4
 800606c:	2a00      	cmp	r2, #0
 800606e:	d1ef      	bne.n	8006050 <quorem+0xf0>
 8006070:	3c01      	subs	r4, #1
 8006072:	e7ea      	b.n	800604a <quorem+0xea>
 8006074:	2000      	movs	r0, #0
 8006076:	e7ee      	b.n	8006056 <quorem+0xf6>

08006078 <_dtoa_r>:
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	ec57 6b10 	vmov	r6, r7, d0
 8006080:	b097      	sub	sp, #92	; 0x5c
 8006082:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006084:	9106      	str	r1, [sp, #24]
 8006086:	4604      	mov	r4, r0
 8006088:	920b      	str	r2, [sp, #44]	; 0x2c
 800608a:	9312      	str	r3, [sp, #72]	; 0x48
 800608c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006090:	e9cd 6700 	strd	r6, r7, [sp]
 8006094:	b93d      	cbnz	r5, 80060a6 <_dtoa_r+0x2e>
 8006096:	2010      	movs	r0, #16
 8006098:	f001 f8e0 	bl	800725c <malloc>
 800609c:	6260      	str	r0, [r4, #36]	; 0x24
 800609e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80060a2:	6005      	str	r5, [r0, #0]
 80060a4:	60c5      	str	r5, [r0, #12]
 80060a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060a8:	6819      	ldr	r1, [r3, #0]
 80060aa:	b151      	cbz	r1, 80060c2 <_dtoa_r+0x4a>
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	604a      	str	r2, [r1, #4]
 80060b0:	2301      	movs	r3, #1
 80060b2:	4093      	lsls	r3, r2
 80060b4:	608b      	str	r3, [r1, #8]
 80060b6:	4620      	mov	r0, r4
 80060b8:	f001 f929 	bl	800730e <_Bfree>
 80060bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	1e3b      	subs	r3, r7, #0
 80060c4:	bfbb      	ittet	lt
 80060c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80060ca:	9301      	strlt	r3, [sp, #4]
 80060cc:	2300      	movge	r3, #0
 80060ce:	2201      	movlt	r2, #1
 80060d0:	bfac      	ite	ge
 80060d2:	f8c8 3000 	strge.w	r3, [r8]
 80060d6:	f8c8 2000 	strlt.w	r2, [r8]
 80060da:	4baf      	ldr	r3, [pc, #700]	; (8006398 <_dtoa_r+0x320>)
 80060dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80060e0:	ea33 0308 	bics.w	r3, r3, r8
 80060e4:	d114      	bne.n	8006110 <_dtoa_r+0x98>
 80060e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	9b00      	ldr	r3, [sp, #0]
 80060f0:	b923      	cbnz	r3, 80060fc <_dtoa_r+0x84>
 80060f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80060f6:	2800      	cmp	r0, #0
 80060f8:	f000 8542 	beq.w	8006b80 <_dtoa_r+0xb08>
 80060fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80063ac <_dtoa_r+0x334>
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 8544 	beq.w	8006b90 <_dtoa_r+0xb18>
 8006108:	f10b 0303 	add.w	r3, fp, #3
 800610c:	f000 bd3e 	b.w	8006b8c <_dtoa_r+0xb14>
 8006110:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006114:	2200      	movs	r2, #0
 8006116:	2300      	movs	r3, #0
 8006118:	4630      	mov	r0, r6
 800611a:	4639      	mov	r1, r7
 800611c:	f7fa fce4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006120:	4681      	mov	r9, r0
 8006122:	b168      	cbz	r0, 8006140 <_dtoa_r+0xc8>
 8006124:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006126:	2301      	movs	r3, #1
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 8524 	beq.w	8006b7a <_dtoa_r+0xb02>
 8006132:	4b9a      	ldr	r3, [pc, #616]	; (800639c <_dtoa_r+0x324>)
 8006134:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006136:	f103 3bff 	add.w	fp, r3, #4294967295
 800613a:	6013      	str	r3, [r2, #0]
 800613c:	f000 bd28 	b.w	8006b90 <_dtoa_r+0xb18>
 8006140:	aa14      	add	r2, sp, #80	; 0x50
 8006142:	a915      	add	r1, sp, #84	; 0x54
 8006144:	ec47 6b10 	vmov	d0, r6, r7
 8006148:	4620      	mov	r0, r4
 800614a:	f001 fbed 	bl	8007928 <__d2b>
 800614e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006152:	9004      	str	r0, [sp, #16]
 8006154:	2d00      	cmp	r5, #0
 8006156:	d07c      	beq.n	8006252 <_dtoa_r+0x1da>
 8006158:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800615c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006160:	46b2      	mov	sl, r6
 8006162:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006166:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800616a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800616e:	2200      	movs	r2, #0
 8006170:	4b8b      	ldr	r3, [pc, #556]	; (80063a0 <_dtoa_r+0x328>)
 8006172:	4650      	mov	r0, sl
 8006174:	4659      	mov	r1, fp
 8006176:	f7fa f897 	bl	80002a8 <__aeabi_dsub>
 800617a:	a381      	add	r3, pc, #516	; (adr r3, 8006380 <_dtoa_r+0x308>)
 800617c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006180:	f7fa fa4a 	bl	8000618 <__aeabi_dmul>
 8006184:	a380      	add	r3, pc, #512	; (adr r3, 8006388 <_dtoa_r+0x310>)
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	f7fa f88f 	bl	80002ac <__adddf3>
 800618e:	4606      	mov	r6, r0
 8006190:	4628      	mov	r0, r5
 8006192:	460f      	mov	r7, r1
 8006194:	f7fa f9d6 	bl	8000544 <__aeabi_i2d>
 8006198:	a37d      	add	r3, pc, #500	; (adr r3, 8006390 <_dtoa_r+0x318>)
 800619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619e:	f7fa fa3b 	bl	8000618 <__aeabi_dmul>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	4630      	mov	r0, r6
 80061a8:	4639      	mov	r1, r7
 80061aa:	f7fa f87f 	bl	80002ac <__adddf3>
 80061ae:	4606      	mov	r6, r0
 80061b0:	460f      	mov	r7, r1
 80061b2:	f7fa fce1 	bl	8000b78 <__aeabi_d2iz>
 80061b6:	2200      	movs	r2, #0
 80061b8:	4682      	mov	sl, r0
 80061ba:	2300      	movs	r3, #0
 80061bc:	4630      	mov	r0, r6
 80061be:	4639      	mov	r1, r7
 80061c0:	f7fa fc9c 	bl	8000afc <__aeabi_dcmplt>
 80061c4:	b148      	cbz	r0, 80061da <_dtoa_r+0x162>
 80061c6:	4650      	mov	r0, sl
 80061c8:	f7fa f9bc 	bl	8000544 <__aeabi_i2d>
 80061cc:	4632      	mov	r2, r6
 80061ce:	463b      	mov	r3, r7
 80061d0:	f7fa fc8a 	bl	8000ae8 <__aeabi_dcmpeq>
 80061d4:	b908      	cbnz	r0, 80061da <_dtoa_r+0x162>
 80061d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061da:	f1ba 0f16 	cmp.w	sl, #22
 80061de:	d859      	bhi.n	8006294 <_dtoa_r+0x21c>
 80061e0:	4970      	ldr	r1, [pc, #448]	; (80063a4 <_dtoa_r+0x32c>)
 80061e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80061e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061ee:	f7fa fca3 	bl	8000b38 <__aeabi_dcmpgt>
 80061f2:	2800      	cmp	r0, #0
 80061f4:	d050      	beq.n	8006298 <_dtoa_r+0x220>
 80061f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061fa:	2300      	movs	r3, #0
 80061fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80061fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006200:	1b5d      	subs	r5, r3, r5
 8006202:	f1b5 0801 	subs.w	r8, r5, #1
 8006206:	bf49      	itett	mi
 8006208:	f1c5 0301 	rsbmi	r3, r5, #1
 800620c:	2300      	movpl	r3, #0
 800620e:	9305      	strmi	r3, [sp, #20]
 8006210:	f04f 0800 	movmi.w	r8, #0
 8006214:	bf58      	it	pl
 8006216:	9305      	strpl	r3, [sp, #20]
 8006218:	f1ba 0f00 	cmp.w	sl, #0
 800621c:	db3e      	blt.n	800629c <_dtoa_r+0x224>
 800621e:	2300      	movs	r3, #0
 8006220:	44d0      	add	r8, sl
 8006222:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006226:	9307      	str	r3, [sp, #28]
 8006228:	9b06      	ldr	r3, [sp, #24]
 800622a:	2b09      	cmp	r3, #9
 800622c:	f200 8090 	bhi.w	8006350 <_dtoa_r+0x2d8>
 8006230:	2b05      	cmp	r3, #5
 8006232:	bfc4      	itt	gt
 8006234:	3b04      	subgt	r3, #4
 8006236:	9306      	strgt	r3, [sp, #24]
 8006238:	9b06      	ldr	r3, [sp, #24]
 800623a:	f1a3 0302 	sub.w	r3, r3, #2
 800623e:	bfcc      	ite	gt
 8006240:	2500      	movgt	r5, #0
 8006242:	2501      	movle	r5, #1
 8006244:	2b03      	cmp	r3, #3
 8006246:	f200 808f 	bhi.w	8006368 <_dtoa_r+0x2f0>
 800624a:	e8df f003 	tbb	[pc, r3]
 800624e:	7f7d      	.short	0x7f7d
 8006250:	7131      	.short	0x7131
 8006252:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006256:	441d      	add	r5, r3
 8006258:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800625c:	2820      	cmp	r0, #32
 800625e:	dd13      	ble.n	8006288 <_dtoa_r+0x210>
 8006260:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006264:	9b00      	ldr	r3, [sp, #0]
 8006266:	fa08 f800 	lsl.w	r8, r8, r0
 800626a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800626e:	fa23 f000 	lsr.w	r0, r3, r0
 8006272:	ea48 0000 	orr.w	r0, r8, r0
 8006276:	f7fa f955 	bl	8000524 <__aeabi_ui2d>
 800627a:	2301      	movs	r3, #1
 800627c:	4682      	mov	sl, r0
 800627e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006282:	3d01      	subs	r5, #1
 8006284:	9313      	str	r3, [sp, #76]	; 0x4c
 8006286:	e772      	b.n	800616e <_dtoa_r+0xf6>
 8006288:	9b00      	ldr	r3, [sp, #0]
 800628a:	f1c0 0020 	rsb	r0, r0, #32
 800628e:	fa03 f000 	lsl.w	r0, r3, r0
 8006292:	e7f0      	b.n	8006276 <_dtoa_r+0x1fe>
 8006294:	2301      	movs	r3, #1
 8006296:	e7b1      	b.n	80061fc <_dtoa_r+0x184>
 8006298:	900f      	str	r0, [sp, #60]	; 0x3c
 800629a:	e7b0      	b.n	80061fe <_dtoa_r+0x186>
 800629c:	9b05      	ldr	r3, [sp, #20]
 800629e:	eba3 030a 	sub.w	r3, r3, sl
 80062a2:	9305      	str	r3, [sp, #20]
 80062a4:	f1ca 0300 	rsb	r3, sl, #0
 80062a8:	9307      	str	r3, [sp, #28]
 80062aa:	2300      	movs	r3, #0
 80062ac:	930e      	str	r3, [sp, #56]	; 0x38
 80062ae:	e7bb      	b.n	8006228 <_dtoa_r+0x1b0>
 80062b0:	2301      	movs	r3, #1
 80062b2:	930a      	str	r3, [sp, #40]	; 0x28
 80062b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	dd59      	ble.n	800636e <_dtoa_r+0x2f6>
 80062ba:	9302      	str	r3, [sp, #8]
 80062bc:	4699      	mov	r9, r3
 80062be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062c0:	2200      	movs	r2, #0
 80062c2:	6072      	str	r2, [r6, #4]
 80062c4:	2204      	movs	r2, #4
 80062c6:	f102 0014 	add.w	r0, r2, #20
 80062ca:	4298      	cmp	r0, r3
 80062cc:	6871      	ldr	r1, [r6, #4]
 80062ce:	d953      	bls.n	8006378 <_dtoa_r+0x300>
 80062d0:	4620      	mov	r0, r4
 80062d2:	f000 ffe8 	bl	80072a6 <_Balloc>
 80062d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062d8:	6030      	str	r0, [r6, #0]
 80062da:	f1b9 0f0e 	cmp.w	r9, #14
 80062de:	f8d3 b000 	ldr.w	fp, [r3]
 80062e2:	f200 80e6 	bhi.w	80064b2 <_dtoa_r+0x43a>
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	f000 80e3 	beq.w	80064b2 <_dtoa_r+0x43a>
 80062ec:	ed9d 7b00 	vldr	d7, [sp]
 80062f0:	f1ba 0f00 	cmp.w	sl, #0
 80062f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80062f8:	dd74      	ble.n	80063e4 <_dtoa_r+0x36c>
 80062fa:	4a2a      	ldr	r2, [pc, #168]	; (80063a4 <_dtoa_r+0x32c>)
 80062fc:	f00a 030f 	and.w	r3, sl, #15
 8006300:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006304:	ed93 7b00 	vldr	d7, [r3]
 8006308:	ea4f 162a 	mov.w	r6, sl, asr #4
 800630c:	06f0      	lsls	r0, r6, #27
 800630e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006312:	d565      	bpl.n	80063e0 <_dtoa_r+0x368>
 8006314:	4b24      	ldr	r3, [pc, #144]	; (80063a8 <_dtoa_r+0x330>)
 8006316:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800631a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800631e:	f7fa faa5 	bl	800086c <__aeabi_ddiv>
 8006322:	e9cd 0100 	strd	r0, r1, [sp]
 8006326:	f006 060f 	and.w	r6, r6, #15
 800632a:	2503      	movs	r5, #3
 800632c:	4f1e      	ldr	r7, [pc, #120]	; (80063a8 <_dtoa_r+0x330>)
 800632e:	e04c      	b.n	80063ca <_dtoa_r+0x352>
 8006330:	2301      	movs	r3, #1
 8006332:	930a      	str	r3, [sp, #40]	; 0x28
 8006334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006336:	4453      	add	r3, sl
 8006338:	f103 0901 	add.w	r9, r3, #1
 800633c:	9302      	str	r3, [sp, #8]
 800633e:	464b      	mov	r3, r9
 8006340:	2b01      	cmp	r3, #1
 8006342:	bfb8      	it	lt
 8006344:	2301      	movlt	r3, #1
 8006346:	e7ba      	b.n	80062be <_dtoa_r+0x246>
 8006348:	2300      	movs	r3, #0
 800634a:	e7b2      	b.n	80062b2 <_dtoa_r+0x23a>
 800634c:	2300      	movs	r3, #0
 800634e:	e7f0      	b.n	8006332 <_dtoa_r+0x2ba>
 8006350:	2501      	movs	r5, #1
 8006352:	2300      	movs	r3, #0
 8006354:	9306      	str	r3, [sp, #24]
 8006356:	950a      	str	r5, [sp, #40]	; 0x28
 8006358:	f04f 33ff 	mov.w	r3, #4294967295
 800635c:	9302      	str	r3, [sp, #8]
 800635e:	4699      	mov	r9, r3
 8006360:	2200      	movs	r2, #0
 8006362:	2312      	movs	r3, #18
 8006364:	920b      	str	r2, [sp, #44]	; 0x2c
 8006366:	e7aa      	b.n	80062be <_dtoa_r+0x246>
 8006368:	2301      	movs	r3, #1
 800636a:	930a      	str	r3, [sp, #40]	; 0x28
 800636c:	e7f4      	b.n	8006358 <_dtoa_r+0x2e0>
 800636e:	2301      	movs	r3, #1
 8006370:	9302      	str	r3, [sp, #8]
 8006372:	4699      	mov	r9, r3
 8006374:	461a      	mov	r2, r3
 8006376:	e7f5      	b.n	8006364 <_dtoa_r+0x2ec>
 8006378:	3101      	adds	r1, #1
 800637a:	6071      	str	r1, [r6, #4]
 800637c:	0052      	lsls	r2, r2, #1
 800637e:	e7a2      	b.n	80062c6 <_dtoa_r+0x24e>
 8006380:	636f4361 	.word	0x636f4361
 8006384:	3fd287a7 	.word	0x3fd287a7
 8006388:	8b60c8b3 	.word	0x8b60c8b3
 800638c:	3fc68a28 	.word	0x3fc68a28
 8006390:	509f79fb 	.word	0x509f79fb
 8006394:	3fd34413 	.word	0x3fd34413
 8006398:	7ff00000 	.word	0x7ff00000
 800639c:	0800815d 	.word	0x0800815d
 80063a0:	3ff80000 	.word	0x3ff80000
 80063a4:	08008218 	.word	0x08008218
 80063a8:	080081f0 	.word	0x080081f0
 80063ac:	080081e1 	.word	0x080081e1
 80063b0:	07f1      	lsls	r1, r6, #31
 80063b2:	d508      	bpl.n	80063c6 <_dtoa_r+0x34e>
 80063b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80063b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063bc:	f7fa f92c 	bl	8000618 <__aeabi_dmul>
 80063c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80063c4:	3501      	adds	r5, #1
 80063c6:	1076      	asrs	r6, r6, #1
 80063c8:	3708      	adds	r7, #8
 80063ca:	2e00      	cmp	r6, #0
 80063cc:	d1f0      	bne.n	80063b0 <_dtoa_r+0x338>
 80063ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80063d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063d6:	f7fa fa49 	bl	800086c <__aeabi_ddiv>
 80063da:	e9cd 0100 	strd	r0, r1, [sp]
 80063de:	e01a      	b.n	8006416 <_dtoa_r+0x39e>
 80063e0:	2502      	movs	r5, #2
 80063e2:	e7a3      	b.n	800632c <_dtoa_r+0x2b4>
 80063e4:	f000 80a0 	beq.w	8006528 <_dtoa_r+0x4b0>
 80063e8:	f1ca 0600 	rsb	r6, sl, #0
 80063ec:	4b9f      	ldr	r3, [pc, #636]	; (800666c <_dtoa_r+0x5f4>)
 80063ee:	4fa0      	ldr	r7, [pc, #640]	; (8006670 <_dtoa_r+0x5f8>)
 80063f0:	f006 020f 	and.w	r2, r6, #15
 80063f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006400:	f7fa f90a 	bl	8000618 <__aeabi_dmul>
 8006404:	e9cd 0100 	strd	r0, r1, [sp]
 8006408:	1136      	asrs	r6, r6, #4
 800640a:	2300      	movs	r3, #0
 800640c:	2502      	movs	r5, #2
 800640e:	2e00      	cmp	r6, #0
 8006410:	d17f      	bne.n	8006512 <_dtoa_r+0x49a>
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1e1      	bne.n	80063da <_dtoa_r+0x362>
 8006416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 8087 	beq.w	800652c <_dtoa_r+0x4b4>
 800641e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006422:	2200      	movs	r2, #0
 8006424:	4b93      	ldr	r3, [pc, #588]	; (8006674 <_dtoa_r+0x5fc>)
 8006426:	4630      	mov	r0, r6
 8006428:	4639      	mov	r1, r7
 800642a:	f7fa fb67 	bl	8000afc <__aeabi_dcmplt>
 800642e:	2800      	cmp	r0, #0
 8006430:	d07c      	beq.n	800652c <_dtoa_r+0x4b4>
 8006432:	f1b9 0f00 	cmp.w	r9, #0
 8006436:	d079      	beq.n	800652c <_dtoa_r+0x4b4>
 8006438:	9b02      	ldr	r3, [sp, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	dd35      	ble.n	80064aa <_dtoa_r+0x432>
 800643e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006442:	9308      	str	r3, [sp, #32]
 8006444:	4639      	mov	r1, r7
 8006446:	2200      	movs	r2, #0
 8006448:	4b8b      	ldr	r3, [pc, #556]	; (8006678 <_dtoa_r+0x600>)
 800644a:	4630      	mov	r0, r6
 800644c:	f7fa f8e4 	bl	8000618 <__aeabi_dmul>
 8006450:	e9cd 0100 	strd	r0, r1, [sp]
 8006454:	9f02      	ldr	r7, [sp, #8]
 8006456:	3501      	adds	r5, #1
 8006458:	4628      	mov	r0, r5
 800645a:	f7fa f873 	bl	8000544 <__aeabi_i2d>
 800645e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006462:	f7fa f8d9 	bl	8000618 <__aeabi_dmul>
 8006466:	2200      	movs	r2, #0
 8006468:	4b84      	ldr	r3, [pc, #528]	; (800667c <_dtoa_r+0x604>)
 800646a:	f7f9 ff1f 	bl	80002ac <__adddf3>
 800646e:	4605      	mov	r5, r0
 8006470:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006474:	2f00      	cmp	r7, #0
 8006476:	d15d      	bne.n	8006534 <_dtoa_r+0x4bc>
 8006478:	2200      	movs	r2, #0
 800647a:	4b81      	ldr	r3, [pc, #516]	; (8006680 <_dtoa_r+0x608>)
 800647c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006480:	f7f9 ff12 	bl	80002a8 <__aeabi_dsub>
 8006484:	462a      	mov	r2, r5
 8006486:	4633      	mov	r3, r6
 8006488:	e9cd 0100 	strd	r0, r1, [sp]
 800648c:	f7fa fb54 	bl	8000b38 <__aeabi_dcmpgt>
 8006490:	2800      	cmp	r0, #0
 8006492:	f040 8288 	bne.w	80069a6 <_dtoa_r+0x92e>
 8006496:	462a      	mov	r2, r5
 8006498:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800649c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064a0:	f7fa fb2c 	bl	8000afc <__aeabi_dcmplt>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	f040 827c 	bne.w	80069a2 <_dtoa_r+0x92a>
 80064aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064ae:	e9cd 2300 	strd	r2, r3, [sp]
 80064b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f2c0 8150 	blt.w	800675a <_dtoa_r+0x6e2>
 80064ba:	f1ba 0f0e 	cmp.w	sl, #14
 80064be:	f300 814c 	bgt.w	800675a <_dtoa_r+0x6e2>
 80064c2:	4b6a      	ldr	r3, [pc, #424]	; (800666c <_dtoa_r+0x5f4>)
 80064c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80064c8:	ed93 7b00 	vldr	d7, [r3]
 80064cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80064d4:	f280 80d8 	bge.w	8006688 <_dtoa_r+0x610>
 80064d8:	f1b9 0f00 	cmp.w	r9, #0
 80064dc:	f300 80d4 	bgt.w	8006688 <_dtoa_r+0x610>
 80064e0:	f040 825e 	bne.w	80069a0 <_dtoa_r+0x928>
 80064e4:	2200      	movs	r2, #0
 80064e6:	4b66      	ldr	r3, [pc, #408]	; (8006680 <_dtoa_r+0x608>)
 80064e8:	ec51 0b17 	vmov	r0, r1, d7
 80064ec:	f7fa f894 	bl	8000618 <__aeabi_dmul>
 80064f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064f4:	f7fa fb16 	bl	8000b24 <__aeabi_dcmpge>
 80064f8:	464f      	mov	r7, r9
 80064fa:	464e      	mov	r6, r9
 80064fc:	2800      	cmp	r0, #0
 80064fe:	f040 8234 	bne.w	800696a <_dtoa_r+0x8f2>
 8006502:	2331      	movs	r3, #49	; 0x31
 8006504:	f10b 0501 	add.w	r5, fp, #1
 8006508:	f88b 3000 	strb.w	r3, [fp]
 800650c:	f10a 0a01 	add.w	sl, sl, #1
 8006510:	e22f      	b.n	8006972 <_dtoa_r+0x8fa>
 8006512:	07f2      	lsls	r2, r6, #31
 8006514:	d505      	bpl.n	8006522 <_dtoa_r+0x4aa>
 8006516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800651a:	f7fa f87d 	bl	8000618 <__aeabi_dmul>
 800651e:	3501      	adds	r5, #1
 8006520:	2301      	movs	r3, #1
 8006522:	1076      	asrs	r6, r6, #1
 8006524:	3708      	adds	r7, #8
 8006526:	e772      	b.n	800640e <_dtoa_r+0x396>
 8006528:	2502      	movs	r5, #2
 800652a:	e774      	b.n	8006416 <_dtoa_r+0x39e>
 800652c:	f8cd a020 	str.w	sl, [sp, #32]
 8006530:	464f      	mov	r7, r9
 8006532:	e791      	b.n	8006458 <_dtoa_r+0x3e0>
 8006534:	4b4d      	ldr	r3, [pc, #308]	; (800666c <_dtoa_r+0x5f4>)
 8006536:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800653a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800653e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006540:	2b00      	cmp	r3, #0
 8006542:	d047      	beq.n	80065d4 <_dtoa_r+0x55c>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	2000      	movs	r0, #0
 800654a:	494e      	ldr	r1, [pc, #312]	; (8006684 <_dtoa_r+0x60c>)
 800654c:	f7fa f98e 	bl	800086c <__aeabi_ddiv>
 8006550:	462a      	mov	r2, r5
 8006552:	4633      	mov	r3, r6
 8006554:	f7f9 fea8 	bl	80002a8 <__aeabi_dsub>
 8006558:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800655c:	465d      	mov	r5, fp
 800655e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006562:	f7fa fb09 	bl	8000b78 <__aeabi_d2iz>
 8006566:	4606      	mov	r6, r0
 8006568:	f7f9 ffec 	bl	8000544 <__aeabi_i2d>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006574:	f7f9 fe98 	bl	80002a8 <__aeabi_dsub>
 8006578:	3630      	adds	r6, #48	; 0x30
 800657a:	f805 6b01 	strb.w	r6, [r5], #1
 800657e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006582:	e9cd 0100 	strd	r0, r1, [sp]
 8006586:	f7fa fab9 	bl	8000afc <__aeabi_dcmplt>
 800658a:	2800      	cmp	r0, #0
 800658c:	d163      	bne.n	8006656 <_dtoa_r+0x5de>
 800658e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006592:	2000      	movs	r0, #0
 8006594:	4937      	ldr	r1, [pc, #220]	; (8006674 <_dtoa_r+0x5fc>)
 8006596:	f7f9 fe87 	bl	80002a8 <__aeabi_dsub>
 800659a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800659e:	f7fa faad 	bl	8000afc <__aeabi_dcmplt>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	f040 80b7 	bne.w	8006716 <_dtoa_r+0x69e>
 80065a8:	eba5 030b 	sub.w	r3, r5, fp
 80065ac:	429f      	cmp	r7, r3
 80065ae:	f77f af7c 	ble.w	80064aa <_dtoa_r+0x432>
 80065b2:	2200      	movs	r2, #0
 80065b4:	4b30      	ldr	r3, [pc, #192]	; (8006678 <_dtoa_r+0x600>)
 80065b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065ba:	f7fa f82d 	bl	8000618 <__aeabi_dmul>
 80065be:	2200      	movs	r2, #0
 80065c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80065c4:	4b2c      	ldr	r3, [pc, #176]	; (8006678 <_dtoa_r+0x600>)
 80065c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065ca:	f7fa f825 	bl	8000618 <__aeabi_dmul>
 80065ce:	e9cd 0100 	strd	r0, r1, [sp]
 80065d2:	e7c4      	b.n	800655e <_dtoa_r+0x4e6>
 80065d4:	462a      	mov	r2, r5
 80065d6:	4633      	mov	r3, r6
 80065d8:	f7fa f81e 	bl	8000618 <__aeabi_dmul>
 80065dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80065e0:	eb0b 0507 	add.w	r5, fp, r7
 80065e4:	465e      	mov	r6, fp
 80065e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065ea:	f7fa fac5 	bl	8000b78 <__aeabi_d2iz>
 80065ee:	4607      	mov	r7, r0
 80065f0:	f7f9 ffa8 	bl	8000544 <__aeabi_i2d>
 80065f4:	3730      	adds	r7, #48	; 0x30
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065fe:	f7f9 fe53 	bl	80002a8 <__aeabi_dsub>
 8006602:	f806 7b01 	strb.w	r7, [r6], #1
 8006606:	42ae      	cmp	r6, r5
 8006608:	e9cd 0100 	strd	r0, r1, [sp]
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	d126      	bne.n	8006660 <_dtoa_r+0x5e8>
 8006612:	4b1c      	ldr	r3, [pc, #112]	; (8006684 <_dtoa_r+0x60c>)
 8006614:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006618:	f7f9 fe48 	bl	80002ac <__adddf3>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006624:	f7fa fa88 	bl	8000b38 <__aeabi_dcmpgt>
 8006628:	2800      	cmp	r0, #0
 800662a:	d174      	bne.n	8006716 <_dtoa_r+0x69e>
 800662c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006630:	2000      	movs	r0, #0
 8006632:	4914      	ldr	r1, [pc, #80]	; (8006684 <_dtoa_r+0x60c>)
 8006634:	f7f9 fe38 	bl	80002a8 <__aeabi_dsub>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006640:	f7fa fa5c 	bl	8000afc <__aeabi_dcmplt>
 8006644:	2800      	cmp	r0, #0
 8006646:	f43f af30 	beq.w	80064aa <_dtoa_r+0x432>
 800664a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800664e:	2b30      	cmp	r3, #48	; 0x30
 8006650:	f105 32ff 	add.w	r2, r5, #4294967295
 8006654:	d002      	beq.n	800665c <_dtoa_r+0x5e4>
 8006656:	f8dd a020 	ldr.w	sl, [sp, #32]
 800665a:	e04a      	b.n	80066f2 <_dtoa_r+0x67a>
 800665c:	4615      	mov	r5, r2
 800665e:	e7f4      	b.n	800664a <_dtoa_r+0x5d2>
 8006660:	4b05      	ldr	r3, [pc, #20]	; (8006678 <_dtoa_r+0x600>)
 8006662:	f7f9 ffd9 	bl	8000618 <__aeabi_dmul>
 8006666:	e9cd 0100 	strd	r0, r1, [sp]
 800666a:	e7bc      	b.n	80065e6 <_dtoa_r+0x56e>
 800666c:	08008218 	.word	0x08008218
 8006670:	080081f0 	.word	0x080081f0
 8006674:	3ff00000 	.word	0x3ff00000
 8006678:	40240000 	.word	0x40240000
 800667c:	401c0000 	.word	0x401c0000
 8006680:	40140000 	.word	0x40140000
 8006684:	3fe00000 	.word	0x3fe00000
 8006688:	e9dd 6700 	ldrd	r6, r7, [sp]
 800668c:	465d      	mov	r5, fp
 800668e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006692:	4630      	mov	r0, r6
 8006694:	4639      	mov	r1, r7
 8006696:	f7fa f8e9 	bl	800086c <__aeabi_ddiv>
 800669a:	f7fa fa6d 	bl	8000b78 <__aeabi_d2iz>
 800669e:	4680      	mov	r8, r0
 80066a0:	f7f9 ff50 	bl	8000544 <__aeabi_i2d>
 80066a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066a8:	f7f9 ffb6 	bl	8000618 <__aeabi_dmul>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4630      	mov	r0, r6
 80066b2:	4639      	mov	r1, r7
 80066b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80066b8:	f7f9 fdf6 	bl	80002a8 <__aeabi_dsub>
 80066bc:	f805 6b01 	strb.w	r6, [r5], #1
 80066c0:	eba5 060b 	sub.w	r6, r5, fp
 80066c4:	45b1      	cmp	r9, r6
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	d139      	bne.n	8006740 <_dtoa_r+0x6c8>
 80066cc:	f7f9 fdee 	bl	80002ac <__adddf3>
 80066d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066d4:	4606      	mov	r6, r0
 80066d6:	460f      	mov	r7, r1
 80066d8:	f7fa fa2e 	bl	8000b38 <__aeabi_dcmpgt>
 80066dc:	b9c8      	cbnz	r0, 8006712 <_dtoa_r+0x69a>
 80066de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066e2:	4630      	mov	r0, r6
 80066e4:	4639      	mov	r1, r7
 80066e6:	f7fa f9ff 	bl	8000ae8 <__aeabi_dcmpeq>
 80066ea:	b110      	cbz	r0, 80066f2 <_dtoa_r+0x67a>
 80066ec:	f018 0f01 	tst.w	r8, #1
 80066f0:	d10f      	bne.n	8006712 <_dtoa_r+0x69a>
 80066f2:	9904      	ldr	r1, [sp, #16]
 80066f4:	4620      	mov	r0, r4
 80066f6:	f000 fe0a 	bl	800730e <_Bfree>
 80066fa:	2300      	movs	r3, #0
 80066fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066fe:	702b      	strb	r3, [r5, #0]
 8006700:	f10a 0301 	add.w	r3, sl, #1
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 8241 	beq.w	8006b90 <_dtoa_r+0xb18>
 800670e:	601d      	str	r5, [r3, #0]
 8006710:	e23e      	b.n	8006b90 <_dtoa_r+0xb18>
 8006712:	f8cd a020 	str.w	sl, [sp, #32]
 8006716:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800671a:	2a39      	cmp	r2, #57	; 0x39
 800671c:	f105 33ff 	add.w	r3, r5, #4294967295
 8006720:	d108      	bne.n	8006734 <_dtoa_r+0x6bc>
 8006722:	459b      	cmp	fp, r3
 8006724:	d10a      	bne.n	800673c <_dtoa_r+0x6c4>
 8006726:	9b08      	ldr	r3, [sp, #32]
 8006728:	3301      	adds	r3, #1
 800672a:	9308      	str	r3, [sp, #32]
 800672c:	2330      	movs	r3, #48	; 0x30
 800672e:	f88b 3000 	strb.w	r3, [fp]
 8006732:	465b      	mov	r3, fp
 8006734:	781a      	ldrb	r2, [r3, #0]
 8006736:	3201      	adds	r2, #1
 8006738:	701a      	strb	r2, [r3, #0]
 800673a:	e78c      	b.n	8006656 <_dtoa_r+0x5de>
 800673c:	461d      	mov	r5, r3
 800673e:	e7ea      	b.n	8006716 <_dtoa_r+0x69e>
 8006740:	2200      	movs	r2, #0
 8006742:	4b9b      	ldr	r3, [pc, #620]	; (80069b0 <_dtoa_r+0x938>)
 8006744:	f7f9 ff68 	bl	8000618 <__aeabi_dmul>
 8006748:	2200      	movs	r2, #0
 800674a:	2300      	movs	r3, #0
 800674c:	4606      	mov	r6, r0
 800674e:	460f      	mov	r7, r1
 8006750:	f7fa f9ca 	bl	8000ae8 <__aeabi_dcmpeq>
 8006754:	2800      	cmp	r0, #0
 8006756:	d09a      	beq.n	800668e <_dtoa_r+0x616>
 8006758:	e7cb      	b.n	80066f2 <_dtoa_r+0x67a>
 800675a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800675c:	2a00      	cmp	r2, #0
 800675e:	f000 808b 	beq.w	8006878 <_dtoa_r+0x800>
 8006762:	9a06      	ldr	r2, [sp, #24]
 8006764:	2a01      	cmp	r2, #1
 8006766:	dc6e      	bgt.n	8006846 <_dtoa_r+0x7ce>
 8006768:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800676a:	2a00      	cmp	r2, #0
 800676c:	d067      	beq.n	800683e <_dtoa_r+0x7c6>
 800676e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006772:	9f07      	ldr	r7, [sp, #28]
 8006774:	9d05      	ldr	r5, [sp, #20]
 8006776:	9a05      	ldr	r2, [sp, #20]
 8006778:	2101      	movs	r1, #1
 800677a:	441a      	add	r2, r3
 800677c:	4620      	mov	r0, r4
 800677e:	9205      	str	r2, [sp, #20]
 8006780:	4498      	add	r8, r3
 8006782:	f000 fea2 	bl	80074ca <__i2b>
 8006786:	4606      	mov	r6, r0
 8006788:	2d00      	cmp	r5, #0
 800678a:	dd0c      	ble.n	80067a6 <_dtoa_r+0x72e>
 800678c:	f1b8 0f00 	cmp.w	r8, #0
 8006790:	dd09      	ble.n	80067a6 <_dtoa_r+0x72e>
 8006792:	4545      	cmp	r5, r8
 8006794:	9a05      	ldr	r2, [sp, #20]
 8006796:	462b      	mov	r3, r5
 8006798:	bfa8      	it	ge
 800679a:	4643      	movge	r3, r8
 800679c:	1ad2      	subs	r2, r2, r3
 800679e:	9205      	str	r2, [sp, #20]
 80067a0:	1aed      	subs	r5, r5, r3
 80067a2:	eba8 0803 	sub.w	r8, r8, r3
 80067a6:	9b07      	ldr	r3, [sp, #28]
 80067a8:	b1eb      	cbz	r3, 80067e6 <_dtoa_r+0x76e>
 80067aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d067      	beq.n	8006880 <_dtoa_r+0x808>
 80067b0:	b18f      	cbz	r7, 80067d6 <_dtoa_r+0x75e>
 80067b2:	4631      	mov	r1, r6
 80067b4:	463a      	mov	r2, r7
 80067b6:	4620      	mov	r0, r4
 80067b8:	f000 ff26 	bl	8007608 <__pow5mult>
 80067bc:	9a04      	ldr	r2, [sp, #16]
 80067be:	4601      	mov	r1, r0
 80067c0:	4606      	mov	r6, r0
 80067c2:	4620      	mov	r0, r4
 80067c4:	f000 fe8a 	bl	80074dc <__multiply>
 80067c8:	9904      	ldr	r1, [sp, #16]
 80067ca:	9008      	str	r0, [sp, #32]
 80067cc:	4620      	mov	r0, r4
 80067ce:	f000 fd9e 	bl	800730e <_Bfree>
 80067d2:	9b08      	ldr	r3, [sp, #32]
 80067d4:	9304      	str	r3, [sp, #16]
 80067d6:	9b07      	ldr	r3, [sp, #28]
 80067d8:	1bda      	subs	r2, r3, r7
 80067da:	d004      	beq.n	80067e6 <_dtoa_r+0x76e>
 80067dc:	9904      	ldr	r1, [sp, #16]
 80067de:	4620      	mov	r0, r4
 80067e0:	f000 ff12 	bl	8007608 <__pow5mult>
 80067e4:	9004      	str	r0, [sp, #16]
 80067e6:	2101      	movs	r1, #1
 80067e8:	4620      	mov	r0, r4
 80067ea:	f000 fe6e 	bl	80074ca <__i2b>
 80067ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067f0:	4607      	mov	r7, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 81d0 	beq.w	8006b98 <_dtoa_r+0xb20>
 80067f8:	461a      	mov	r2, r3
 80067fa:	4601      	mov	r1, r0
 80067fc:	4620      	mov	r0, r4
 80067fe:	f000 ff03 	bl	8007608 <__pow5mult>
 8006802:	9b06      	ldr	r3, [sp, #24]
 8006804:	2b01      	cmp	r3, #1
 8006806:	4607      	mov	r7, r0
 8006808:	dc40      	bgt.n	800688c <_dtoa_r+0x814>
 800680a:	9b00      	ldr	r3, [sp, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d139      	bne.n	8006884 <_dtoa_r+0x80c>
 8006810:	9b01      	ldr	r3, [sp, #4]
 8006812:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006816:	2b00      	cmp	r3, #0
 8006818:	d136      	bne.n	8006888 <_dtoa_r+0x810>
 800681a:	9b01      	ldr	r3, [sp, #4]
 800681c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006820:	0d1b      	lsrs	r3, r3, #20
 8006822:	051b      	lsls	r3, r3, #20
 8006824:	b12b      	cbz	r3, 8006832 <_dtoa_r+0x7ba>
 8006826:	9b05      	ldr	r3, [sp, #20]
 8006828:	3301      	adds	r3, #1
 800682a:	9305      	str	r3, [sp, #20]
 800682c:	f108 0801 	add.w	r8, r8, #1
 8006830:	2301      	movs	r3, #1
 8006832:	9307      	str	r3, [sp, #28]
 8006834:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006836:	2b00      	cmp	r3, #0
 8006838:	d12a      	bne.n	8006890 <_dtoa_r+0x818>
 800683a:	2001      	movs	r0, #1
 800683c:	e030      	b.n	80068a0 <_dtoa_r+0x828>
 800683e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006840:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006844:	e795      	b.n	8006772 <_dtoa_r+0x6fa>
 8006846:	9b07      	ldr	r3, [sp, #28]
 8006848:	f109 37ff 	add.w	r7, r9, #4294967295
 800684c:	42bb      	cmp	r3, r7
 800684e:	bfbf      	itttt	lt
 8006850:	9b07      	ldrlt	r3, [sp, #28]
 8006852:	9707      	strlt	r7, [sp, #28]
 8006854:	1afa      	sublt	r2, r7, r3
 8006856:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006858:	bfbb      	ittet	lt
 800685a:	189b      	addlt	r3, r3, r2
 800685c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800685e:	1bdf      	subge	r7, r3, r7
 8006860:	2700      	movlt	r7, #0
 8006862:	f1b9 0f00 	cmp.w	r9, #0
 8006866:	bfb5      	itete	lt
 8006868:	9b05      	ldrlt	r3, [sp, #20]
 800686a:	9d05      	ldrge	r5, [sp, #20]
 800686c:	eba3 0509 	sublt.w	r5, r3, r9
 8006870:	464b      	movge	r3, r9
 8006872:	bfb8      	it	lt
 8006874:	2300      	movlt	r3, #0
 8006876:	e77e      	b.n	8006776 <_dtoa_r+0x6fe>
 8006878:	9f07      	ldr	r7, [sp, #28]
 800687a:	9d05      	ldr	r5, [sp, #20]
 800687c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800687e:	e783      	b.n	8006788 <_dtoa_r+0x710>
 8006880:	9a07      	ldr	r2, [sp, #28]
 8006882:	e7ab      	b.n	80067dc <_dtoa_r+0x764>
 8006884:	2300      	movs	r3, #0
 8006886:	e7d4      	b.n	8006832 <_dtoa_r+0x7ba>
 8006888:	9b00      	ldr	r3, [sp, #0]
 800688a:	e7d2      	b.n	8006832 <_dtoa_r+0x7ba>
 800688c:	2300      	movs	r3, #0
 800688e:	9307      	str	r3, [sp, #28]
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006896:	6918      	ldr	r0, [r3, #16]
 8006898:	f000 fdc9 	bl	800742e <__hi0bits>
 800689c:	f1c0 0020 	rsb	r0, r0, #32
 80068a0:	4440      	add	r0, r8
 80068a2:	f010 001f 	ands.w	r0, r0, #31
 80068a6:	d047      	beq.n	8006938 <_dtoa_r+0x8c0>
 80068a8:	f1c0 0320 	rsb	r3, r0, #32
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	dd3b      	ble.n	8006928 <_dtoa_r+0x8b0>
 80068b0:	9b05      	ldr	r3, [sp, #20]
 80068b2:	f1c0 001c 	rsb	r0, r0, #28
 80068b6:	4403      	add	r3, r0
 80068b8:	9305      	str	r3, [sp, #20]
 80068ba:	4405      	add	r5, r0
 80068bc:	4480      	add	r8, r0
 80068be:	9b05      	ldr	r3, [sp, #20]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	dd05      	ble.n	80068d0 <_dtoa_r+0x858>
 80068c4:	461a      	mov	r2, r3
 80068c6:	9904      	ldr	r1, [sp, #16]
 80068c8:	4620      	mov	r0, r4
 80068ca:	f000 feeb 	bl	80076a4 <__lshift>
 80068ce:	9004      	str	r0, [sp, #16]
 80068d0:	f1b8 0f00 	cmp.w	r8, #0
 80068d4:	dd05      	ble.n	80068e2 <_dtoa_r+0x86a>
 80068d6:	4639      	mov	r1, r7
 80068d8:	4642      	mov	r2, r8
 80068da:	4620      	mov	r0, r4
 80068dc:	f000 fee2 	bl	80076a4 <__lshift>
 80068e0:	4607      	mov	r7, r0
 80068e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068e4:	b353      	cbz	r3, 800693c <_dtoa_r+0x8c4>
 80068e6:	4639      	mov	r1, r7
 80068e8:	9804      	ldr	r0, [sp, #16]
 80068ea:	f000 ff2f 	bl	800774c <__mcmp>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	da24      	bge.n	800693c <_dtoa_r+0x8c4>
 80068f2:	2300      	movs	r3, #0
 80068f4:	220a      	movs	r2, #10
 80068f6:	9904      	ldr	r1, [sp, #16]
 80068f8:	4620      	mov	r0, r4
 80068fa:	f000 fd1f 	bl	800733c <__multadd>
 80068fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006900:	9004      	str	r0, [sp, #16]
 8006902:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 814d 	beq.w	8006ba6 <_dtoa_r+0xb2e>
 800690c:	2300      	movs	r3, #0
 800690e:	4631      	mov	r1, r6
 8006910:	220a      	movs	r2, #10
 8006912:	4620      	mov	r0, r4
 8006914:	f000 fd12 	bl	800733c <__multadd>
 8006918:	9b02      	ldr	r3, [sp, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	4606      	mov	r6, r0
 800691e:	dc4f      	bgt.n	80069c0 <_dtoa_r+0x948>
 8006920:	9b06      	ldr	r3, [sp, #24]
 8006922:	2b02      	cmp	r3, #2
 8006924:	dd4c      	ble.n	80069c0 <_dtoa_r+0x948>
 8006926:	e011      	b.n	800694c <_dtoa_r+0x8d4>
 8006928:	d0c9      	beq.n	80068be <_dtoa_r+0x846>
 800692a:	9a05      	ldr	r2, [sp, #20]
 800692c:	331c      	adds	r3, #28
 800692e:	441a      	add	r2, r3
 8006930:	9205      	str	r2, [sp, #20]
 8006932:	441d      	add	r5, r3
 8006934:	4498      	add	r8, r3
 8006936:	e7c2      	b.n	80068be <_dtoa_r+0x846>
 8006938:	4603      	mov	r3, r0
 800693a:	e7f6      	b.n	800692a <_dtoa_r+0x8b2>
 800693c:	f1b9 0f00 	cmp.w	r9, #0
 8006940:	dc38      	bgt.n	80069b4 <_dtoa_r+0x93c>
 8006942:	9b06      	ldr	r3, [sp, #24]
 8006944:	2b02      	cmp	r3, #2
 8006946:	dd35      	ble.n	80069b4 <_dtoa_r+0x93c>
 8006948:	f8cd 9008 	str.w	r9, [sp, #8]
 800694c:	9b02      	ldr	r3, [sp, #8]
 800694e:	b963      	cbnz	r3, 800696a <_dtoa_r+0x8f2>
 8006950:	4639      	mov	r1, r7
 8006952:	2205      	movs	r2, #5
 8006954:	4620      	mov	r0, r4
 8006956:	f000 fcf1 	bl	800733c <__multadd>
 800695a:	4601      	mov	r1, r0
 800695c:	4607      	mov	r7, r0
 800695e:	9804      	ldr	r0, [sp, #16]
 8006960:	f000 fef4 	bl	800774c <__mcmp>
 8006964:	2800      	cmp	r0, #0
 8006966:	f73f adcc 	bgt.w	8006502 <_dtoa_r+0x48a>
 800696a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800696c:	465d      	mov	r5, fp
 800696e:	ea6f 0a03 	mvn.w	sl, r3
 8006972:	f04f 0900 	mov.w	r9, #0
 8006976:	4639      	mov	r1, r7
 8006978:	4620      	mov	r0, r4
 800697a:	f000 fcc8 	bl	800730e <_Bfree>
 800697e:	2e00      	cmp	r6, #0
 8006980:	f43f aeb7 	beq.w	80066f2 <_dtoa_r+0x67a>
 8006984:	f1b9 0f00 	cmp.w	r9, #0
 8006988:	d005      	beq.n	8006996 <_dtoa_r+0x91e>
 800698a:	45b1      	cmp	r9, r6
 800698c:	d003      	beq.n	8006996 <_dtoa_r+0x91e>
 800698e:	4649      	mov	r1, r9
 8006990:	4620      	mov	r0, r4
 8006992:	f000 fcbc 	bl	800730e <_Bfree>
 8006996:	4631      	mov	r1, r6
 8006998:	4620      	mov	r0, r4
 800699a:	f000 fcb8 	bl	800730e <_Bfree>
 800699e:	e6a8      	b.n	80066f2 <_dtoa_r+0x67a>
 80069a0:	2700      	movs	r7, #0
 80069a2:	463e      	mov	r6, r7
 80069a4:	e7e1      	b.n	800696a <_dtoa_r+0x8f2>
 80069a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80069aa:	463e      	mov	r6, r7
 80069ac:	e5a9      	b.n	8006502 <_dtoa_r+0x48a>
 80069ae:	bf00      	nop
 80069b0:	40240000 	.word	0x40240000
 80069b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 80fa 	beq.w	8006bb4 <_dtoa_r+0xb3c>
 80069c0:	2d00      	cmp	r5, #0
 80069c2:	dd05      	ble.n	80069d0 <_dtoa_r+0x958>
 80069c4:	4631      	mov	r1, r6
 80069c6:	462a      	mov	r2, r5
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 fe6b 	bl	80076a4 <__lshift>
 80069ce:	4606      	mov	r6, r0
 80069d0:	9b07      	ldr	r3, [sp, #28]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d04c      	beq.n	8006a70 <_dtoa_r+0x9f8>
 80069d6:	6871      	ldr	r1, [r6, #4]
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 fc64 	bl	80072a6 <_Balloc>
 80069de:	6932      	ldr	r2, [r6, #16]
 80069e0:	3202      	adds	r2, #2
 80069e2:	4605      	mov	r5, r0
 80069e4:	0092      	lsls	r2, r2, #2
 80069e6:	f106 010c 	add.w	r1, r6, #12
 80069ea:	300c      	adds	r0, #12
 80069ec:	f000 fc50 	bl	8007290 <memcpy>
 80069f0:	2201      	movs	r2, #1
 80069f2:	4629      	mov	r1, r5
 80069f4:	4620      	mov	r0, r4
 80069f6:	f000 fe55 	bl	80076a4 <__lshift>
 80069fa:	9b00      	ldr	r3, [sp, #0]
 80069fc:	f8cd b014 	str.w	fp, [sp, #20]
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	46b1      	mov	r9, r6
 8006a06:	9307      	str	r3, [sp, #28]
 8006a08:	4606      	mov	r6, r0
 8006a0a:	4639      	mov	r1, r7
 8006a0c:	9804      	ldr	r0, [sp, #16]
 8006a0e:	f7ff faa7 	bl	8005f60 <quorem>
 8006a12:	4649      	mov	r1, r9
 8006a14:	4605      	mov	r5, r0
 8006a16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a1a:	9804      	ldr	r0, [sp, #16]
 8006a1c:	f000 fe96 	bl	800774c <__mcmp>
 8006a20:	4632      	mov	r2, r6
 8006a22:	9000      	str	r0, [sp, #0]
 8006a24:	4639      	mov	r1, r7
 8006a26:	4620      	mov	r0, r4
 8006a28:	f000 feaa 	bl	8007780 <__mdiff>
 8006a2c:	68c3      	ldr	r3, [r0, #12]
 8006a2e:	4602      	mov	r2, r0
 8006a30:	bb03      	cbnz	r3, 8006a74 <_dtoa_r+0x9fc>
 8006a32:	4601      	mov	r1, r0
 8006a34:	9008      	str	r0, [sp, #32]
 8006a36:	9804      	ldr	r0, [sp, #16]
 8006a38:	f000 fe88 	bl	800774c <__mcmp>
 8006a3c:	9a08      	ldr	r2, [sp, #32]
 8006a3e:	4603      	mov	r3, r0
 8006a40:	4611      	mov	r1, r2
 8006a42:	4620      	mov	r0, r4
 8006a44:	9308      	str	r3, [sp, #32]
 8006a46:	f000 fc62 	bl	800730e <_Bfree>
 8006a4a:	9b08      	ldr	r3, [sp, #32]
 8006a4c:	b9a3      	cbnz	r3, 8006a78 <_dtoa_r+0xa00>
 8006a4e:	9a06      	ldr	r2, [sp, #24]
 8006a50:	b992      	cbnz	r2, 8006a78 <_dtoa_r+0xa00>
 8006a52:	9a07      	ldr	r2, [sp, #28]
 8006a54:	b982      	cbnz	r2, 8006a78 <_dtoa_r+0xa00>
 8006a56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a5a:	d029      	beq.n	8006ab0 <_dtoa_r+0xa38>
 8006a5c:	9b00      	ldr	r3, [sp, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	dd01      	ble.n	8006a66 <_dtoa_r+0x9ee>
 8006a62:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006a66:	9b05      	ldr	r3, [sp, #20]
 8006a68:	1c5d      	adds	r5, r3, #1
 8006a6a:	f883 8000 	strb.w	r8, [r3]
 8006a6e:	e782      	b.n	8006976 <_dtoa_r+0x8fe>
 8006a70:	4630      	mov	r0, r6
 8006a72:	e7c2      	b.n	80069fa <_dtoa_r+0x982>
 8006a74:	2301      	movs	r3, #1
 8006a76:	e7e3      	b.n	8006a40 <_dtoa_r+0x9c8>
 8006a78:	9a00      	ldr	r2, [sp, #0]
 8006a7a:	2a00      	cmp	r2, #0
 8006a7c:	db04      	blt.n	8006a88 <_dtoa_r+0xa10>
 8006a7e:	d125      	bne.n	8006acc <_dtoa_r+0xa54>
 8006a80:	9a06      	ldr	r2, [sp, #24]
 8006a82:	bb1a      	cbnz	r2, 8006acc <_dtoa_r+0xa54>
 8006a84:	9a07      	ldr	r2, [sp, #28]
 8006a86:	bb0a      	cbnz	r2, 8006acc <_dtoa_r+0xa54>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	ddec      	ble.n	8006a66 <_dtoa_r+0x9ee>
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	9904      	ldr	r1, [sp, #16]
 8006a90:	4620      	mov	r0, r4
 8006a92:	f000 fe07 	bl	80076a4 <__lshift>
 8006a96:	4639      	mov	r1, r7
 8006a98:	9004      	str	r0, [sp, #16]
 8006a9a:	f000 fe57 	bl	800774c <__mcmp>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	dc03      	bgt.n	8006aaa <_dtoa_r+0xa32>
 8006aa2:	d1e0      	bne.n	8006a66 <_dtoa_r+0x9ee>
 8006aa4:	f018 0f01 	tst.w	r8, #1
 8006aa8:	d0dd      	beq.n	8006a66 <_dtoa_r+0x9ee>
 8006aaa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006aae:	d1d8      	bne.n	8006a62 <_dtoa_r+0x9ea>
 8006ab0:	9b05      	ldr	r3, [sp, #20]
 8006ab2:	9a05      	ldr	r2, [sp, #20]
 8006ab4:	1c5d      	adds	r5, r3, #1
 8006ab6:	2339      	movs	r3, #57	; 0x39
 8006ab8:	7013      	strb	r3, [r2, #0]
 8006aba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006abe:	2b39      	cmp	r3, #57	; 0x39
 8006ac0:	f105 32ff 	add.w	r2, r5, #4294967295
 8006ac4:	d04f      	beq.n	8006b66 <_dtoa_r+0xaee>
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	7013      	strb	r3, [r2, #0]
 8006aca:	e754      	b.n	8006976 <_dtoa_r+0x8fe>
 8006acc:	9a05      	ldr	r2, [sp, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f102 0501 	add.w	r5, r2, #1
 8006ad4:	dd06      	ble.n	8006ae4 <_dtoa_r+0xa6c>
 8006ad6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006ada:	d0e9      	beq.n	8006ab0 <_dtoa_r+0xa38>
 8006adc:	f108 0801 	add.w	r8, r8, #1
 8006ae0:	9b05      	ldr	r3, [sp, #20]
 8006ae2:	e7c2      	b.n	8006a6a <_dtoa_r+0x9f2>
 8006ae4:	9a02      	ldr	r2, [sp, #8]
 8006ae6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006aea:	eba5 030b 	sub.w	r3, r5, fp
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d021      	beq.n	8006b36 <_dtoa_r+0xabe>
 8006af2:	2300      	movs	r3, #0
 8006af4:	220a      	movs	r2, #10
 8006af6:	9904      	ldr	r1, [sp, #16]
 8006af8:	4620      	mov	r0, r4
 8006afa:	f000 fc1f 	bl	800733c <__multadd>
 8006afe:	45b1      	cmp	r9, r6
 8006b00:	9004      	str	r0, [sp, #16]
 8006b02:	f04f 0300 	mov.w	r3, #0
 8006b06:	f04f 020a 	mov.w	r2, #10
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	d105      	bne.n	8006b1c <_dtoa_r+0xaa4>
 8006b10:	f000 fc14 	bl	800733c <__multadd>
 8006b14:	4681      	mov	r9, r0
 8006b16:	4606      	mov	r6, r0
 8006b18:	9505      	str	r5, [sp, #20]
 8006b1a:	e776      	b.n	8006a0a <_dtoa_r+0x992>
 8006b1c:	f000 fc0e 	bl	800733c <__multadd>
 8006b20:	4631      	mov	r1, r6
 8006b22:	4681      	mov	r9, r0
 8006b24:	2300      	movs	r3, #0
 8006b26:	220a      	movs	r2, #10
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 fc07 	bl	800733c <__multadd>
 8006b2e:	4606      	mov	r6, r0
 8006b30:	e7f2      	b.n	8006b18 <_dtoa_r+0xaa0>
 8006b32:	f04f 0900 	mov.w	r9, #0
 8006b36:	2201      	movs	r2, #1
 8006b38:	9904      	ldr	r1, [sp, #16]
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f000 fdb2 	bl	80076a4 <__lshift>
 8006b40:	4639      	mov	r1, r7
 8006b42:	9004      	str	r0, [sp, #16]
 8006b44:	f000 fe02 	bl	800774c <__mcmp>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	dcb6      	bgt.n	8006aba <_dtoa_r+0xa42>
 8006b4c:	d102      	bne.n	8006b54 <_dtoa_r+0xadc>
 8006b4e:	f018 0f01 	tst.w	r8, #1
 8006b52:	d1b2      	bne.n	8006aba <_dtoa_r+0xa42>
 8006b54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b58:	2b30      	cmp	r3, #48	; 0x30
 8006b5a:	f105 32ff 	add.w	r2, r5, #4294967295
 8006b5e:	f47f af0a 	bne.w	8006976 <_dtoa_r+0x8fe>
 8006b62:	4615      	mov	r5, r2
 8006b64:	e7f6      	b.n	8006b54 <_dtoa_r+0xadc>
 8006b66:	4593      	cmp	fp, r2
 8006b68:	d105      	bne.n	8006b76 <_dtoa_r+0xafe>
 8006b6a:	2331      	movs	r3, #49	; 0x31
 8006b6c:	f10a 0a01 	add.w	sl, sl, #1
 8006b70:	f88b 3000 	strb.w	r3, [fp]
 8006b74:	e6ff      	b.n	8006976 <_dtoa_r+0x8fe>
 8006b76:	4615      	mov	r5, r2
 8006b78:	e79f      	b.n	8006aba <_dtoa_r+0xa42>
 8006b7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006be0 <_dtoa_r+0xb68>
 8006b7e:	e007      	b.n	8006b90 <_dtoa_r+0xb18>
 8006b80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b82:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006be4 <_dtoa_r+0xb6c>
 8006b86:	b11b      	cbz	r3, 8006b90 <_dtoa_r+0xb18>
 8006b88:	f10b 0308 	add.w	r3, fp, #8
 8006b8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	4658      	mov	r0, fp
 8006b92:	b017      	add	sp, #92	; 0x5c
 8006b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b98:	9b06      	ldr	r3, [sp, #24]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	f77f ae35 	ble.w	800680a <_dtoa_r+0x792>
 8006ba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ba2:	9307      	str	r3, [sp, #28]
 8006ba4:	e649      	b.n	800683a <_dtoa_r+0x7c2>
 8006ba6:	9b02      	ldr	r3, [sp, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	dc03      	bgt.n	8006bb4 <_dtoa_r+0xb3c>
 8006bac:	9b06      	ldr	r3, [sp, #24]
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	f73f aecc 	bgt.w	800694c <_dtoa_r+0x8d4>
 8006bb4:	465d      	mov	r5, fp
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	9804      	ldr	r0, [sp, #16]
 8006bba:	f7ff f9d1 	bl	8005f60 <quorem>
 8006bbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006bc2:	f805 8b01 	strb.w	r8, [r5], #1
 8006bc6:	9a02      	ldr	r2, [sp, #8]
 8006bc8:	eba5 030b 	sub.w	r3, r5, fp
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	ddb0      	ble.n	8006b32 <_dtoa_r+0xaba>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	220a      	movs	r2, #10
 8006bd4:	9904      	ldr	r1, [sp, #16]
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f000 fbb0 	bl	800733c <__multadd>
 8006bdc:	9004      	str	r0, [sp, #16]
 8006bde:	e7ea      	b.n	8006bb6 <_dtoa_r+0xb3e>
 8006be0:	0800815c 	.word	0x0800815c
 8006be4:	080081d8 	.word	0x080081d8

08006be8 <rshift>:
 8006be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bea:	6906      	ldr	r6, [r0, #16]
 8006bec:	114b      	asrs	r3, r1, #5
 8006bee:	429e      	cmp	r6, r3
 8006bf0:	f100 0414 	add.w	r4, r0, #20
 8006bf4:	dd30      	ble.n	8006c58 <rshift+0x70>
 8006bf6:	f011 011f 	ands.w	r1, r1, #31
 8006bfa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006bfe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006c02:	d108      	bne.n	8006c16 <rshift+0x2e>
 8006c04:	4621      	mov	r1, r4
 8006c06:	42b2      	cmp	r2, r6
 8006c08:	460b      	mov	r3, r1
 8006c0a:	d211      	bcs.n	8006c30 <rshift+0x48>
 8006c0c:	f852 3b04 	ldr.w	r3, [r2], #4
 8006c10:	f841 3b04 	str.w	r3, [r1], #4
 8006c14:	e7f7      	b.n	8006c06 <rshift+0x1e>
 8006c16:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006c1a:	f1c1 0c20 	rsb	ip, r1, #32
 8006c1e:	40cd      	lsrs	r5, r1
 8006c20:	3204      	adds	r2, #4
 8006c22:	4623      	mov	r3, r4
 8006c24:	42b2      	cmp	r2, r6
 8006c26:	4617      	mov	r7, r2
 8006c28:	d30c      	bcc.n	8006c44 <rshift+0x5c>
 8006c2a:	601d      	str	r5, [r3, #0]
 8006c2c:	b105      	cbz	r5, 8006c30 <rshift+0x48>
 8006c2e:	3304      	adds	r3, #4
 8006c30:	1b1a      	subs	r2, r3, r4
 8006c32:	42a3      	cmp	r3, r4
 8006c34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006c38:	bf08      	it	eq
 8006c3a:	2300      	moveq	r3, #0
 8006c3c:	6102      	str	r2, [r0, #16]
 8006c3e:	bf08      	it	eq
 8006c40:	6143      	streq	r3, [r0, #20]
 8006c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c44:	683f      	ldr	r7, [r7, #0]
 8006c46:	fa07 f70c 	lsl.w	r7, r7, ip
 8006c4a:	433d      	orrs	r5, r7
 8006c4c:	f843 5b04 	str.w	r5, [r3], #4
 8006c50:	f852 5b04 	ldr.w	r5, [r2], #4
 8006c54:	40cd      	lsrs	r5, r1
 8006c56:	e7e5      	b.n	8006c24 <rshift+0x3c>
 8006c58:	4623      	mov	r3, r4
 8006c5a:	e7e9      	b.n	8006c30 <rshift+0x48>

08006c5c <__hexdig_fun>:
 8006c5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006c60:	2b09      	cmp	r3, #9
 8006c62:	d802      	bhi.n	8006c6a <__hexdig_fun+0xe>
 8006c64:	3820      	subs	r0, #32
 8006c66:	b2c0      	uxtb	r0, r0
 8006c68:	4770      	bx	lr
 8006c6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006c6e:	2b05      	cmp	r3, #5
 8006c70:	d801      	bhi.n	8006c76 <__hexdig_fun+0x1a>
 8006c72:	3847      	subs	r0, #71	; 0x47
 8006c74:	e7f7      	b.n	8006c66 <__hexdig_fun+0xa>
 8006c76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006c7a:	2b05      	cmp	r3, #5
 8006c7c:	d801      	bhi.n	8006c82 <__hexdig_fun+0x26>
 8006c7e:	3827      	subs	r0, #39	; 0x27
 8006c80:	e7f1      	b.n	8006c66 <__hexdig_fun+0xa>
 8006c82:	2000      	movs	r0, #0
 8006c84:	4770      	bx	lr

08006c86 <__gethex>:
 8006c86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8a:	b08b      	sub	sp, #44	; 0x2c
 8006c8c:	468a      	mov	sl, r1
 8006c8e:	9002      	str	r0, [sp, #8]
 8006c90:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006c92:	9306      	str	r3, [sp, #24]
 8006c94:	4690      	mov	r8, r2
 8006c96:	f000 fad0 	bl	800723a <__localeconv_l>
 8006c9a:	6803      	ldr	r3, [r0, #0]
 8006c9c:	9303      	str	r3, [sp, #12]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7f9 faa0 	bl	80001e4 <strlen>
 8006ca4:	9b03      	ldr	r3, [sp, #12]
 8006ca6:	9001      	str	r0, [sp, #4]
 8006ca8:	4403      	add	r3, r0
 8006caa:	f04f 0b00 	mov.w	fp, #0
 8006cae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006cb2:	9307      	str	r3, [sp, #28]
 8006cb4:	f8da 3000 	ldr.w	r3, [sl]
 8006cb8:	3302      	adds	r3, #2
 8006cba:	461f      	mov	r7, r3
 8006cbc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006cc0:	2830      	cmp	r0, #48	; 0x30
 8006cc2:	d06c      	beq.n	8006d9e <__gethex+0x118>
 8006cc4:	f7ff ffca 	bl	8006c5c <__hexdig_fun>
 8006cc8:	4604      	mov	r4, r0
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d16a      	bne.n	8006da4 <__gethex+0x11e>
 8006cce:	9a01      	ldr	r2, [sp, #4]
 8006cd0:	9903      	ldr	r1, [sp, #12]
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	f001 f8fe 	bl	8007ed4 <strncmp>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d166      	bne.n	8006daa <__gethex+0x124>
 8006cdc:	9b01      	ldr	r3, [sp, #4]
 8006cde:	5cf8      	ldrb	r0, [r7, r3]
 8006ce0:	18fe      	adds	r6, r7, r3
 8006ce2:	f7ff ffbb 	bl	8006c5c <__hexdig_fun>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d062      	beq.n	8006db0 <__gethex+0x12a>
 8006cea:	4633      	mov	r3, r6
 8006cec:	7818      	ldrb	r0, [r3, #0]
 8006cee:	2830      	cmp	r0, #48	; 0x30
 8006cf0:	461f      	mov	r7, r3
 8006cf2:	f103 0301 	add.w	r3, r3, #1
 8006cf6:	d0f9      	beq.n	8006cec <__gethex+0x66>
 8006cf8:	f7ff ffb0 	bl	8006c5c <__hexdig_fun>
 8006cfc:	fab0 f580 	clz	r5, r0
 8006d00:	096d      	lsrs	r5, r5, #5
 8006d02:	4634      	mov	r4, r6
 8006d04:	f04f 0b01 	mov.w	fp, #1
 8006d08:	463a      	mov	r2, r7
 8006d0a:	4616      	mov	r6, r2
 8006d0c:	3201      	adds	r2, #1
 8006d0e:	7830      	ldrb	r0, [r6, #0]
 8006d10:	f7ff ffa4 	bl	8006c5c <__hexdig_fun>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d1f8      	bne.n	8006d0a <__gethex+0x84>
 8006d18:	9a01      	ldr	r2, [sp, #4]
 8006d1a:	9903      	ldr	r1, [sp, #12]
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	f001 f8d9 	bl	8007ed4 <strncmp>
 8006d22:	b950      	cbnz	r0, 8006d3a <__gethex+0xb4>
 8006d24:	b954      	cbnz	r4, 8006d3c <__gethex+0xb6>
 8006d26:	9b01      	ldr	r3, [sp, #4]
 8006d28:	18f4      	adds	r4, r6, r3
 8006d2a:	4622      	mov	r2, r4
 8006d2c:	4616      	mov	r6, r2
 8006d2e:	3201      	adds	r2, #1
 8006d30:	7830      	ldrb	r0, [r6, #0]
 8006d32:	f7ff ff93 	bl	8006c5c <__hexdig_fun>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d1f8      	bne.n	8006d2c <__gethex+0xa6>
 8006d3a:	b10c      	cbz	r4, 8006d40 <__gethex+0xba>
 8006d3c:	1ba4      	subs	r4, r4, r6
 8006d3e:	00a4      	lsls	r4, r4, #2
 8006d40:	7833      	ldrb	r3, [r6, #0]
 8006d42:	2b50      	cmp	r3, #80	; 0x50
 8006d44:	d001      	beq.n	8006d4a <__gethex+0xc4>
 8006d46:	2b70      	cmp	r3, #112	; 0x70
 8006d48:	d140      	bne.n	8006dcc <__gethex+0x146>
 8006d4a:	7873      	ldrb	r3, [r6, #1]
 8006d4c:	2b2b      	cmp	r3, #43	; 0x2b
 8006d4e:	d031      	beq.n	8006db4 <__gethex+0x12e>
 8006d50:	2b2d      	cmp	r3, #45	; 0x2d
 8006d52:	d033      	beq.n	8006dbc <__gethex+0x136>
 8006d54:	1c71      	adds	r1, r6, #1
 8006d56:	f04f 0900 	mov.w	r9, #0
 8006d5a:	7808      	ldrb	r0, [r1, #0]
 8006d5c:	f7ff ff7e 	bl	8006c5c <__hexdig_fun>
 8006d60:	1e43      	subs	r3, r0, #1
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b18      	cmp	r3, #24
 8006d66:	d831      	bhi.n	8006dcc <__gethex+0x146>
 8006d68:	f1a0 0210 	sub.w	r2, r0, #16
 8006d6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006d70:	f7ff ff74 	bl	8006c5c <__hexdig_fun>
 8006d74:	1e43      	subs	r3, r0, #1
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b18      	cmp	r3, #24
 8006d7a:	d922      	bls.n	8006dc2 <__gethex+0x13c>
 8006d7c:	f1b9 0f00 	cmp.w	r9, #0
 8006d80:	d000      	beq.n	8006d84 <__gethex+0xfe>
 8006d82:	4252      	negs	r2, r2
 8006d84:	4414      	add	r4, r2
 8006d86:	f8ca 1000 	str.w	r1, [sl]
 8006d8a:	b30d      	cbz	r5, 8006dd0 <__gethex+0x14a>
 8006d8c:	f1bb 0f00 	cmp.w	fp, #0
 8006d90:	bf0c      	ite	eq
 8006d92:	2706      	moveq	r7, #6
 8006d94:	2700      	movne	r7, #0
 8006d96:	4638      	mov	r0, r7
 8006d98:	b00b      	add	sp, #44	; 0x2c
 8006d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d9e:	f10b 0b01 	add.w	fp, fp, #1
 8006da2:	e78a      	b.n	8006cba <__gethex+0x34>
 8006da4:	2500      	movs	r5, #0
 8006da6:	462c      	mov	r4, r5
 8006da8:	e7ae      	b.n	8006d08 <__gethex+0x82>
 8006daa:	463e      	mov	r6, r7
 8006dac:	2501      	movs	r5, #1
 8006dae:	e7c7      	b.n	8006d40 <__gethex+0xba>
 8006db0:	4604      	mov	r4, r0
 8006db2:	e7fb      	b.n	8006dac <__gethex+0x126>
 8006db4:	f04f 0900 	mov.w	r9, #0
 8006db8:	1cb1      	adds	r1, r6, #2
 8006dba:	e7ce      	b.n	8006d5a <__gethex+0xd4>
 8006dbc:	f04f 0901 	mov.w	r9, #1
 8006dc0:	e7fa      	b.n	8006db8 <__gethex+0x132>
 8006dc2:	230a      	movs	r3, #10
 8006dc4:	fb03 0202 	mla	r2, r3, r2, r0
 8006dc8:	3a10      	subs	r2, #16
 8006dca:	e7cf      	b.n	8006d6c <__gethex+0xe6>
 8006dcc:	4631      	mov	r1, r6
 8006dce:	e7da      	b.n	8006d86 <__gethex+0x100>
 8006dd0:	1bf3      	subs	r3, r6, r7
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	2b07      	cmp	r3, #7
 8006dd8:	dc49      	bgt.n	8006e6e <__gethex+0x1e8>
 8006dda:	9802      	ldr	r0, [sp, #8]
 8006ddc:	f000 fa63 	bl	80072a6 <_Balloc>
 8006de0:	9b01      	ldr	r3, [sp, #4]
 8006de2:	f100 0914 	add.w	r9, r0, #20
 8006de6:	f04f 0b00 	mov.w	fp, #0
 8006dea:	f1c3 0301 	rsb	r3, r3, #1
 8006dee:	4605      	mov	r5, r0
 8006df0:	f8cd 9010 	str.w	r9, [sp, #16]
 8006df4:	46da      	mov	sl, fp
 8006df6:	9308      	str	r3, [sp, #32]
 8006df8:	42b7      	cmp	r7, r6
 8006dfa:	d33b      	bcc.n	8006e74 <__gethex+0x1ee>
 8006dfc:	9804      	ldr	r0, [sp, #16]
 8006dfe:	f840 ab04 	str.w	sl, [r0], #4
 8006e02:	eba0 0009 	sub.w	r0, r0, r9
 8006e06:	1080      	asrs	r0, r0, #2
 8006e08:	6128      	str	r0, [r5, #16]
 8006e0a:	0147      	lsls	r7, r0, #5
 8006e0c:	4650      	mov	r0, sl
 8006e0e:	f000 fb0e 	bl	800742e <__hi0bits>
 8006e12:	f8d8 6000 	ldr.w	r6, [r8]
 8006e16:	1a3f      	subs	r7, r7, r0
 8006e18:	42b7      	cmp	r7, r6
 8006e1a:	dd64      	ble.n	8006ee6 <__gethex+0x260>
 8006e1c:	1bbf      	subs	r7, r7, r6
 8006e1e:	4639      	mov	r1, r7
 8006e20:	4628      	mov	r0, r5
 8006e22:	f000 fe1d 	bl	8007a60 <__any_on>
 8006e26:	4682      	mov	sl, r0
 8006e28:	b178      	cbz	r0, 8006e4a <__gethex+0x1c4>
 8006e2a:	1e7b      	subs	r3, r7, #1
 8006e2c:	1159      	asrs	r1, r3, #5
 8006e2e:	f003 021f 	and.w	r2, r3, #31
 8006e32:	f04f 0a01 	mov.w	sl, #1
 8006e36:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006e3a:	fa0a f202 	lsl.w	r2, sl, r2
 8006e3e:	420a      	tst	r2, r1
 8006e40:	d003      	beq.n	8006e4a <__gethex+0x1c4>
 8006e42:	4553      	cmp	r3, sl
 8006e44:	dc46      	bgt.n	8006ed4 <__gethex+0x24e>
 8006e46:	f04f 0a02 	mov.w	sl, #2
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	f7ff fecb 	bl	8006be8 <rshift>
 8006e52:	443c      	add	r4, r7
 8006e54:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e58:	42a3      	cmp	r3, r4
 8006e5a:	da52      	bge.n	8006f02 <__gethex+0x27c>
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	9802      	ldr	r0, [sp, #8]
 8006e60:	f000 fa55 	bl	800730e <_Bfree>
 8006e64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e66:	2300      	movs	r3, #0
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	27a3      	movs	r7, #163	; 0xa3
 8006e6c:	e793      	b.n	8006d96 <__gethex+0x110>
 8006e6e:	3101      	adds	r1, #1
 8006e70:	105b      	asrs	r3, r3, #1
 8006e72:	e7b0      	b.n	8006dd6 <__gethex+0x150>
 8006e74:	1e73      	subs	r3, r6, #1
 8006e76:	9305      	str	r3, [sp, #20]
 8006e78:	9a07      	ldr	r2, [sp, #28]
 8006e7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d018      	beq.n	8006eb4 <__gethex+0x22e>
 8006e82:	f1bb 0f20 	cmp.w	fp, #32
 8006e86:	d107      	bne.n	8006e98 <__gethex+0x212>
 8006e88:	9b04      	ldr	r3, [sp, #16]
 8006e8a:	f8c3 a000 	str.w	sl, [r3]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	f04f 0a00 	mov.w	sl, #0
 8006e94:	9304      	str	r3, [sp, #16]
 8006e96:	46d3      	mov	fp, sl
 8006e98:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006e9c:	f7ff fede 	bl	8006c5c <__hexdig_fun>
 8006ea0:	f000 000f 	and.w	r0, r0, #15
 8006ea4:	fa00 f00b 	lsl.w	r0, r0, fp
 8006ea8:	ea4a 0a00 	orr.w	sl, sl, r0
 8006eac:	f10b 0b04 	add.w	fp, fp, #4
 8006eb0:	9b05      	ldr	r3, [sp, #20]
 8006eb2:	e00d      	b.n	8006ed0 <__gethex+0x24a>
 8006eb4:	9b05      	ldr	r3, [sp, #20]
 8006eb6:	9a08      	ldr	r2, [sp, #32]
 8006eb8:	4413      	add	r3, r2
 8006eba:	42bb      	cmp	r3, r7
 8006ebc:	d3e1      	bcc.n	8006e82 <__gethex+0x1fc>
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	9a01      	ldr	r2, [sp, #4]
 8006ec2:	9903      	ldr	r1, [sp, #12]
 8006ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec6:	f001 f805 	bl	8007ed4 <strncmp>
 8006eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d1d8      	bne.n	8006e82 <__gethex+0x1fc>
 8006ed0:	461e      	mov	r6, r3
 8006ed2:	e791      	b.n	8006df8 <__gethex+0x172>
 8006ed4:	1eb9      	subs	r1, r7, #2
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f000 fdc2 	bl	8007a60 <__any_on>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d0b2      	beq.n	8006e46 <__gethex+0x1c0>
 8006ee0:	f04f 0a03 	mov.w	sl, #3
 8006ee4:	e7b1      	b.n	8006e4a <__gethex+0x1c4>
 8006ee6:	da09      	bge.n	8006efc <__gethex+0x276>
 8006ee8:	1bf7      	subs	r7, r6, r7
 8006eea:	4629      	mov	r1, r5
 8006eec:	463a      	mov	r2, r7
 8006eee:	9802      	ldr	r0, [sp, #8]
 8006ef0:	f000 fbd8 	bl	80076a4 <__lshift>
 8006ef4:	1be4      	subs	r4, r4, r7
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	f100 0914 	add.w	r9, r0, #20
 8006efc:	f04f 0a00 	mov.w	sl, #0
 8006f00:	e7a8      	b.n	8006e54 <__gethex+0x1ce>
 8006f02:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006f06:	42a0      	cmp	r0, r4
 8006f08:	dd6a      	ble.n	8006fe0 <__gethex+0x35a>
 8006f0a:	1b04      	subs	r4, r0, r4
 8006f0c:	42a6      	cmp	r6, r4
 8006f0e:	dc2e      	bgt.n	8006f6e <__gethex+0x2e8>
 8006f10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d022      	beq.n	8006f5e <__gethex+0x2d8>
 8006f18:	2b03      	cmp	r3, #3
 8006f1a:	d024      	beq.n	8006f66 <__gethex+0x2e0>
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d115      	bne.n	8006f4c <__gethex+0x2c6>
 8006f20:	42a6      	cmp	r6, r4
 8006f22:	d113      	bne.n	8006f4c <__gethex+0x2c6>
 8006f24:	2e01      	cmp	r6, #1
 8006f26:	dc0b      	bgt.n	8006f40 <__gethex+0x2ba>
 8006f28:	9a06      	ldr	r2, [sp, #24]
 8006f2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	2301      	movs	r3, #1
 8006f32:	612b      	str	r3, [r5, #16]
 8006f34:	f8c9 3000 	str.w	r3, [r9]
 8006f38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f3a:	2762      	movs	r7, #98	; 0x62
 8006f3c:	601d      	str	r5, [r3, #0]
 8006f3e:	e72a      	b.n	8006d96 <__gethex+0x110>
 8006f40:	1e71      	subs	r1, r6, #1
 8006f42:	4628      	mov	r0, r5
 8006f44:	f000 fd8c 	bl	8007a60 <__any_on>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d1ed      	bne.n	8006f28 <__gethex+0x2a2>
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	9802      	ldr	r0, [sp, #8]
 8006f50:	f000 f9dd 	bl	800730e <_Bfree>
 8006f54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f56:	2300      	movs	r3, #0
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	2750      	movs	r7, #80	; 0x50
 8006f5c:	e71b      	b.n	8006d96 <__gethex+0x110>
 8006f5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d0e1      	beq.n	8006f28 <__gethex+0x2a2>
 8006f64:	e7f2      	b.n	8006f4c <__gethex+0x2c6>
 8006f66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1dd      	bne.n	8006f28 <__gethex+0x2a2>
 8006f6c:	e7ee      	b.n	8006f4c <__gethex+0x2c6>
 8006f6e:	1e67      	subs	r7, r4, #1
 8006f70:	f1ba 0f00 	cmp.w	sl, #0
 8006f74:	d131      	bne.n	8006fda <__gethex+0x354>
 8006f76:	b127      	cbz	r7, 8006f82 <__gethex+0x2fc>
 8006f78:	4639      	mov	r1, r7
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f000 fd70 	bl	8007a60 <__any_on>
 8006f80:	4682      	mov	sl, r0
 8006f82:	117a      	asrs	r2, r7, #5
 8006f84:	2301      	movs	r3, #1
 8006f86:	f007 071f 	and.w	r7, r7, #31
 8006f8a:	fa03 f707 	lsl.w	r7, r3, r7
 8006f8e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006f92:	4621      	mov	r1, r4
 8006f94:	421f      	tst	r7, r3
 8006f96:	4628      	mov	r0, r5
 8006f98:	bf18      	it	ne
 8006f9a:	f04a 0a02 	orrne.w	sl, sl, #2
 8006f9e:	1b36      	subs	r6, r6, r4
 8006fa0:	f7ff fe22 	bl	8006be8 <rshift>
 8006fa4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006fa8:	2702      	movs	r7, #2
 8006faa:	f1ba 0f00 	cmp.w	sl, #0
 8006fae:	d048      	beq.n	8007042 <__gethex+0x3bc>
 8006fb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d015      	beq.n	8006fe4 <__gethex+0x35e>
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d017      	beq.n	8006fec <__gethex+0x366>
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d109      	bne.n	8006fd4 <__gethex+0x34e>
 8006fc0:	f01a 0f02 	tst.w	sl, #2
 8006fc4:	d006      	beq.n	8006fd4 <__gethex+0x34e>
 8006fc6:	f8d9 3000 	ldr.w	r3, [r9]
 8006fca:	ea4a 0a03 	orr.w	sl, sl, r3
 8006fce:	f01a 0f01 	tst.w	sl, #1
 8006fd2:	d10e      	bne.n	8006ff2 <__gethex+0x36c>
 8006fd4:	f047 0710 	orr.w	r7, r7, #16
 8006fd8:	e033      	b.n	8007042 <__gethex+0x3bc>
 8006fda:	f04f 0a01 	mov.w	sl, #1
 8006fde:	e7d0      	b.n	8006f82 <__gethex+0x2fc>
 8006fe0:	2701      	movs	r7, #1
 8006fe2:	e7e2      	b.n	8006faa <__gethex+0x324>
 8006fe4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fe6:	f1c3 0301 	rsb	r3, r3, #1
 8006fea:	9315      	str	r3, [sp, #84]	; 0x54
 8006fec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0f0      	beq.n	8006fd4 <__gethex+0x34e>
 8006ff2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006ff6:	f105 0314 	add.w	r3, r5, #20
 8006ffa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006ffe:	eb03 010a 	add.w	r1, r3, sl
 8007002:	f04f 0c00 	mov.w	ip, #0
 8007006:	4618      	mov	r0, r3
 8007008:	f853 2b04 	ldr.w	r2, [r3], #4
 800700c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007010:	d01c      	beq.n	800704c <__gethex+0x3c6>
 8007012:	3201      	adds	r2, #1
 8007014:	6002      	str	r2, [r0, #0]
 8007016:	2f02      	cmp	r7, #2
 8007018:	f105 0314 	add.w	r3, r5, #20
 800701c:	d138      	bne.n	8007090 <__gethex+0x40a>
 800701e:	f8d8 2000 	ldr.w	r2, [r8]
 8007022:	3a01      	subs	r2, #1
 8007024:	42b2      	cmp	r2, r6
 8007026:	d10a      	bne.n	800703e <__gethex+0x3b8>
 8007028:	1171      	asrs	r1, r6, #5
 800702a:	2201      	movs	r2, #1
 800702c:	f006 061f 	and.w	r6, r6, #31
 8007030:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007034:	fa02 f606 	lsl.w	r6, r2, r6
 8007038:	421e      	tst	r6, r3
 800703a:	bf18      	it	ne
 800703c:	4617      	movne	r7, r2
 800703e:	f047 0720 	orr.w	r7, r7, #32
 8007042:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007044:	601d      	str	r5, [r3, #0]
 8007046:	9b06      	ldr	r3, [sp, #24]
 8007048:	601c      	str	r4, [r3, #0]
 800704a:	e6a4      	b.n	8006d96 <__gethex+0x110>
 800704c:	4299      	cmp	r1, r3
 800704e:	f843 cc04 	str.w	ip, [r3, #-4]
 8007052:	d8d8      	bhi.n	8007006 <__gethex+0x380>
 8007054:	68ab      	ldr	r3, [r5, #8]
 8007056:	4599      	cmp	r9, r3
 8007058:	db12      	blt.n	8007080 <__gethex+0x3fa>
 800705a:	6869      	ldr	r1, [r5, #4]
 800705c:	9802      	ldr	r0, [sp, #8]
 800705e:	3101      	adds	r1, #1
 8007060:	f000 f921 	bl	80072a6 <_Balloc>
 8007064:	692a      	ldr	r2, [r5, #16]
 8007066:	3202      	adds	r2, #2
 8007068:	f105 010c 	add.w	r1, r5, #12
 800706c:	4683      	mov	fp, r0
 800706e:	0092      	lsls	r2, r2, #2
 8007070:	300c      	adds	r0, #12
 8007072:	f000 f90d 	bl	8007290 <memcpy>
 8007076:	4629      	mov	r1, r5
 8007078:	9802      	ldr	r0, [sp, #8]
 800707a:	f000 f948 	bl	800730e <_Bfree>
 800707e:	465d      	mov	r5, fp
 8007080:	692b      	ldr	r3, [r5, #16]
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007088:	612a      	str	r2, [r5, #16]
 800708a:	2201      	movs	r2, #1
 800708c:	615a      	str	r2, [r3, #20]
 800708e:	e7c2      	b.n	8007016 <__gethex+0x390>
 8007090:	692a      	ldr	r2, [r5, #16]
 8007092:	454a      	cmp	r2, r9
 8007094:	dd0b      	ble.n	80070ae <__gethex+0x428>
 8007096:	2101      	movs	r1, #1
 8007098:	4628      	mov	r0, r5
 800709a:	f7ff fda5 	bl	8006be8 <rshift>
 800709e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80070a2:	3401      	adds	r4, #1
 80070a4:	42a3      	cmp	r3, r4
 80070a6:	f6ff aed9 	blt.w	8006e5c <__gethex+0x1d6>
 80070aa:	2701      	movs	r7, #1
 80070ac:	e7c7      	b.n	800703e <__gethex+0x3b8>
 80070ae:	f016 061f 	ands.w	r6, r6, #31
 80070b2:	d0fa      	beq.n	80070aa <__gethex+0x424>
 80070b4:	449a      	add	sl, r3
 80070b6:	f1c6 0620 	rsb	r6, r6, #32
 80070ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80070be:	f000 f9b6 	bl	800742e <__hi0bits>
 80070c2:	42b0      	cmp	r0, r6
 80070c4:	dbe7      	blt.n	8007096 <__gethex+0x410>
 80070c6:	e7f0      	b.n	80070aa <__gethex+0x424>

080070c8 <L_shift>:
 80070c8:	f1c2 0208 	rsb	r2, r2, #8
 80070cc:	0092      	lsls	r2, r2, #2
 80070ce:	b570      	push	{r4, r5, r6, lr}
 80070d0:	f1c2 0620 	rsb	r6, r2, #32
 80070d4:	6843      	ldr	r3, [r0, #4]
 80070d6:	6804      	ldr	r4, [r0, #0]
 80070d8:	fa03 f506 	lsl.w	r5, r3, r6
 80070dc:	432c      	orrs	r4, r5
 80070de:	40d3      	lsrs	r3, r2
 80070e0:	6004      	str	r4, [r0, #0]
 80070e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80070e6:	4288      	cmp	r0, r1
 80070e8:	d3f4      	bcc.n	80070d4 <L_shift+0xc>
 80070ea:	bd70      	pop	{r4, r5, r6, pc}

080070ec <__match>:
 80070ec:	b530      	push	{r4, r5, lr}
 80070ee:	6803      	ldr	r3, [r0, #0]
 80070f0:	3301      	adds	r3, #1
 80070f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070f6:	b914      	cbnz	r4, 80070fe <__match+0x12>
 80070f8:	6003      	str	r3, [r0, #0]
 80070fa:	2001      	movs	r0, #1
 80070fc:	bd30      	pop	{r4, r5, pc}
 80070fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007102:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007106:	2d19      	cmp	r5, #25
 8007108:	bf98      	it	ls
 800710a:	3220      	addls	r2, #32
 800710c:	42a2      	cmp	r2, r4
 800710e:	d0f0      	beq.n	80070f2 <__match+0x6>
 8007110:	2000      	movs	r0, #0
 8007112:	e7f3      	b.n	80070fc <__match+0x10>

08007114 <__hexnan>:
 8007114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007118:	680b      	ldr	r3, [r1, #0]
 800711a:	6801      	ldr	r1, [r0, #0]
 800711c:	115f      	asrs	r7, r3, #5
 800711e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007122:	f013 031f 	ands.w	r3, r3, #31
 8007126:	b087      	sub	sp, #28
 8007128:	bf18      	it	ne
 800712a:	3704      	addne	r7, #4
 800712c:	2500      	movs	r5, #0
 800712e:	1f3e      	subs	r6, r7, #4
 8007130:	4682      	mov	sl, r0
 8007132:	4690      	mov	r8, r2
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	f847 5c04 	str.w	r5, [r7, #-4]
 800713a:	46b1      	mov	r9, r6
 800713c:	4634      	mov	r4, r6
 800713e:	9502      	str	r5, [sp, #8]
 8007140:	46ab      	mov	fp, r5
 8007142:	784a      	ldrb	r2, [r1, #1]
 8007144:	1c4b      	adds	r3, r1, #1
 8007146:	9303      	str	r3, [sp, #12]
 8007148:	b342      	cbz	r2, 800719c <__hexnan+0x88>
 800714a:	4610      	mov	r0, r2
 800714c:	9105      	str	r1, [sp, #20]
 800714e:	9204      	str	r2, [sp, #16]
 8007150:	f7ff fd84 	bl	8006c5c <__hexdig_fun>
 8007154:	2800      	cmp	r0, #0
 8007156:	d143      	bne.n	80071e0 <__hexnan+0xcc>
 8007158:	9a04      	ldr	r2, [sp, #16]
 800715a:	9905      	ldr	r1, [sp, #20]
 800715c:	2a20      	cmp	r2, #32
 800715e:	d818      	bhi.n	8007192 <__hexnan+0x7e>
 8007160:	9b02      	ldr	r3, [sp, #8]
 8007162:	459b      	cmp	fp, r3
 8007164:	dd13      	ble.n	800718e <__hexnan+0x7a>
 8007166:	454c      	cmp	r4, r9
 8007168:	d206      	bcs.n	8007178 <__hexnan+0x64>
 800716a:	2d07      	cmp	r5, #7
 800716c:	dc04      	bgt.n	8007178 <__hexnan+0x64>
 800716e:	462a      	mov	r2, r5
 8007170:	4649      	mov	r1, r9
 8007172:	4620      	mov	r0, r4
 8007174:	f7ff ffa8 	bl	80070c8 <L_shift>
 8007178:	4544      	cmp	r4, r8
 800717a:	d944      	bls.n	8007206 <__hexnan+0xf2>
 800717c:	2300      	movs	r3, #0
 800717e:	f1a4 0904 	sub.w	r9, r4, #4
 8007182:	f844 3c04 	str.w	r3, [r4, #-4]
 8007186:	f8cd b008 	str.w	fp, [sp, #8]
 800718a:	464c      	mov	r4, r9
 800718c:	461d      	mov	r5, r3
 800718e:	9903      	ldr	r1, [sp, #12]
 8007190:	e7d7      	b.n	8007142 <__hexnan+0x2e>
 8007192:	2a29      	cmp	r2, #41	; 0x29
 8007194:	d14a      	bne.n	800722c <__hexnan+0x118>
 8007196:	3102      	adds	r1, #2
 8007198:	f8ca 1000 	str.w	r1, [sl]
 800719c:	f1bb 0f00 	cmp.w	fp, #0
 80071a0:	d044      	beq.n	800722c <__hexnan+0x118>
 80071a2:	454c      	cmp	r4, r9
 80071a4:	d206      	bcs.n	80071b4 <__hexnan+0xa0>
 80071a6:	2d07      	cmp	r5, #7
 80071a8:	dc04      	bgt.n	80071b4 <__hexnan+0xa0>
 80071aa:	462a      	mov	r2, r5
 80071ac:	4649      	mov	r1, r9
 80071ae:	4620      	mov	r0, r4
 80071b0:	f7ff ff8a 	bl	80070c8 <L_shift>
 80071b4:	4544      	cmp	r4, r8
 80071b6:	d928      	bls.n	800720a <__hexnan+0xf6>
 80071b8:	4643      	mov	r3, r8
 80071ba:	f854 2b04 	ldr.w	r2, [r4], #4
 80071be:	f843 2b04 	str.w	r2, [r3], #4
 80071c2:	42a6      	cmp	r6, r4
 80071c4:	d2f9      	bcs.n	80071ba <__hexnan+0xa6>
 80071c6:	2200      	movs	r2, #0
 80071c8:	f843 2b04 	str.w	r2, [r3], #4
 80071cc:	429e      	cmp	r6, r3
 80071ce:	d2fb      	bcs.n	80071c8 <__hexnan+0xb4>
 80071d0:	6833      	ldr	r3, [r6, #0]
 80071d2:	b91b      	cbnz	r3, 80071dc <__hexnan+0xc8>
 80071d4:	4546      	cmp	r6, r8
 80071d6:	d127      	bne.n	8007228 <__hexnan+0x114>
 80071d8:	2301      	movs	r3, #1
 80071da:	6033      	str	r3, [r6, #0]
 80071dc:	2005      	movs	r0, #5
 80071de:	e026      	b.n	800722e <__hexnan+0x11a>
 80071e0:	3501      	adds	r5, #1
 80071e2:	2d08      	cmp	r5, #8
 80071e4:	f10b 0b01 	add.w	fp, fp, #1
 80071e8:	dd06      	ble.n	80071f8 <__hexnan+0xe4>
 80071ea:	4544      	cmp	r4, r8
 80071ec:	d9cf      	bls.n	800718e <__hexnan+0x7a>
 80071ee:	2300      	movs	r3, #0
 80071f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80071f4:	2501      	movs	r5, #1
 80071f6:	3c04      	subs	r4, #4
 80071f8:	6822      	ldr	r2, [r4, #0]
 80071fa:	f000 000f 	and.w	r0, r0, #15
 80071fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007202:	6020      	str	r0, [r4, #0]
 8007204:	e7c3      	b.n	800718e <__hexnan+0x7a>
 8007206:	2508      	movs	r5, #8
 8007208:	e7c1      	b.n	800718e <__hexnan+0x7a>
 800720a:	9b01      	ldr	r3, [sp, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0df      	beq.n	80071d0 <__hexnan+0xbc>
 8007210:	f04f 32ff 	mov.w	r2, #4294967295
 8007214:	f1c3 0320 	rsb	r3, r3, #32
 8007218:	fa22 f303 	lsr.w	r3, r2, r3
 800721c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007220:	401a      	ands	r2, r3
 8007222:	f847 2c04 	str.w	r2, [r7, #-4]
 8007226:	e7d3      	b.n	80071d0 <__hexnan+0xbc>
 8007228:	3e04      	subs	r6, #4
 800722a:	e7d1      	b.n	80071d0 <__hexnan+0xbc>
 800722c:	2004      	movs	r0, #4
 800722e:	b007      	add	sp, #28
 8007230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007234 <__locale_ctype_ptr_l>:
 8007234:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007238:	4770      	bx	lr

0800723a <__localeconv_l>:
 800723a:	30f0      	adds	r0, #240	; 0xf0
 800723c:	4770      	bx	lr
	...

08007240 <_localeconv_r>:
 8007240:	4b04      	ldr	r3, [pc, #16]	; (8007254 <_localeconv_r+0x14>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6a18      	ldr	r0, [r3, #32]
 8007246:	4b04      	ldr	r3, [pc, #16]	; (8007258 <_localeconv_r+0x18>)
 8007248:	2800      	cmp	r0, #0
 800724a:	bf08      	it	eq
 800724c:	4618      	moveq	r0, r3
 800724e:	30f0      	adds	r0, #240	; 0xf0
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	2000002c 	.word	0x2000002c
 8007258:	20000090 	.word	0x20000090

0800725c <malloc>:
 800725c:	4b02      	ldr	r3, [pc, #8]	; (8007268 <malloc+0xc>)
 800725e:	4601      	mov	r1, r0
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	f000 bc7b 	b.w	8007b5c <_malloc_r>
 8007266:	bf00      	nop
 8007268:	2000002c 	.word	0x2000002c

0800726c <__ascii_mbtowc>:
 800726c:	b082      	sub	sp, #8
 800726e:	b901      	cbnz	r1, 8007272 <__ascii_mbtowc+0x6>
 8007270:	a901      	add	r1, sp, #4
 8007272:	b142      	cbz	r2, 8007286 <__ascii_mbtowc+0x1a>
 8007274:	b14b      	cbz	r3, 800728a <__ascii_mbtowc+0x1e>
 8007276:	7813      	ldrb	r3, [r2, #0]
 8007278:	600b      	str	r3, [r1, #0]
 800727a:	7812      	ldrb	r2, [r2, #0]
 800727c:	1c10      	adds	r0, r2, #0
 800727e:	bf18      	it	ne
 8007280:	2001      	movne	r0, #1
 8007282:	b002      	add	sp, #8
 8007284:	4770      	bx	lr
 8007286:	4610      	mov	r0, r2
 8007288:	e7fb      	b.n	8007282 <__ascii_mbtowc+0x16>
 800728a:	f06f 0001 	mvn.w	r0, #1
 800728e:	e7f8      	b.n	8007282 <__ascii_mbtowc+0x16>

08007290 <memcpy>:
 8007290:	b510      	push	{r4, lr}
 8007292:	1e43      	subs	r3, r0, #1
 8007294:	440a      	add	r2, r1
 8007296:	4291      	cmp	r1, r2
 8007298:	d100      	bne.n	800729c <memcpy+0xc>
 800729a:	bd10      	pop	{r4, pc}
 800729c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072a4:	e7f7      	b.n	8007296 <memcpy+0x6>

080072a6 <_Balloc>:
 80072a6:	b570      	push	{r4, r5, r6, lr}
 80072a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80072aa:	4604      	mov	r4, r0
 80072ac:	460e      	mov	r6, r1
 80072ae:	b93d      	cbnz	r5, 80072c0 <_Balloc+0x1a>
 80072b0:	2010      	movs	r0, #16
 80072b2:	f7ff ffd3 	bl	800725c <malloc>
 80072b6:	6260      	str	r0, [r4, #36]	; 0x24
 80072b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072bc:	6005      	str	r5, [r0, #0]
 80072be:	60c5      	str	r5, [r0, #12]
 80072c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80072c2:	68eb      	ldr	r3, [r5, #12]
 80072c4:	b183      	cbz	r3, 80072e8 <_Balloc+0x42>
 80072c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80072ce:	b9b8      	cbnz	r0, 8007300 <_Balloc+0x5a>
 80072d0:	2101      	movs	r1, #1
 80072d2:	fa01 f506 	lsl.w	r5, r1, r6
 80072d6:	1d6a      	adds	r2, r5, #5
 80072d8:	0092      	lsls	r2, r2, #2
 80072da:	4620      	mov	r0, r4
 80072dc:	f000 fbe1 	bl	8007aa2 <_calloc_r>
 80072e0:	b160      	cbz	r0, 80072fc <_Balloc+0x56>
 80072e2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80072e6:	e00e      	b.n	8007306 <_Balloc+0x60>
 80072e8:	2221      	movs	r2, #33	; 0x21
 80072ea:	2104      	movs	r1, #4
 80072ec:	4620      	mov	r0, r4
 80072ee:	f000 fbd8 	bl	8007aa2 <_calloc_r>
 80072f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072f4:	60e8      	str	r0, [r5, #12]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e4      	bne.n	80072c6 <_Balloc+0x20>
 80072fc:	2000      	movs	r0, #0
 80072fe:	bd70      	pop	{r4, r5, r6, pc}
 8007300:	6802      	ldr	r2, [r0, #0]
 8007302:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007306:	2300      	movs	r3, #0
 8007308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800730c:	e7f7      	b.n	80072fe <_Balloc+0x58>

0800730e <_Bfree>:
 800730e:	b570      	push	{r4, r5, r6, lr}
 8007310:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007312:	4606      	mov	r6, r0
 8007314:	460d      	mov	r5, r1
 8007316:	b93c      	cbnz	r4, 8007328 <_Bfree+0x1a>
 8007318:	2010      	movs	r0, #16
 800731a:	f7ff ff9f 	bl	800725c <malloc>
 800731e:	6270      	str	r0, [r6, #36]	; 0x24
 8007320:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007324:	6004      	str	r4, [r0, #0]
 8007326:	60c4      	str	r4, [r0, #12]
 8007328:	b13d      	cbz	r5, 800733a <_Bfree+0x2c>
 800732a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800732c:	686a      	ldr	r2, [r5, #4]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007334:	6029      	str	r1, [r5, #0]
 8007336:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800733a:	bd70      	pop	{r4, r5, r6, pc}

0800733c <__multadd>:
 800733c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007340:	690d      	ldr	r5, [r1, #16]
 8007342:	461f      	mov	r7, r3
 8007344:	4606      	mov	r6, r0
 8007346:	460c      	mov	r4, r1
 8007348:	f101 0c14 	add.w	ip, r1, #20
 800734c:	2300      	movs	r3, #0
 800734e:	f8dc 0000 	ldr.w	r0, [ip]
 8007352:	b281      	uxth	r1, r0
 8007354:	fb02 7101 	mla	r1, r2, r1, r7
 8007358:	0c0f      	lsrs	r7, r1, #16
 800735a:	0c00      	lsrs	r0, r0, #16
 800735c:	fb02 7000 	mla	r0, r2, r0, r7
 8007360:	b289      	uxth	r1, r1
 8007362:	3301      	adds	r3, #1
 8007364:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007368:	429d      	cmp	r5, r3
 800736a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800736e:	f84c 1b04 	str.w	r1, [ip], #4
 8007372:	dcec      	bgt.n	800734e <__multadd+0x12>
 8007374:	b1d7      	cbz	r7, 80073ac <__multadd+0x70>
 8007376:	68a3      	ldr	r3, [r4, #8]
 8007378:	42ab      	cmp	r3, r5
 800737a:	dc12      	bgt.n	80073a2 <__multadd+0x66>
 800737c:	6861      	ldr	r1, [r4, #4]
 800737e:	4630      	mov	r0, r6
 8007380:	3101      	adds	r1, #1
 8007382:	f7ff ff90 	bl	80072a6 <_Balloc>
 8007386:	6922      	ldr	r2, [r4, #16]
 8007388:	3202      	adds	r2, #2
 800738a:	f104 010c 	add.w	r1, r4, #12
 800738e:	4680      	mov	r8, r0
 8007390:	0092      	lsls	r2, r2, #2
 8007392:	300c      	adds	r0, #12
 8007394:	f7ff ff7c 	bl	8007290 <memcpy>
 8007398:	4621      	mov	r1, r4
 800739a:	4630      	mov	r0, r6
 800739c:	f7ff ffb7 	bl	800730e <_Bfree>
 80073a0:	4644      	mov	r4, r8
 80073a2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073a6:	3501      	adds	r5, #1
 80073a8:	615f      	str	r7, [r3, #20]
 80073aa:	6125      	str	r5, [r4, #16]
 80073ac:	4620      	mov	r0, r4
 80073ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073b2 <__s2b>:
 80073b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b6:	460c      	mov	r4, r1
 80073b8:	4615      	mov	r5, r2
 80073ba:	461f      	mov	r7, r3
 80073bc:	2209      	movs	r2, #9
 80073be:	3308      	adds	r3, #8
 80073c0:	4606      	mov	r6, r0
 80073c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80073c6:	2100      	movs	r1, #0
 80073c8:	2201      	movs	r2, #1
 80073ca:	429a      	cmp	r2, r3
 80073cc:	db20      	blt.n	8007410 <__s2b+0x5e>
 80073ce:	4630      	mov	r0, r6
 80073d0:	f7ff ff69 	bl	80072a6 <_Balloc>
 80073d4:	9b08      	ldr	r3, [sp, #32]
 80073d6:	6143      	str	r3, [r0, #20]
 80073d8:	2d09      	cmp	r5, #9
 80073da:	f04f 0301 	mov.w	r3, #1
 80073de:	6103      	str	r3, [r0, #16]
 80073e0:	dd19      	ble.n	8007416 <__s2b+0x64>
 80073e2:	f104 0809 	add.w	r8, r4, #9
 80073e6:	46c1      	mov	r9, r8
 80073e8:	442c      	add	r4, r5
 80073ea:	f819 3b01 	ldrb.w	r3, [r9], #1
 80073ee:	4601      	mov	r1, r0
 80073f0:	3b30      	subs	r3, #48	; 0x30
 80073f2:	220a      	movs	r2, #10
 80073f4:	4630      	mov	r0, r6
 80073f6:	f7ff ffa1 	bl	800733c <__multadd>
 80073fa:	45a1      	cmp	r9, r4
 80073fc:	d1f5      	bne.n	80073ea <__s2b+0x38>
 80073fe:	eb08 0405 	add.w	r4, r8, r5
 8007402:	3c08      	subs	r4, #8
 8007404:	1b2d      	subs	r5, r5, r4
 8007406:	1963      	adds	r3, r4, r5
 8007408:	42bb      	cmp	r3, r7
 800740a:	db07      	blt.n	800741c <__s2b+0x6a>
 800740c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007410:	0052      	lsls	r2, r2, #1
 8007412:	3101      	adds	r1, #1
 8007414:	e7d9      	b.n	80073ca <__s2b+0x18>
 8007416:	340a      	adds	r4, #10
 8007418:	2509      	movs	r5, #9
 800741a:	e7f3      	b.n	8007404 <__s2b+0x52>
 800741c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007420:	4601      	mov	r1, r0
 8007422:	3b30      	subs	r3, #48	; 0x30
 8007424:	220a      	movs	r2, #10
 8007426:	4630      	mov	r0, r6
 8007428:	f7ff ff88 	bl	800733c <__multadd>
 800742c:	e7eb      	b.n	8007406 <__s2b+0x54>

0800742e <__hi0bits>:
 800742e:	0c02      	lsrs	r2, r0, #16
 8007430:	0412      	lsls	r2, r2, #16
 8007432:	4603      	mov	r3, r0
 8007434:	b9b2      	cbnz	r2, 8007464 <__hi0bits+0x36>
 8007436:	0403      	lsls	r3, r0, #16
 8007438:	2010      	movs	r0, #16
 800743a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800743e:	bf04      	itt	eq
 8007440:	021b      	lsleq	r3, r3, #8
 8007442:	3008      	addeq	r0, #8
 8007444:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007448:	bf04      	itt	eq
 800744a:	011b      	lsleq	r3, r3, #4
 800744c:	3004      	addeq	r0, #4
 800744e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007452:	bf04      	itt	eq
 8007454:	009b      	lsleq	r3, r3, #2
 8007456:	3002      	addeq	r0, #2
 8007458:	2b00      	cmp	r3, #0
 800745a:	db06      	blt.n	800746a <__hi0bits+0x3c>
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	d503      	bpl.n	8007468 <__hi0bits+0x3a>
 8007460:	3001      	adds	r0, #1
 8007462:	4770      	bx	lr
 8007464:	2000      	movs	r0, #0
 8007466:	e7e8      	b.n	800743a <__hi0bits+0xc>
 8007468:	2020      	movs	r0, #32
 800746a:	4770      	bx	lr

0800746c <__lo0bits>:
 800746c:	6803      	ldr	r3, [r0, #0]
 800746e:	f013 0207 	ands.w	r2, r3, #7
 8007472:	4601      	mov	r1, r0
 8007474:	d00b      	beq.n	800748e <__lo0bits+0x22>
 8007476:	07da      	lsls	r2, r3, #31
 8007478:	d423      	bmi.n	80074c2 <__lo0bits+0x56>
 800747a:	0798      	lsls	r0, r3, #30
 800747c:	bf49      	itett	mi
 800747e:	085b      	lsrmi	r3, r3, #1
 8007480:	089b      	lsrpl	r3, r3, #2
 8007482:	2001      	movmi	r0, #1
 8007484:	600b      	strmi	r3, [r1, #0]
 8007486:	bf5c      	itt	pl
 8007488:	600b      	strpl	r3, [r1, #0]
 800748a:	2002      	movpl	r0, #2
 800748c:	4770      	bx	lr
 800748e:	b298      	uxth	r0, r3
 8007490:	b9a8      	cbnz	r0, 80074be <__lo0bits+0x52>
 8007492:	0c1b      	lsrs	r3, r3, #16
 8007494:	2010      	movs	r0, #16
 8007496:	f013 0fff 	tst.w	r3, #255	; 0xff
 800749a:	bf04      	itt	eq
 800749c:	0a1b      	lsreq	r3, r3, #8
 800749e:	3008      	addeq	r0, #8
 80074a0:	071a      	lsls	r2, r3, #28
 80074a2:	bf04      	itt	eq
 80074a4:	091b      	lsreq	r3, r3, #4
 80074a6:	3004      	addeq	r0, #4
 80074a8:	079a      	lsls	r2, r3, #30
 80074aa:	bf04      	itt	eq
 80074ac:	089b      	lsreq	r3, r3, #2
 80074ae:	3002      	addeq	r0, #2
 80074b0:	07da      	lsls	r2, r3, #31
 80074b2:	d402      	bmi.n	80074ba <__lo0bits+0x4e>
 80074b4:	085b      	lsrs	r3, r3, #1
 80074b6:	d006      	beq.n	80074c6 <__lo0bits+0x5a>
 80074b8:	3001      	adds	r0, #1
 80074ba:	600b      	str	r3, [r1, #0]
 80074bc:	4770      	bx	lr
 80074be:	4610      	mov	r0, r2
 80074c0:	e7e9      	b.n	8007496 <__lo0bits+0x2a>
 80074c2:	2000      	movs	r0, #0
 80074c4:	4770      	bx	lr
 80074c6:	2020      	movs	r0, #32
 80074c8:	4770      	bx	lr

080074ca <__i2b>:
 80074ca:	b510      	push	{r4, lr}
 80074cc:	460c      	mov	r4, r1
 80074ce:	2101      	movs	r1, #1
 80074d0:	f7ff fee9 	bl	80072a6 <_Balloc>
 80074d4:	2201      	movs	r2, #1
 80074d6:	6144      	str	r4, [r0, #20]
 80074d8:	6102      	str	r2, [r0, #16]
 80074da:	bd10      	pop	{r4, pc}

080074dc <__multiply>:
 80074dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e0:	4614      	mov	r4, r2
 80074e2:	690a      	ldr	r2, [r1, #16]
 80074e4:	6923      	ldr	r3, [r4, #16]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	bfb8      	it	lt
 80074ea:	460b      	movlt	r3, r1
 80074ec:	4688      	mov	r8, r1
 80074ee:	bfbc      	itt	lt
 80074f0:	46a0      	movlt	r8, r4
 80074f2:	461c      	movlt	r4, r3
 80074f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80074f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80074fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007500:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007504:	eb07 0609 	add.w	r6, r7, r9
 8007508:	42b3      	cmp	r3, r6
 800750a:	bfb8      	it	lt
 800750c:	3101      	addlt	r1, #1
 800750e:	f7ff feca 	bl	80072a6 <_Balloc>
 8007512:	f100 0514 	add.w	r5, r0, #20
 8007516:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800751a:	462b      	mov	r3, r5
 800751c:	2200      	movs	r2, #0
 800751e:	4573      	cmp	r3, lr
 8007520:	d316      	bcc.n	8007550 <__multiply+0x74>
 8007522:	f104 0214 	add.w	r2, r4, #20
 8007526:	f108 0114 	add.w	r1, r8, #20
 800752a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800752e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	9b00      	ldr	r3, [sp, #0]
 8007536:	9201      	str	r2, [sp, #4]
 8007538:	4293      	cmp	r3, r2
 800753a:	d80c      	bhi.n	8007556 <__multiply+0x7a>
 800753c:	2e00      	cmp	r6, #0
 800753e:	dd03      	ble.n	8007548 <__multiply+0x6c>
 8007540:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007544:	2b00      	cmp	r3, #0
 8007546:	d05d      	beq.n	8007604 <__multiply+0x128>
 8007548:	6106      	str	r6, [r0, #16]
 800754a:	b003      	add	sp, #12
 800754c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007550:	f843 2b04 	str.w	r2, [r3], #4
 8007554:	e7e3      	b.n	800751e <__multiply+0x42>
 8007556:	f8b2 b000 	ldrh.w	fp, [r2]
 800755a:	f1bb 0f00 	cmp.w	fp, #0
 800755e:	d023      	beq.n	80075a8 <__multiply+0xcc>
 8007560:	4689      	mov	r9, r1
 8007562:	46ac      	mov	ip, r5
 8007564:	f04f 0800 	mov.w	r8, #0
 8007568:	f859 4b04 	ldr.w	r4, [r9], #4
 800756c:	f8dc a000 	ldr.w	sl, [ip]
 8007570:	b2a3      	uxth	r3, r4
 8007572:	fa1f fa8a 	uxth.w	sl, sl
 8007576:	fb0b a303 	mla	r3, fp, r3, sl
 800757a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800757e:	f8dc 4000 	ldr.w	r4, [ip]
 8007582:	4443      	add	r3, r8
 8007584:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007588:	fb0b 840a 	mla	r4, fp, sl, r8
 800758c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007590:	46e2      	mov	sl, ip
 8007592:	b29b      	uxth	r3, r3
 8007594:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007598:	454f      	cmp	r7, r9
 800759a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800759e:	f84a 3b04 	str.w	r3, [sl], #4
 80075a2:	d82b      	bhi.n	80075fc <__multiply+0x120>
 80075a4:	f8cc 8004 	str.w	r8, [ip, #4]
 80075a8:	9b01      	ldr	r3, [sp, #4]
 80075aa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80075ae:	3204      	adds	r2, #4
 80075b0:	f1ba 0f00 	cmp.w	sl, #0
 80075b4:	d020      	beq.n	80075f8 <__multiply+0x11c>
 80075b6:	682b      	ldr	r3, [r5, #0]
 80075b8:	4689      	mov	r9, r1
 80075ba:	46a8      	mov	r8, r5
 80075bc:	f04f 0b00 	mov.w	fp, #0
 80075c0:	f8b9 c000 	ldrh.w	ip, [r9]
 80075c4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80075c8:	fb0a 440c 	mla	r4, sl, ip, r4
 80075cc:	445c      	add	r4, fp
 80075ce:	46c4      	mov	ip, r8
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80075d6:	f84c 3b04 	str.w	r3, [ip], #4
 80075da:	f859 3b04 	ldr.w	r3, [r9], #4
 80075de:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80075e2:	0c1b      	lsrs	r3, r3, #16
 80075e4:	fb0a b303 	mla	r3, sl, r3, fp
 80075e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80075ec:	454f      	cmp	r7, r9
 80075ee:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80075f2:	d805      	bhi.n	8007600 <__multiply+0x124>
 80075f4:	f8c8 3004 	str.w	r3, [r8, #4]
 80075f8:	3504      	adds	r5, #4
 80075fa:	e79b      	b.n	8007534 <__multiply+0x58>
 80075fc:	46d4      	mov	ip, sl
 80075fe:	e7b3      	b.n	8007568 <__multiply+0x8c>
 8007600:	46e0      	mov	r8, ip
 8007602:	e7dd      	b.n	80075c0 <__multiply+0xe4>
 8007604:	3e01      	subs	r6, #1
 8007606:	e799      	b.n	800753c <__multiply+0x60>

08007608 <__pow5mult>:
 8007608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800760c:	4615      	mov	r5, r2
 800760e:	f012 0203 	ands.w	r2, r2, #3
 8007612:	4606      	mov	r6, r0
 8007614:	460f      	mov	r7, r1
 8007616:	d007      	beq.n	8007628 <__pow5mult+0x20>
 8007618:	3a01      	subs	r2, #1
 800761a:	4c21      	ldr	r4, [pc, #132]	; (80076a0 <__pow5mult+0x98>)
 800761c:	2300      	movs	r3, #0
 800761e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007622:	f7ff fe8b 	bl	800733c <__multadd>
 8007626:	4607      	mov	r7, r0
 8007628:	10ad      	asrs	r5, r5, #2
 800762a:	d035      	beq.n	8007698 <__pow5mult+0x90>
 800762c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800762e:	b93c      	cbnz	r4, 8007640 <__pow5mult+0x38>
 8007630:	2010      	movs	r0, #16
 8007632:	f7ff fe13 	bl	800725c <malloc>
 8007636:	6270      	str	r0, [r6, #36]	; 0x24
 8007638:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800763c:	6004      	str	r4, [r0, #0]
 800763e:	60c4      	str	r4, [r0, #12]
 8007640:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007644:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007648:	b94c      	cbnz	r4, 800765e <__pow5mult+0x56>
 800764a:	f240 2171 	movw	r1, #625	; 0x271
 800764e:	4630      	mov	r0, r6
 8007650:	f7ff ff3b 	bl	80074ca <__i2b>
 8007654:	2300      	movs	r3, #0
 8007656:	f8c8 0008 	str.w	r0, [r8, #8]
 800765a:	4604      	mov	r4, r0
 800765c:	6003      	str	r3, [r0, #0]
 800765e:	f04f 0800 	mov.w	r8, #0
 8007662:	07eb      	lsls	r3, r5, #31
 8007664:	d50a      	bpl.n	800767c <__pow5mult+0x74>
 8007666:	4639      	mov	r1, r7
 8007668:	4622      	mov	r2, r4
 800766a:	4630      	mov	r0, r6
 800766c:	f7ff ff36 	bl	80074dc <__multiply>
 8007670:	4639      	mov	r1, r7
 8007672:	4681      	mov	r9, r0
 8007674:	4630      	mov	r0, r6
 8007676:	f7ff fe4a 	bl	800730e <_Bfree>
 800767a:	464f      	mov	r7, r9
 800767c:	106d      	asrs	r5, r5, #1
 800767e:	d00b      	beq.n	8007698 <__pow5mult+0x90>
 8007680:	6820      	ldr	r0, [r4, #0]
 8007682:	b938      	cbnz	r0, 8007694 <__pow5mult+0x8c>
 8007684:	4622      	mov	r2, r4
 8007686:	4621      	mov	r1, r4
 8007688:	4630      	mov	r0, r6
 800768a:	f7ff ff27 	bl	80074dc <__multiply>
 800768e:	6020      	str	r0, [r4, #0]
 8007690:	f8c0 8000 	str.w	r8, [r0]
 8007694:	4604      	mov	r4, r0
 8007696:	e7e4      	b.n	8007662 <__pow5mult+0x5a>
 8007698:	4638      	mov	r0, r7
 800769a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800769e:	bf00      	nop
 80076a0:	080082e0 	.word	0x080082e0

080076a4 <__lshift>:
 80076a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a8:	460c      	mov	r4, r1
 80076aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076ae:	6923      	ldr	r3, [r4, #16]
 80076b0:	6849      	ldr	r1, [r1, #4]
 80076b2:	eb0a 0903 	add.w	r9, sl, r3
 80076b6:	68a3      	ldr	r3, [r4, #8]
 80076b8:	4607      	mov	r7, r0
 80076ba:	4616      	mov	r6, r2
 80076bc:	f109 0501 	add.w	r5, r9, #1
 80076c0:	42ab      	cmp	r3, r5
 80076c2:	db32      	blt.n	800772a <__lshift+0x86>
 80076c4:	4638      	mov	r0, r7
 80076c6:	f7ff fdee 	bl	80072a6 <_Balloc>
 80076ca:	2300      	movs	r3, #0
 80076cc:	4680      	mov	r8, r0
 80076ce:	f100 0114 	add.w	r1, r0, #20
 80076d2:	461a      	mov	r2, r3
 80076d4:	4553      	cmp	r3, sl
 80076d6:	db2b      	blt.n	8007730 <__lshift+0x8c>
 80076d8:	6920      	ldr	r0, [r4, #16]
 80076da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076de:	f104 0314 	add.w	r3, r4, #20
 80076e2:	f016 021f 	ands.w	r2, r6, #31
 80076e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80076ee:	d025      	beq.n	800773c <__lshift+0x98>
 80076f0:	f1c2 0e20 	rsb	lr, r2, #32
 80076f4:	2000      	movs	r0, #0
 80076f6:	681e      	ldr	r6, [r3, #0]
 80076f8:	468a      	mov	sl, r1
 80076fa:	4096      	lsls	r6, r2
 80076fc:	4330      	orrs	r0, r6
 80076fe:	f84a 0b04 	str.w	r0, [sl], #4
 8007702:	f853 0b04 	ldr.w	r0, [r3], #4
 8007706:	459c      	cmp	ip, r3
 8007708:	fa20 f00e 	lsr.w	r0, r0, lr
 800770c:	d814      	bhi.n	8007738 <__lshift+0x94>
 800770e:	6048      	str	r0, [r1, #4]
 8007710:	b108      	cbz	r0, 8007716 <__lshift+0x72>
 8007712:	f109 0502 	add.w	r5, r9, #2
 8007716:	3d01      	subs	r5, #1
 8007718:	4638      	mov	r0, r7
 800771a:	f8c8 5010 	str.w	r5, [r8, #16]
 800771e:	4621      	mov	r1, r4
 8007720:	f7ff fdf5 	bl	800730e <_Bfree>
 8007724:	4640      	mov	r0, r8
 8007726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772a:	3101      	adds	r1, #1
 800772c:	005b      	lsls	r3, r3, #1
 800772e:	e7c7      	b.n	80076c0 <__lshift+0x1c>
 8007730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007734:	3301      	adds	r3, #1
 8007736:	e7cd      	b.n	80076d4 <__lshift+0x30>
 8007738:	4651      	mov	r1, sl
 800773a:	e7dc      	b.n	80076f6 <__lshift+0x52>
 800773c:	3904      	subs	r1, #4
 800773e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007742:	f841 2f04 	str.w	r2, [r1, #4]!
 8007746:	459c      	cmp	ip, r3
 8007748:	d8f9      	bhi.n	800773e <__lshift+0x9a>
 800774a:	e7e4      	b.n	8007716 <__lshift+0x72>

0800774c <__mcmp>:
 800774c:	6903      	ldr	r3, [r0, #16]
 800774e:	690a      	ldr	r2, [r1, #16]
 8007750:	1a9b      	subs	r3, r3, r2
 8007752:	b530      	push	{r4, r5, lr}
 8007754:	d10c      	bne.n	8007770 <__mcmp+0x24>
 8007756:	0092      	lsls	r2, r2, #2
 8007758:	3014      	adds	r0, #20
 800775a:	3114      	adds	r1, #20
 800775c:	1884      	adds	r4, r0, r2
 800775e:	4411      	add	r1, r2
 8007760:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007764:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007768:	4295      	cmp	r5, r2
 800776a:	d003      	beq.n	8007774 <__mcmp+0x28>
 800776c:	d305      	bcc.n	800777a <__mcmp+0x2e>
 800776e:	2301      	movs	r3, #1
 8007770:	4618      	mov	r0, r3
 8007772:	bd30      	pop	{r4, r5, pc}
 8007774:	42a0      	cmp	r0, r4
 8007776:	d3f3      	bcc.n	8007760 <__mcmp+0x14>
 8007778:	e7fa      	b.n	8007770 <__mcmp+0x24>
 800777a:	f04f 33ff 	mov.w	r3, #4294967295
 800777e:	e7f7      	b.n	8007770 <__mcmp+0x24>

08007780 <__mdiff>:
 8007780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007784:	460d      	mov	r5, r1
 8007786:	4607      	mov	r7, r0
 8007788:	4611      	mov	r1, r2
 800778a:	4628      	mov	r0, r5
 800778c:	4614      	mov	r4, r2
 800778e:	f7ff ffdd 	bl	800774c <__mcmp>
 8007792:	1e06      	subs	r6, r0, #0
 8007794:	d108      	bne.n	80077a8 <__mdiff+0x28>
 8007796:	4631      	mov	r1, r6
 8007798:	4638      	mov	r0, r7
 800779a:	f7ff fd84 	bl	80072a6 <_Balloc>
 800779e:	2301      	movs	r3, #1
 80077a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80077a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a8:	bfa4      	itt	ge
 80077aa:	4623      	movge	r3, r4
 80077ac:	462c      	movge	r4, r5
 80077ae:	4638      	mov	r0, r7
 80077b0:	6861      	ldr	r1, [r4, #4]
 80077b2:	bfa6      	itte	ge
 80077b4:	461d      	movge	r5, r3
 80077b6:	2600      	movge	r6, #0
 80077b8:	2601      	movlt	r6, #1
 80077ba:	f7ff fd74 	bl	80072a6 <_Balloc>
 80077be:	692b      	ldr	r3, [r5, #16]
 80077c0:	60c6      	str	r6, [r0, #12]
 80077c2:	6926      	ldr	r6, [r4, #16]
 80077c4:	f105 0914 	add.w	r9, r5, #20
 80077c8:	f104 0214 	add.w	r2, r4, #20
 80077cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80077d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80077d4:	f100 0514 	add.w	r5, r0, #20
 80077d8:	f04f 0e00 	mov.w	lr, #0
 80077dc:	f852 ab04 	ldr.w	sl, [r2], #4
 80077e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80077e4:	fa1e f18a 	uxtah	r1, lr, sl
 80077e8:	b2a3      	uxth	r3, r4
 80077ea:	1ac9      	subs	r1, r1, r3
 80077ec:	0c23      	lsrs	r3, r4, #16
 80077ee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80077f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80077f6:	b289      	uxth	r1, r1
 80077f8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80077fc:	45c8      	cmp	r8, r9
 80077fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007802:	4694      	mov	ip, r2
 8007804:	f845 3b04 	str.w	r3, [r5], #4
 8007808:	d8e8      	bhi.n	80077dc <__mdiff+0x5c>
 800780a:	45bc      	cmp	ip, r7
 800780c:	d304      	bcc.n	8007818 <__mdiff+0x98>
 800780e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007812:	b183      	cbz	r3, 8007836 <__mdiff+0xb6>
 8007814:	6106      	str	r6, [r0, #16]
 8007816:	e7c5      	b.n	80077a4 <__mdiff+0x24>
 8007818:	f85c 1b04 	ldr.w	r1, [ip], #4
 800781c:	fa1e f381 	uxtah	r3, lr, r1
 8007820:	141a      	asrs	r2, r3, #16
 8007822:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007826:	b29b      	uxth	r3, r3
 8007828:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800782c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007830:	f845 3b04 	str.w	r3, [r5], #4
 8007834:	e7e9      	b.n	800780a <__mdiff+0x8a>
 8007836:	3e01      	subs	r6, #1
 8007838:	e7e9      	b.n	800780e <__mdiff+0x8e>
	...

0800783c <__ulp>:
 800783c:	4b12      	ldr	r3, [pc, #72]	; (8007888 <__ulp+0x4c>)
 800783e:	ee10 2a90 	vmov	r2, s1
 8007842:	401a      	ands	r2, r3
 8007844:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007848:	2b00      	cmp	r3, #0
 800784a:	dd04      	ble.n	8007856 <__ulp+0x1a>
 800784c:	2000      	movs	r0, #0
 800784e:	4619      	mov	r1, r3
 8007850:	ec41 0b10 	vmov	d0, r0, r1
 8007854:	4770      	bx	lr
 8007856:	425b      	negs	r3, r3
 8007858:	151b      	asrs	r3, r3, #20
 800785a:	2b13      	cmp	r3, #19
 800785c:	f04f 0000 	mov.w	r0, #0
 8007860:	f04f 0100 	mov.w	r1, #0
 8007864:	dc04      	bgt.n	8007870 <__ulp+0x34>
 8007866:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800786a:	fa42 f103 	asr.w	r1, r2, r3
 800786e:	e7ef      	b.n	8007850 <__ulp+0x14>
 8007870:	3b14      	subs	r3, #20
 8007872:	2b1e      	cmp	r3, #30
 8007874:	f04f 0201 	mov.w	r2, #1
 8007878:	bfda      	itte	le
 800787a:	f1c3 031f 	rsble	r3, r3, #31
 800787e:	fa02 f303 	lslle.w	r3, r2, r3
 8007882:	4613      	movgt	r3, r2
 8007884:	4618      	mov	r0, r3
 8007886:	e7e3      	b.n	8007850 <__ulp+0x14>
 8007888:	7ff00000 	.word	0x7ff00000

0800788c <__b2d>:
 800788c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788e:	6905      	ldr	r5, [r0, #16]
 8007890:	f100 0714 	add.w	r7, r0, #20
 8007894:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007898:	1f2e      	subs	r6, r5, #4
 800789a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800789e:	4620      	mov	r0, r4
 80078a0:	f7ff fdc5 	bl	800742e <__hi0bits>
 80078a4:	f1c0 0320 	rsb	r3, r0, #32
 80078a8:	280a      	cmp	r0, #10
 80078aa:	600b      	str	r3, [r1, #0]
 80078ac:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007924 <__b2d+0x98>
 80078b0:	dc14      	bgt.n	80078dc <__b2d+0x50>
 80078b2:	f1c0 0e0b 	rsb	lr, r0, #11
 80078b6:	fa24 f10e 	lsr.w	r1, r4, lr
 80078ba:	42b7      	cmp	r7, r6
 80078bc:	ea41 030c 	orr.w	r3, r1, ip
 80078c0:	bf34      	ite	cc
 80078c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80078c6:	2100      	movcs	r1, #0
 80078c8:	3015      	adds	r0, #21
 80078ca:	fa04 f000 	lsl.w	r0, r4, r0
 80078ce:	fa21 f10e 	lsr.w	r1, r1, lr
 80078d2:	ea40 0201 	orr.w	r2, r0, r1
 80078d6:	ec43 2b10 	vmov	d0, r2, r3
 80078da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078dc:	42b7      	cmp	r7, r6
 80078de:	bf3a      	itte	cc
 80078e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80078e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80078e8:	2100      	movcs	r1, #0
 80078ea:	380b      	subs	r0, #11
 80078ec:	d015      	beq.n	800791a <__b2d+0x8e>
 80078ee:	4084      	lsls	r4, r0
 80078f0:	f1c0 0520 	rsb	r5, r0, #32
 80078f4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80078f8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80078fc:	42be      	cmp	r6, r7
 80078fe:	fa21 fc05 	lsr.w	ip, r1, r5
 8007902:	ea44 030c 	orr.w	r3, r4, ip
 8007906:	bf8c      	ite	hi
 8007908:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800790c:	2400      	movls	r4, #0
 800790e:	fa01 f000 	lsl.w	r0, r1, r0
 8007912:	40ec      	lsrs	r4, r5
 8007914:	ea40 0204 	orr.w	r2, r0, r4
 8007918:	e7dd      	b.n	80078d6 <__b2d+0x4a>
 800791a:	ea44 030c 	orr.w	r3, r4, ip
 800791e:	460a      	mov	r2, r1
 8007920:	e7d9      	b.n	80078d6 <__b2d+0x4a>
 8007922:	bf00      	nop
 8007924:	3ff00000 	.word	0x3ff00000

08007928 <__d2b>:
 8007928:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800792c:	460e      	mov	r6, r1
 800792e:	2101      	movs	r1, #1
 8007930:	ec59 8b10 	vmov	r8, r9, d0
 8007934:	4615      	mov	r5, r2
 8007936:	f7ff fcb6 	bl	80072a6 <_Balloc>
 800793a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800793e:	4607      	mov	r7, r0
 8007940:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007944:	bb34      	cbnz	r4, 8007994 <__d2b+0x6c>
 8007946:	9301      	str	r3, [sp, #4]
 8007948:	f1b8 0300 	subs.w	r3, r8, #0
 800794c:	d027      	beq.n	800799e <__d2b+0x76>
 800794e:	a802      	add	r0, sp, #8
 8007950:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007954:	f7ff fd8a 	bl	800746c <__lo0bits>
 8007958:	9900      	ldr	r1, [sp, #0]
 800795a:	b1f0      	cbz	r0, 800799a <__d2b+0x72>
 800795c:	9a01      	ldr	r2, [sp, #4]
 800795e:	f1c0 0320 	rsb	r3, r0, #32
 8007962:	fa02 f303 	lsl.w	r3, r2, r3
 8007966:	430b      	orrs	r3, r1
 8007968:	40c2      	lsrs	r2, r0
 800796a:	617b      	str	r3, [r7, #20]
 800796c:	9201      	str	r2, [sp, #4]
 800796e:	9b01      	ldr	r3, [sp, #4]
 8007970:	61bb      	str	r3, [r7, #24]
 8007972:	2b00      	cmp	r3, #0
 8007974:	bf14      	ite	ne
 8007976:	2102      	movne	r1, #2
 8007978:	2101      	moveq	r1, #1
 800797a:	6139      	str	r1, [r7, #16]
 800797c:	b1c4      	cbz	r4, 80079b0 <__d2b+0x88>
 800797e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007982:	4404      	add	r4, r0
 8007984:	6034      	str	r4, [r6, #0]
 8007986:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800798a:	6028      	str	r0, [r5, #0]
 800798c:	4638      	mov	r0, r7
 800798e:	b003      	add	sp, #12
 8007990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007998:	e7d5      	b.n	8007946 <__d2b+0x1e>
 800799a:	6179      	str	r1, [r7, #20]
 800799c:	e7e7      	b.n	800796e <__d2b+0x46>
 800799e:	a801      	add	r0, sp, #4
 80079a0:	f7ff fd64 	bl	800746c <__lo0bits>
 80079a4:	9b01      	ldr	r3, [sp, #4]
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	2101      	movs	r1, #1
 80079aa:	6139      	str	r1, [r7, #16]
 80079ac:	3020      	adds	r0, #32
 80079ae:	e7e5      	b.n	800797c <__d2b+0x54>
 80079b0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80079b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079b8:	6030      	str	r0, [r6, #0]
 80079ba:	6918      	ldr	r0, [r3, #16]
 80079bc:	f7ff fd37 	bl	800742e <__hi0bits>
 80079c0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80079c4:	e7e1      	b.n	800798a <__d2b+0x62>

080079c6 <__ratio>:
 80079c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ca:	4688      	mov	r8, r1
 80079cc:	4669      	mov	r1, sp
 80079ce:	4681      	mov	r9, r0
 80079d0:	f7ff ff5c 	bl	800788c <__b2d>
 80079d4:	a901      	add	r1, sp, #4
 80079d6:	4640      	mov	r0, r8
 80079d8:	ec57 6b10 	vmov	r6, r7, d0
 80079dc:	f7ff ff56 	bl	800788c <__b2d>
 80079e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079e4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80079e8:	eba3 0c02 	sub.w	ip, r3, r2
 80079ec:	e9dd 3200 	ldrd	r3, r2, [sp]
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80079f6:	ec5b ab10 	vmov	sl, fp, d0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	bfce      	itee	gt
 80079fe:	463a      	movgt	r2, r7
 8007a00:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007a04:	465a      	movle	r2, fp
 8007a06:	4659      	mov	r1, fp
 8007a08:	463d      	mov	r5, r7
 8007a0a:	bfd4      	ite	le
 8007a0c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007a10:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8007a14:	4630      	mov	r0, r6
 8007a16:	ee10 2a10 	vmov	r2, s0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	f7f8 ff25 	bl	800086c <__aeabi_ddiv>
 8007a22:	ec41 0b10 	vmov	d0, r0, r1
 8007a26:	b003      	add	sp, #12
 8007a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a2c <__copybits>:
 8007a2c:	3901      	subs	r1, #1
 8007a2e:	b510      	push	{r4, lr}
 8007a30:	1149      	asrs	r1, r1, #5
 8007a32:	6914      	ldr	r4, [r2, #16]
 8007a34:	3101      	adds	r1, #1
 8007a36:	f102 0314 	add.w	r3, r2, #20
 8007a3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007a3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007a42:	42a3      	cmp	r3, r4
 8007a44:	4602      	mov	r2, r0
 8007a46:	d303      	bcc.n	8007a50 <__copybits+0x24>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	428a      	cmp	r2, r1
 8007a4c:	d305      	bcc.n	8007a5a <__copybits+0x2e>
 8007a4e:	bd10      	pop	{r4, pc}
 8007a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a54:	f840 2b04 	str.w	r2, [r0], #4
 8007a58:	e7f3      	b.n	8007a42 <__copybits+0x16>
 8007a5a:	f842 3b04 	str.w	r3, [r2], #4
 8007a5e:	e7f4      	b.n	8007a4a <__copybits+0x1e>

08007a60 <__any_on>:
 8007a60:	f100 0214 	add.w	r2, r0, #20
 8007a64:	6900      	ldr	r0, [r0, #16]
 8007a66:	114b      	asrs	r3, r1, #5
 8007a68:	4298      	cmp	r0, r3
 8007a6a:	b510      	push	{r4, lr}
 8007a6c:	db11      	blt.n	8007a92 <__any_on+0x32>
 8007a6e:	dd0a      	ble.n	8007a86 <__any_on+0x26>
 8007a70:	f011 011f 	ands.w	r1, r1, #31
 8007a74:	d007      	beq.n	8007a86 <__any_on+0x26>
 8007a76:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007a7a:	fa24 f001 	lsr.w	r0, r4, r1
 8007a7e:	fa00 f101 	lsl.w	r1, r0, r1
 8007a82:	428c      	cmp	r4, r1
 8007a84:	d10b      	bne.n	8007a9e <__any_on+0x3e>
 8007a86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d803      	bhi.n	8007a96 <__any_on+0x36>
 8007a8e:	2000      	movs	r0, #0
 8007a90:	bd10      	pop	{r4, pc}
 8007a92:	4603      	mov	r3, r0
 8007a94:	e7f7      	b.n	8007a86 <__any_on+0x26>
 8007a96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a9a:	2900      	cmp	r1, #0
 8007a9c:	d0f5      	beq.n	8007a8a <__any_on+0x2a>
 8007a9e:	2001      	movs	r0, #1
 8007aa0:	e7f6      	b.n	8007a90 <__any_on+0x30>

08007aa2 <_calloc_r>:
 8007aa2:	b538      	push	{r3, r4, r5, lr}
 8007aa4:	fb02 f401 	mul.w	r4, r2, r1
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	f000 f857 	bl	8007b5c <_malloc_r>
 8007aae:	4605      	mov	r5, r0
 8007ab0:	b118      	cbz	r0, 8007aba <_calloc_r+0x18>
 8007ab2:	4622      	mov	r2, r4
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	f7fc fcb3 	bl	8004420 <memset>
 8007aba:	4628      	mov	r0, r5
 8007abc:	bd38      	pop	{r3, r4, r5, pc}
	...

08007ac0 <_free_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	2900      	cmp	r1, #0
 8007ac6:	d045      	beq.n	8007b54 <_free_r+0x94>
 8007ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007acc:	1f0c      	subs	r4, r1, #4
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	bfb8      	it	lt
 8007ad2:	18e4      	addlt	r4, r4, r3
 8007ad4:	f000 fa36 	bl	8007f44 <__malloc_lock>
 8007ad8:	4a1f      	ldr	r2, [pc, #124]	; (8007b58 <_free_r+0x98>)
 8007ada:	6813      	ldr	r3, [r2, #0]
 8007adc:	4610      	mov	r0, r2
 8007ade:	b933      	cbnz	r3, 8007aee <_free_r+0x2e>
 8007ae0:	6063      	str	r3, [r4, #4]
 8007ae2:	6014      	str	r4, [r2, #0]
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007aea:	f000 ba2c 	b.w	8007f46 <__malloc_unlock>
 8007aee:	42a3      	cmp	r3, r4
 8007af0:	d90c      	bls.n	8007b0c <_free_r+0x4c>
 8007af2:	6821      	ldr	r1, [r4, #0]
 8007af4:	1862      	adds	r2, r4, r1
 8007af6:	4293      	cmp	r3, r2
 8007af8:	bf04      	itt	eq
 8007afa:	681a      	ldreq	r2, [r3, #0]
 8007afc:	685b      	ldreq	r3, [r3, #4]
 8007afe:	6063      	str	r3, [r4, #4]
 8007b00:	bf04      	itt	eq
 8007b02:	1852      	addeq	r2, r2, r1
 8007b04:	6022      	streq	r2, [r4, #0]
 8007b06:	6004      	str	r4, [r0, #0]
 8007b08:	e7ec      	b.n	8007ae4 <_free_r+0x24>
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	b10a      	cbz	r2, 8007b14 <_free_r+0x54>
 8007b10:	42a2      	cmp	r2, r4
 8007b12:	d9fa      	bls.n	8007b0a <_free_r+0x4a>
 8007b14:	6819      	ldr	r1, [r3, #0]
 8007b16:	1858      	adds	r0, r3, r1
 8007b18:	42a0      	cmp	r0, r4
 8007b1a:	d10b      	bne.n	8007b34 <_free_r+0x74>
 8007b1c:	6820      	ldr	r0, [r4, #0]
 8007b1e:	4401      	add	r1, r0
 8007b20:	1858      	adds	r0, r3, r1
 8007b22:	4282      	cmp	r2, r0
 8007b24:	6019      	str	r1, [r3, #0]
 8007b26:	d1dd      	bne.n	8007ae4 <_free_r+0x24>
 8007b28:	6810      	ldr	r0, [r2, #0]
 8007b2a:	6852      	ldr	r2, [r2, #4]
 8007b2c:	605a      	str	r2, [r3, #4]
 8007b2e:	4401      	add	r1, r0
 8007b30:	6019      	str	r1, [r3, #0]
 8007b32:	e7d7      	b.n	8007ae4 <_free_r+0x24>
 8007b34:	d902      	bls.n	8007b3c <_free_r+0x7c>
 8007b36:	230c      	movs	r3, #12
 8007b38:	602b      	str	r3, [r5, #0]
 8007b3a:	e7d3      	b.n	8007ae4 <_free_r+0x24>
 8007b3c:	6820      	ldr	r0, [r4, #0]
 8007b3e:	1821      	adds	r1, r4, r0
 8007b40:	428a      	cmp	r2, r1
 8007b42:	bf04      	itt	eq
 8007b44:	6811      	ldreq	r1, [r2, #0]
 8007b46:	6852      	ldreq	r2, [r2, #4]
 8007b48:	6062      	str	r2, [r4, #4]
 8007b4a:	bf04      	itt	eq
 8007b4c:	1809      	addeq	r1, r1, r0
 8007b4e:	6021      	streq	r1, [r4, #0]
 8007b50:	605c      	str	r4, [r3, #4]
 8007b52:	e7c7      	b.n	8007ae4 <_free_r+0x24>
 8007b54:	bd38      	pop	{r3, r4, r5, pc}
 8007b56:	bf00      	nop
 8007b58:	2000021c 	.word	0x2000021c

08007b5c <_malloc_r>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	1ccd      	adds	r5, r1, #3
 8007b60:	f025 0503 	bic.w	r5, r5, #3
 8007b64:	3508      	adds	r5, #8
 8007b66:	2d0c      	cmp	r5, #12
 8007b68:	bf38      	it	cc
 8007b6a:	250c      	movcc	r5, #12
 8007b6c:	2d00      	cmp	r5, #0
 8007b6e:	4606      	mov	r6, r0
 8007b70:	db01      	blt.n	8007b76 <_malloc_r+0x1a>
 8007b72:	42a9      	cmp	r1, r5
 8007b74:	d903      	bls.n	8007b7e <_malloc_r+0x22>
 8007b76:	230c      	movs	r3, #12
 8007b78:	6033      	str	r3, [r6, #0]
 8007b7a:	2000      	movs	r0, #0
 8007b7c:	bd70      	pop	{r4, r5, r6, pc}
 8007b7e:	f000 f9e1 	bl	8007f44 <__malloc_lock>
 8007b82:	4a21      	ldr	r2, [pc, #132]	; (8007c08 <_malloc_r+0xac>)
 8007b84:	6814      	ldr	r4, [r2, #0]
 8007b86:	4621      	mov	r1, r4
 8007b88:	b991      	cbnz	r1, 8007bb0 <_malloc_r+0x54>
 8007b8a:	4c20      	ldr	r4, [pc, #128]	; (8007c0c <_malloc_r+0xb0>)
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	b91b      	cbnz	r3, 8007b98 <_malloc_r+0x3c>
 8007b90:	4630      	mov	r0, r6
 8007b92:	f000 f98f 	bl	8007eb4 <_sbrk_r>
 8007b96:	6020      	str	r0, [r4, #0]
 8007b98:	4629      	mov	r1, r5
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f000 f98a 	bl	8007eb4 <_sbrk_r>
 8007ba0:	1c43      	adds	r3, r0, #1
 8007ba2:	d124      	bne.n	8007bee <_malloc_r+0x92>
 8007ba4:	230c      	movs	r3, #12
 8007ba6:	6033      	str	r3, [r6, #0]
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f000 f9cc 	bl	8007f46 <__malloc_unlock>
 8007bae:	e7e4      	b.n	8007b7a <_malloc_r+0x1e>
 8007bb0:	680b      	ldr	r3, [r1, #0]
 8007bb2:	1b5b      	subs	r3, r3, r5
 8007bb4:	d418      	bmi.n	8007be8 <_malloc_r+0x8c>
 8007bb6:	2b0b      	cmp	r3, #11
 8007bb8:	d90f      	bls.n	8007bda <_malloc_r+0x7e>
 8007bba:	600b      	str	r3, [r1, #0]
 8007bbc:	50cd      	str	r5, [r1, r3]
 8007bbe:	18cc      	adds	r4, r1, r3
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f000 f9c0 	bl	8007f46 <__malloc_unlock>
 8007bc6:	f104 000b 	add.w	r0, r4, #11
 8007bca:	1d23      	adds	r3, r4, #4
 8007bcc:	f020 0007 	bic.w	r0, r0, #7
 8007bd0:	1ac3      	subs	r3, r0, r3
 8007bd2:	d0d3      	beq.n	8007b7c <_malloc_r+0x20>
 8007bd4:	425a      	negs	r2, r3
 8007bd6:	50e2      	str	r2, [r4, r3]
 8007bd8:	e7d0      	b.n	8007b7c <_malloc_r+0x20>
 8007bda:	428c      	cmp	r4, r1
 8007bdc:	684b      	ldr	r3, [r1, #4]
 8007bde:	bf16      	itet	ne
 8007be0:	6063      	strne	r3, [r4, #4]
 8007be2:	6013      	streq	r3, [r2, #0]
 8007be4:	460c      	movne	r4, r1
 8007be6:	e7eb      	b.n	8007bc0 <_malloc_r+0x64>
 8007be8:	460c      	mov	r4, r1
 8007bea:	6849      	ldr	r1, [r1, #4]
 8007bec:	e7cc      	b.n	8007b88 <_malloc_r+0x2c>
 8007bee:	1cc4      	adds	r4, r0, #3
 8007bf0:	f024 0403 	bic.w	r4, r4, #3
 8007bf4:	42a0      	cmp	r0, r4
 8007bf6:	d005      	beq.n	8007c04 <_malloc_r+0xa8>
 8007bf8:	1a21      	subs	r1, r4, r0
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f000 f95a 	bl	8007eb4 <_sbrk_r>
 8007c00:	3001      	adds	r0, #1
 8007c02:	d0cf      	beq.n	8007ba4 <_malloc_r+0x48>
 8007c04:	6025      	str	r5, [r4, #0]
 8007c06:	e7db      	b.n	8007bc0 <_malloc_r+0x64>
 8007c08:	2000021c 	.word	0x2000021c
 8007c0c:	20000220 	.word	0x20000220

08007c10 <__ssputs_r>:
 8007c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c14:	688e      	ldr	r6, [r1, #8]
 8007c16:	429e      	cmp	r6, r3
 8007c18:	4682      	mov	sl, r0
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	4690      	mov	r8, r2
 8007c1e:	4699      	mov	r9, r3
 8007c20:	d837      	bhi.n	8007c92 <__ssputs_r+0x82>
 8007c22:	898a      	ldrh	r2, [r1, #12]
 8007c24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c28:	d031      	beq.n	8007c8e <__ssputs_r+0x7e>
 8007c2a:	6825      	ldr	r5, [r4, #0]
 8007c2c:	6909      	ldr	r1, [r1, #16]
 8007c2e:	1a6f      	subs	r7, r5, r1
 8007c30:	6965      	ldr	r5, [r4, #20]
 8007c32:	2302      	movs	r3, #2
 8007c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c38:	fb95 f5f3 	sdiv	r5, r5, r3
 8007c3c:	f109 0301 	add.w	r3, r9, #1
 8007c40:	443b      	add	r3, r7
 8007c42:	429d      	cmp	r5, r3
 8007c44:	bf38      	it	cc
 8007c46:	461d      	movcc	r5, r3
 8007c48:	0553      	lsls	r3, r2, #21
 8007c4a:	d530      	bpl.n	8007cae <__ssputs_r+0x9e>
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	f7ff ff85 	bl	8007b5c <_malloc_r>
 8007c52:	4606      	mov	r6, r0
 8007c54:	b950      	cbnz	r0, 8007c6c <__ssputs_r+0x5c>
 8007c56:	230c      	movs	r3, #12
 8007c58:	f8ca 3000 	str.w	r3, [sl]
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c62:	81a3      	strh	r3, [r4, #12]
 8007c64:	f04f 30ff 	mov.w	r0, #4294967295
 8007c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c6c:	463a      	mov	r2, r7
 8007c6e:	6921      	ldr	r1, [r4, #16]
 8007c70:	f7ff fb0e 	bl	8007290 <memcpy>
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c7e:	81a3      	strh	r3, [r4, #12]
 8007c80:	6126      	str	r6, [r4, #16]
 8007c82:	6165      	str	r5, [r4, #20]
 8007c84:	443e      	add	r6, r7
 8007c86:	1bed      	subs	r5, r5, r7
 8007c88:	6026      	str	r6, [r4, #0]
 8007c8a:	60a5      	str	r5, [r4, #8]
 8007c8c:	464e      	mov	r6, r9
 8007c8e:	454e      	cmp	r6, r9
 8007c90:	d900      	bls.n	8007c94 <__ssputs_r+0x84>
 8007c92:	464e      	mov	r6, r9
 8007c94:	4632      	mov	r2, r6
 8007c96:	4641      	mov	r1, r8
 8007c98:	6820      	ldr	r0, [r4, #0]
 8007c9a:	f000 f93a 	bl	8007f12 <memmove>
 8007c9e:	68a3      	ldr	r3, [r4, #8]
 8007ca0:	1b9b      	subs	r3, r3, r6
 8007ca2:	60a3      	str	r3, [r4, #8]
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	441e      	add	r6, r3
 8007ca8:	6026      	str	r6, [r4, #0]
 8007caa:	2000      	movs	r0, #0
 8007cac:	e7dc      	b.n	8007c68 <__ssputs_r+0x58>
 8007cae:	462a      	mov	r2, r5
 8007cb0:	f000 f94a 	bl	8007f48 <_realloc_r>
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d1e2      	bne.n	8007c80 <__ssputs_r+0x70>
 8007cba:	6921      	ldr	r1, [r4, #16]
 8007cbc:	4650      	mov	r0, sl
 8007cbe:	f7ff feff 	bl	8007ac0 <_free_r>
 8007cc2:	e7c8      	b.n	8007c56 <__ssputs_r+0x46>

08007cc4 <_svfiprintf_r>:
 8007cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc8:	461d      	mov	r5, r3
 8007cca:	898b      	ldrh	r3, [r1, #12]
 8007ccc:	061f      	lsls	r7, r3, #24
 8007cce:	b09d      	sub	sp, #116	; 0x74
 8007cd0:	4680      	mov	r8, r0
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	4616      	mov	r6, r2
 8007cd6:	d50f      	bpl.n	8007cf8 <_svfiprintf_r+0x34>
 8007cd8:	690b      	ldr	r3, [r1, #16]
 8007cda:	b96b      	cbnz	r3, 8007cf8 <_svfiprintf_r+0x34>
 8007cdc:	2140      	movs	r1, #64	; 0x40
 8007cde:	f7ff ff3d 	bl	8007b5c <_malloc_r>
 8007ce2:	6020      	str	r0, [r4, #0]
 8007ce4:	6120      	str	r0, [r4, #16]
 8007ce6:	b928      	cbnz	r0, 8007cf4 <_svfiprintf_r+0x30>
 8007ce8:	230c      	movs	r3, #12
 8007cea:	f8c8 3000 	str.w	r3, [r8]
 8007cee:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf2:	e0c8      	b.n	8007e86 <_svfiprintf_r+0x1c2>
 8007cf4:	2340      	movs	r3, #64	; 0x40
 8007cf6:	6163      	str	r3, [r4, #20]
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007cfc:	2320      	movs	r3, #32
 8007cfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d02:	2330      	movs	r3, #48	; 0x30
 8007d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d08:	9503      	str	r5, [sp, #12]
 8007d0a:	f04f 0b01 	mov.w	fp, #1
 8007d0e:	4637      	mov	r7, r6
 8007d10:	463d      	mov	r5, r7
 8007d12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d16:	b10b      	cbz	r3, 8007d1c <_svfiprintf_r+0x58>
 8007d18:	2b25      	cmp	r3, #37	; 0x25
 8007d1a:	d13e      	bne.n	8007d9a <_svfiprintf_r+0xd6>
 8007d1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007d20:	d00b      	beq.n	8007d3a <_svfiprintf_r+0x76>
 8007d22:	4653      	mov	r3, sl
 8007d24:	4632      	mov	r2, r6
 8007d26:	4621      	mov	r1, r4
 8007d28:	4640      	mov	r0, r8
 8007d2a:	f7ff ff71 	bl	8007c10 <__ssputs_r>
 8007d2e:	3001      	adds	r0, #1
 8007d30:	f000 80a4 	beq.w	8007e7c <_svfiprintf_r+0x1b8>
 8007d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d36:	4453      	add	r3, sl
 8007d38:	9309      	str	r3, [sp, #36]	; 0x24
 8007d3a:	783b      	ldrb	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 809d 	beq.w	8007e7c <_svfiprintf_r+0x1b8>
 8007d42:	2300      	movs	r3, #0
 8007d44:	f04f 32ff 	mov.w	r2, #4294967295
 8007d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d4c:	9304      	str	r3, [sp, #16]
 8007d4e:	9307      	str	r3, [sp, #28]
 8007d50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d54:	931a      	str	r3, [sp, #104]	; 0x68
 8007d56:	462f      	mov	r7, r5
 8007d58:	2205      	movs	r2, #5
 8007d5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007d5e:	4850      	ldr	r0, [pc, #320]	; (8007ea0 <_svfiprintf_r+0x1dc>)
 8007d60:	f7f8 fa4e 	bl	8000200 <memchr>
 8007d64:	9b04      	ldr	r3, [sp, #16]
 8007d66:	b9d0      	cbnz	r0, 8007d9e <_svfiprintf_r+0xda>
 8007d68:	06d9      	lsls	r1, r3, #27
 8007d6a:	bf44      	itt	mi
 8007d6c:	2220      	movmi	r2, #32
 8007d6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d72:	071a      	lsls	r2, r3, #28
 8007d74:	bf44      	itt	mi
 8007d76:	222b      	movmi	r2, #43	; 0x2b
 8007d78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d7c:	782a      	ldrb	r2, [r5, #0]
 8007d7e:	2a2a      	cmp	r2, #42	; 0x2a
 8007d80:	d015      	beq.n	8007dae <_svfiprintf_r+0xea>
 8007d82:	9a07      	ldr	r2, [sp, #28]
 8007d84:	462f      	mov	r7, r5
 8007d86:	2000      	movs	r0, #0
 8007d88:	250a      	movs	r5, #10
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d90:	3b30      	subs	r3, #48	; 0x30
 8007d92:	2b09      	cmp	r3, #9
 8007d94:	d94d      	bls.n	8007e32 <_svfiprintf_r+0x16e>
 8007d96:	b1b8      	cbz	r0, 8007dc8 <_svfiprintf_r+0x104>
 8007d98:	e00f      	b.n	8007dba <_svfiprintf_r+0xf6>
 8007d9a:	462f      	mov	r7, r5
 8007d9c:	e7b8      	b.n	8007d10 <_svfiprintf_r+0x4c>
 8007d9e:	4a40      	ldr	r2, [pc, #256]	; (8007ea0 <_svfiprintf_r+0x1dc>)
 8007da0:	1a80      	subs	r0, r0, r2
 8007da2:	fa0b f000 	lsl.w	r0, fp, r0
 8007da6:	4318      	orrs	r0, r3
 8007da8:	9004      	str	r0, [sp, #16]
 8007daa:	463d      	mov	r5, r7
 8007dac:	e7d3      	b.n	8007d56 <_svfiprintf_r+0x92>
 8007dae:	9a03      	ldr	r2, [sp, #12]
 8007db0:	1d11      	adds	r1, r2, #4
 8007db2:	6812      	ldr	r2, [r2, #0]
 8007db4:	9103      	str	r1, [sp, #12]
 8007db6:	2a00      	cmp	r2, #0
 8007db8:	db01      	blt.n	8007dbe <_svfiprintf_r+0xfa>
 8007dba:	9207      	str	r2, [sp, #28]
 8007dbc:	e004      	b.n	8007dc8 <_svfiprintf_r+0x104>
 8007dbe:	4252      	negs	r2, r2
 8007dc0:	f043 0302 	orr.w	r3, r3, #2
 8007dc4:	9207      	str	r2, [sp, #28]
 8007dc6:	9304      	str	r3, [sp, #16]
 8007dc8:	783b      	ldrb	r3, [r7, #0]
 8007dca:	2b2e      	cmp	r3, #46	; 0x2e
 8007dcc:	d10c      	bne.n	8007de8 <_svfiprintf_r+0x124>
 8007dce:	787b      	ldrb	r3, [r7, #1]
 8007dd0:	2b2a      	cmp	r3, #42	; 0x2a
 8007dd2:	d133      	bne.n	8007e3c <_svfiprintf_r+0x178>
 8007dd4:	9b03      	ldr	r3, [sp, #12]
 8007dd6:	1d1a      	adds	r2, r3, #4
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	9203      	str	r2, [sp, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	bfb8      	it	lt
 8007de0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007de4:	3702      	adds	r7, #2
 8007de6:	9305      	str	r3, [sp, #20]
 8007de8:	4d2e      	ldr	r5, [pc, #184]	; (8007ea4 <_svfiprintf_r+0x1e0>)
 8007dea:	7839      	ldrb	r1, [r7, #0]
 8007dec:	2203      	movs	r2, #3
 8007dee:	4628      	mov	r0, r5
 8007df0:	f7f8 fa06 	bl	8000200 <memchr>
 8007df4:	b138      	cbz	r0, 8007e06 <_svfiprintf_r+0x142>
 8007df6:	2340      	movs	r3, #64	; 0x40
 8007df8:	1b40      	subs	r0, r0, r5
 8007dfa:	fa03 f000 	lsl.w	r0, r3, r0
 8007dfe:	9b04      	ldr	r3, [sp, #16]
 8007e00:	4303      	orrs	r3, r0
 8007e02:	3701      	adds	r7, #1
 8007e04:	9304      	str	r3, [sp, #16]
 8007e06:	7839      	ldrb	r1, [r7, #0]
 8007e08:	4827      	ldr	r0, [pc, #156]	; (8007ea8 <_svfiprintf_r+0x1e4>)
 8007e0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e0e:	2206      	movs	r2, #6
 8007e10:	1c7e      	adds	r6, r7, #1
 8007e12:	f7f8 f9f5 	bl	8000200 <memchr>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	d038      	beq.n	8007e8c <_svfiprintf_r+0x1c8>
 8007e1a:	4b24      	ldr	r3, [pc, #144]	; (8007eac <_svfiprintf_r+0x1e8>)
 8007e1c:	bb13      	cbnz	r3, 8007e64 <_svfiprintf_r+0x1a0>
 8007e1e:	9b03      	ldr	r3, [sp, #12]
 8007e20:	3307      	adds	r3, #7
 8007e22:	f023 0307 	bic.w	r3, r3, #7
 8007e26:	3308      	adds	r3, #8
 8007e28:	9303      	str	r3, [sp, #12]
 8007e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e2c:	444b      	add	r3, r9
 8007e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e30:	e76d      	b.n	8007d0e <_svfiprintf_r+0x4a>
 8007e32:	fb05 3202 	mla	r2, r5, r2, r3
 8007e36:	2001      	movs	r0, #1
 8007e38:	460f      	mov	r7, r1
 8007e3a:	e7a6      	b.n	8007d8a <_svfiprintf_r+0xc6>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	3701      	adds	r7, #1
 8007e40:	9305      	str	r3, [sp, #20]
 8007e42:	4619      	mov	r1, r3
 8007e44:	250a      	movs	r5, #10
 8007e46:	4638      	mov	r0, r7
 8007e48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e4c:	3a30      	subs	r2, #48	; 0x30
 8007e4e:	2a09      	cmp	r2, #9
 8007e50:	d903      	bls.n	8007e5a <_svfiprintf_r+0x196>
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d0c8      	beq.n	8007de8 <_svfiprintf_r+0x124>
 8007e56:	9105      	str	r1, [sp, #20]
 8007e58:	e7c6      	b.n	8007de8 <_svfiprintf_r+0x124>
 8007e5a:	fb05 2101 	mla	r1, r5, r1, r2
 8007e5e:	2301      	movs	r3, #1
 8007e60:	4607      	mov	r7, r0
 8007e62:	e7f0      	b.n	8007e46 <_svfiprintf_r+0x182>
 8007e64:	ab03      	add	r3, sp, #12
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	4622      	mov	r2, r4
 8007e6a:	4b11      	ldr	r3, [pc, #68]	; (8007eb0 <_svfiprintf_r+0x1ec>)
 8007e6c:	a904      	add	r1, sp, #16
 8007e6e:	4640      	mov	r0, r8
 8007e70:	f7fc fb72 	bl	8004558 <_printf_float>
 8007e74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e78:	4681      	mov	r9, r0
 8007e7a:	d1d6      	bne.n	8007e2a <_svfiprintf_r+0x166>
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	065b      	lsls	r3, r3, #25
 8007e80:	f53f af35 	bmi.w	8007cee <_svfiprintf_r+0x2a>
 8007e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e86:	b01d      	add	sp, #116	; 0x74
 8007e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8c:	ab03      	add	r3, sp, #12
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	4622      	mov	r2, r4
 8007e92:	4b07      	ldr	r3, [pc, #28]	; (8007eb0 <_svfiprintf_r+0x1ec>)
 8007e94:	a904      	add	r1, sp, #16
 8007e96:	4640      	mov	r0, r8
 8007e98:	f7fc fe14 	bl	8004ac4 <_printf_i>
 8007e9c:	e7ea      	b.n	8007e74 <_svfiprintf_r+0x1b0>
 8007e9e:	bf00      	nop
 8007ea0:	080082ec 	.word	0x080082ec
 8007ea4:	080082f2 	.word	0x080082f2
 8007ea8:	080082f6 	.word	0x080082f6
 8007eac:	08004559 	.word	0x08004559
 8007eb0:	08007c11 	.word	0x08007c11

08007eb4 <_sbrk_r>:
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	4c06      	ldr	r4, [pc, #24]	; (8007ed0 <_sbrk_r+0x1c>)
 8007eb8:	2300      	movs	r3, #0
 8007eba:	4605      	mov	r5, r0
 8007ebc:	4608      	mov	r0, r1
 8007ebe:	6023      	str	r3, [r4, #0]
 8007ec0:	f7f9 fbd4 	bl	800166c <_sbrk>
 8007ec4:	1c43      	adds	r3, r0, #1
 8007ec6:	d102      	bne.n	8007ece <_sbrk_r+0x1a>
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	b103      	cbz	r3, 8007ece <_sbrk_r+0x1a>
 8007ecc:	602b      	str	r3, [r5, #0]
 8007ece:	bd38      	pop	{r3, r4, r5, pc}
 8007ed0:	20000544 	.word	0x20000544

08007ed4 <strncmp>:
 8007ed4:	b510      	push	{r4, lr}
 8007ed6:	b16a      	cbz	r2, 8007ef4 <strncmp+0x20>
 8007ed8:	3901      	subs	r1, #1
 8007eda:	1884      	adds	r4, r0, r2
 8007edc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007ee0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d103      	bne.n	8007ef0 <strncmp+0x1c>
 8007ee8:	42a0      	cmp	r0, r4
 8007eea:	d001      	beq.n	8007ef0 <strncmp+0x1c>
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1f5      	bne.n	8007edc <strncmp+0x8>
 8007ef0:	1a98      	subs	r0, r3, r2
 8007ef2:	bd10      	pop	{r4, pc}
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	e7fc      	b.n	8007ef2 <strncmp+0x1e>

08007ef8 <__ascii_wctomb>:
 8007ef8:	b149      	cbz	r1, 8007f0e <__ascii_wctomb+0x16>
 8007efa:	2aff      	cmp	r2, #255	; 0xff
 8007efc:	bf85      	ittet	hi
 8007efe:	238a      	movhi	r3, #138	; 0x8a
 8007f00:	6003      	strhi	r3, [r0, #0]
 8007f02:	700a      	strbls	r2, [r1, #0]
 8007f04:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f08:	bf98      	it	ls
 8007f0a:	2001      	movls	r0, #1
 8007f0c:	4770      	bx	lr
 8007f0e:	4608      	mov	r0, r1
 8007f10:	4770      	bx	lr

08007f12 <memmove>:
 8007f12:	4288      	cmp	r0, r1
 8007f14:	b510      	push	{r4, lr}
 8007f16:	eb01 0302 	add.w	r3, r1, r2
 8007f1a:	d807      	bhi.n	8007f2c <memmove+0x1a>
 8007f1c:	1e42      	subs	r2, r0, #1
 8007f1e:	4299      	cmp	r1, r3
 8007f20:	d00a      	beq.n	8007f38 <memmove+0x26>
 8007f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f26:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007f2a:	e7f8      	b.n	8007f1e <memmove+0xc>
 8007f2c:	4283      	cmp	r3, r0
 8007f2e:	d9f5      	bls.n	8007f1c <memmove+0xa>
 8007f30:	1881      	adds	r1, r0, r2
 8007f32:	1ad2      	subs	r2, r2, r3
 8007f34:	42d3      	cmn	r3, r2
 8007f36:	d100      	bne.n	8007f3a <memmove+0x28>
 8007f38:	bd10      	pop	{r4, pc}
 8007f3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f3e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007f42:	e7f7      	b.n	8007f34 <memmove+0x22>

08007f44 <__malloc_lock>:
 8007f44:	4770      	bx	lr

08007f46 <__malloc_unlock>:
 8007f46:	4770      	bx	lr

08007f48 <_realloc_r>:
 8007f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4a:	4607      	mov	r7, r0
 8007f4c:	4614      	mov	r4, r2
 8007f4e:	460e      	mov	r6, r1
 8007f50:	b921      	cbnz	r1, 8007f5c <_realloc_r+0x14>
 8007f52:	4611      	mov	r1, r2
 8007f54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f58:	f7ff be00 	b.w	8007b5c <_malloc_r>
 8007f5c:	b922      	cbnz	r2, 8007f68 <_realloc_r+0x20>
 8007f5e:	f7ff fdaf 	bl	8007ac0 <_free_r>
 8007f62:	4625      	mov	r5, r4
 8007f64:	4628      	mov	r0, r5
 8007f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f68:	f000 f814 	bl	8007f94 <_malloc_usable_size_r>
 8007f6c:	42a0      	cmp	r0, r4
 8007f6e:	d20f      	bcs.n	8007f90 <_realloc_r+0x48>
 8007f70:	4621      	mov	r1, r4
 8007f72:	4638      	mov	r0, r7
 8007f74:	f7ff fdf2 	bl	8007b5c <_malloc_r>
 8007f78:	4605      	mov	r5, r0
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	d0f2      	beq.n	8007f64 <_realloc_r+0x1c>
 8007f7e:	4631      	mov	r1, r6
 8007f80:	4622      	mov	r2, r4
 8007f82:	f7ff f985 	bl	8007290 <memcpy>
 8007f86:	4631      	mov	r1, r6
 8007f88:	4638      	mov	r0, r7
 8007f8a:	f7ff fd99 	bl	8007ac0 <_free_r>
 8007f8e:	e7e9      	b.n	8007f64 <_realloc_r+0x1c>
 8007f90:	4635      	mov	r5, r6
 8007f92:	e7e7      	b.n	8007f64 <_realloc_r+0x1c>

08007f94 <_malloc_usable_size_r>:
 8007f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f98:	1f18      	subs	r0, r3, #4
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	bfbc      	itt	lt
 8007f9e:	580b      	ldrlt	r3, [r1, r0]
 8007fa0:	18c0      	addlt	r0, r0, r3
 8007fa2:	4770      	bx	lr

08007fa4 <_init>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	bf00      	nop
 8007fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007faa:	bc08      	pop	{r3}
 8007fac:	469e      	mov	lr, r3
 8007fae:	4770      	bx	lr

08007fb0 <_fini>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr
